{
"struct input\n"
"{\n"
"  float2 video_size;\n"
"  float2 texture_size;\n"
"  float2 output_size;\n"
"  float frame_count;\n"
"  float frame_direction;\n"
"  float frame_rotation;\n"
"};\n"
"\n"
"struct VERTEX_OUTPUT {\n"
"  float4 position : POSITION;\n"
"  float4 vpos : TEXCOORD1;\n"
"  float2 texCoord : TEXCOORD0;\n"
"};\n"
"\n"
"struct output \n"
"{\n"
"  float4 color : COLOR;\n"
"};\n"
"\n"
"VERTEX_OUTPUT main_vertex\n"
"(\n"
"	float4 position	: POSITION,\n"
"	float2 texCoord : TEXCOORD0,\n"
"	float4 vpos : TEXCOORD1,\n"
"    uniform input IN,\n"
"   	uniform float4x4 modelViewProj\n"
")\n"
"{\n"
"	VERTEX_OUTPUT OUT;\n"
"	OUT.position = mul(modelViewProj, position);\n"
"    OUT.vpos = OUT.position;\n"
"	OUT.texCoord = texCoord;\n"
"	return OUT;\n"
"}\n"
"\n"
"struct deltas\n"
"{\n"
"   float2 UL, UR, DL, DR, M;\n"
"};\n"
"\n"
"output main_fragment(in VERTEX_OUTPUT VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) \n"
"{\n"
"    //yes Cg is THIS retarded, passing position as texturecoord\n"
"	output OUT;\n"
"	VAR.vpos /= VAR.vpos.w;\n"
"	// get texel size   	\n"
"	float2 ps = float2(0.9999/IN.texture_size.x, 0.9999/IN.texture_size.y);\n"
"\n"
"	deltas loc = { \n"
"      VAR.texCoord + float2(-ps.x, -ps.y),\n"
"      VAR.texCoord + float2(ps.x, -ps.y),\n"
"      VAR.texCoord + float2(-ps.x, ps.y),\n"
"      VAR.texCoord + float2(ps.x, ps.y),\n"
"	  VAR.texCoord\n"
"   };\n"
"   //read locations\n"
"   float3 colUL = tex2D(decal, loc.UL).xyz;\n"
"   float3 colUR= tex2D(decal, loc.UR).xyz;\n"
"   float3 colDL = tex2D(decal, loc.DL).xyz;\n"
"   float3 colDR = tex2D(decal, loc.DR).xyz;\n"
"   float3 colM = tex2D(decal, loc.M).xyz;\n"
"   //get luma vals/edge detection\n"
"   float3 luma = vec3(0.299, 0.587, 0.114);\n"
"   float lumaUL = dot(colUL, luma);\n"
"   float lumaUR = dot(colUR, luma);\n"
"   float lumaDL = dot(colDL, luma);\n"
"   float lumaDR = dot(colDR, luma);\n"
"   float lumaM  = dot(colM,  luma);\n"
"   float lumaMin = min(lumaM, min(min(lumaUL, lumaUR), min(lumaDL, lumaDR)));\n"
"   float lumaMax = max(lumaM, max(max(lumaUL, lumaUR), max(lumaDL, lumaDR))); \n"
"   float2 dir;\n"
"   dir.x = -((lumaUL + lumaUR) - (lumaDR + lumaDL));\n"
"   dir.y =  ((lumaUR + lumaDR) - (lumaUL + lumaDL));\n"
"   \n"
"   OUT.color = abs(dir.x) +abs(dir.y);\n"
"\n"
"	return OUT;\n"
"	\n"
"}\n"
},
