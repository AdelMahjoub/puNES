"\n"
"// Based on Iterations - shiny Shadertoy - https://www.shadertoy.com/view/MslXz8\n"
"// Created by inigo quilez - iq/2014\n"
"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float frame_count;\n"
"   float frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"input IN_global;\n"
"sampler2D s0_global;\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"\n"
"   float4 color : COLOR,\n"
"   out float4 oColor : COLOR,\n"
"\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD,\n"
"\n"
"   float2 tex_border : TEXCOORD1,\n"
"   out float2 otex_border : TEXCOORD1,\n"
"\n"
"   uniform input IN\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oColor = color;\n"
"   \n"
"   float2 out_res = float2(out_res_x, out_res_y);\n"
"   float2 corrected_size = float2(in_res_x, in_res_y);\n"
"   float2 scale = (IN.output_size / corrected_size) / box_scale;\n"
"   float2 middle = location * IN.video_size / IN.texture_size;\n"
"   float2 diff = tex.xy - middle;\n"
"   oTex = middle + diff * scale;\n"
"\n"
"   middle = float2(0.49999, 0.49999);\n"
"   float2 dist = tex_border - middle;\n"
"   otex_border = middle + dist * IN.output_size / out_res;\n"
"}\n"
"\n"
"float4 conv_background(float4 back, float2 coord, float frame_count)\n"
"{\n"
"   return float4(back.rgb, back.a);\n"
"}\n"
"\n"
"float4 main_fragment (\n"
"   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,\n"
"   uniform sampler2D s0 : TEXUNIT0,\n"
"   uniform sampler2D bg,\n"
"   uniform input IN) : COLOR\n"
"{\n"
"	float2 pc = (1000.0* SCALE * (tex.xy*(IN.texture_size.xy/IN.video_size.xy)).xy-IN.texture_size.xy)/min(IN.texture_size.y,IN.texture_size.x);\n"
"\n"
"	float2 pa = pc + float2(0.04,0.0);\n"
"	float2 pb = pc + float2(0.0,0.04);\n"
"	\n"
"    // shape (3 times for diferentials); Had to unroll this function, as IN_global.frame_count apparently doesn't iterate :/\n"
"	float2 zc = pc;\n"
"	float3 fc = float3( 0.0 );\n"
"	for( int i=0; i<8; i++ ) \n"
"	{\n"
"        // transform		\n"
"		zc += cos(zc.yx + cos(zc.yx + cos(zc.yx+IN.frame_count * 0.01 * SPEED) ) );\n"
"\n"
"        // orbit traps		\n"
"		float d = dot( zc-pc, zc-pc ); \n"
"		fc.x += 1.0/(1.0+d);\n"
"		fc.y += d;\n"
"		fc.z += sin(atan(zc.y-pc.y,zc.x-pc.x));\n"
"	}\n"
"	fc /= 8.0;\n"
"	float3 sc = fc;\n"
"	\n"
"	float2 za = pa;\n"
"	float3 fa = float3( 0.0 );\n"
"		for( int i=0; i<8; i++ ) \n"
"	{\n"
"        // transform		\n"
"		za += cos(za.yx + cos(za.yx + cos(za.yx+IN.frame_count * 0.01 * SPEED) ) );\n"
"\n"
"        // orbit traps		\n"
"		float d = dot( za-pa, za-pa ); \n"
"		fa.x += 1.0/(1.0+d);\n"
"		fa.y += d;\n"
"		fa.z += sin(atan(za.y-pa.y,za.x-pa.x));\n"
"	}\n"
"	fa /= 8.0;\n"
"	float3 sa = fa;\n"
"	\n"
"	float2 zb = pb;\n"
"	float3 fb = float3( 0.0 );\n"
"		for( int i=0; i<8; i++ ) \n"
"	{\n"
"        // transform		\n"
"		zb += cos(zb.yx + cos(zb.yx + cos(zb.yx+IN.frame_count * 0.01 * SPEED) ) );\n"
"\n"
"        // orbit traps		\n"
"		float d = dot( zb-pb, zb-pb ); \n"
"		fb.x += 1.0/(1.0+d);\n"
"		fb.y += d;\n"
"		fb.z += sin(atan(zb.y-pb.y,zb.x-pb.x));\n"
"	}\n"
"	fb /= 8.0;\n"
"	float3 sb = fb;\n"
"\n"
"    // color	\n"
"	float3 col = mix( float3(0.08,0.02,0.15), float3(0.6,1.1,1.6), sc.x );\n"
"	col = mix( col, col.zxy, smoothstep(-0.5,0.5,cos(0.01*IN.frame_count * COL_SHFT)) );\n"
"	col *= 0.15*sc.y;\n"
"	col += 0.4*abs(sc.z) - 0.1;\n"
"\n"
"    // light	\n"
"	float3 nor = normalize( float3( sa.x-sc.x, 0.01, sb.x-sc.x ) );\n"
"	float dif = clamp(0.5 + 0.5*dot( nor,float3(0.5773) ),0.0,1.0);\n"
"	col *= 1.0 + 0.7*dif*col;\n"
"	col += 0.3 * pow(nor.y,128.0);\n"
"\n"
"    // vignetting	\n"
"	col *= 1.0 - 0.1*length(pc);\n"
"\n"
"	float4 effect = float4( col, 1.0 );\n"
"	\n"
"   float4 frame = tex2D(s0, tex);\n"
"   float2 fragcoord = tex.xy * (IN.texture_size.xy/IN.video_size.xy);\n"
"   float4 background = conv_background(tex2D(bg, tex_border), tex_border, IN.frame_count);\n"
"   if (fragcoord.x < 1.0 && fragcoord.x > 0.0 && fragcoord.y < 1.0 && fragcoord.y > 0.0 && border_on_top > 0.5)\n"
"   background.a *= 0.0;\n"
"   return lerp(frame, effect, background.a);\n"
"}\n"

