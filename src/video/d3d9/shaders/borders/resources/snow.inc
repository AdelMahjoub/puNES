"\n"
"// Snowy Border Cg shader, based on Andrew Baldwin's 'Just Snow' shadertoy, licensed below:\n"
"// Copyright (c) 2013 Andrew Baldwin (twitter: baldand, www: http://thndl.com)\n"
"// License = Attribution-NonCommercial-ShareAlike (http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US)\n"
"\n"
"// \"Just snow\"\n"
"// Simple (but not cheap) snow made from multiple parallax layers with randomly positioned \n"
"// flakes and directions. Also includes a DoF effect. Pan around with mouse.\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float frame_count;\n"
"   float frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"\n"
"   float4 color : COLOR,\n"
"   out float4 oColor : COLOR,\n"
"\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD,\n"
"\n"
"   float2 tex_border : TEXCOORD1,\n"
"   out float2 otex_border : TEXCOORD1,\n"
"\n"
"   uniform input IN\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oColor = color;\n"
"   \n"
"   float2 out_res = float2(out_res_x, out_res_y);\n"
"   float2 corrected_size = float2(in_res_x, in_res_y);\n"
"   float2 scale = (IN.output_size / corrected_size) / box_scale;\n"
"   float2 middle = location * IN.video_size / IN.texture_size;\n"
"   float2 diff = tex.xy - middle;\n"
"   oTex = middle + diff * scale;\n"
"\n"
"   middle = float2(0.49999, 0.49999);\n"
"   float2 dist = tex_border - middle;\n"
"   otex_border = middle + dist * IN.output_size / out_res;\n"
"}\n"
"\n"
"#define LAYERS 15.0\n"
"#define DEPTH 1.0\n"
"#define WIDTH 0.75\n"
"#define SPEED -.03\n"
"\n"
"input IN_global;\n"
"sampler2D s0_global;\n"
"\n"
"float4 conv_background(float4 back, float2 coord, float frame_count)\n"
"{\n"
"   return float4(back.rgb, back.a);\n"
"}\n"
"\n"
"float4 main_fragment (\n"
"   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,\n"
"   uniform sampler2D s0 : TEXUNIT0,\n"
"   uniform sampler2D bg,\n"
"   uniform input IN) : COLOR\n"
"{\n"
"   s0_global = s0;\n"
"   IN_global = IN;\n"
"	const float3x3 p = float3x3(13.323122,21.1212,21.8112,23.5112,28.7312,14.7212,21.71123,11.9312,61.3934);\n"
"	float2 uv = tex.xy*(IN.texture_size.xy/IN.video_size.xy);\n"
"	float3 acc = float3(R, G, B);\n"
"	float dof = 5.*sin(IN.frame_count*.1);\n"
"	for (int i=0;i<LAYERS;i++) {\n"
"		float fi = float(i);\n"
"		float2 q = uv*(1.+fi*DEPTH);\n"
"		q += float2(q.y*(WIDTH*mod(fi*7.238917,1.)-WIDTH*.5),SPEED*IN.frame_count/(1.+fi*DEPTH*.03));\n"
"		float3 n = float3(floor(q),31.189+fi);\n"
"		float3 m = floor(n)*.00001 + frac(n);\n"
"		float3 mp = (31415.9+m)/frac(mul(p,m));\n"
"		float3 r = frac(mp);\n"
"		float2 s = abs(mod(q,1.)-.5+.9*r.xy-.45);\n"
"		s += .01*abs(2.*frac(10.*q.yx)-1.); \n"
"		float d = .6*max(s.x-s.y,s.x+s.y)+max(s.x,s.y)-.01;\n"
"		float edge = .05+.05*min(.5*abs(fi-5.-dof),1.);\n"
"		acc += float3(smoothstep(edge,-edge,d)*(r.x/(1.+.02*fi*DEPTH)));\n"
"	}\n"
"	float4 snowscape = float4(float3(acc),1.0);\n"
"	\n"
"   float4 frame = tex2D(s0, tex);\n"
"   float2 fragcoord = tex.xy * (IN.texture_size.xy/IN.video_size.xy);\n"
"   float4 background = conv_background(tex2D(bg, tex_border), tex_border, IN.frame_count);\n"
"   if (fragcoord.x < 1.0 && fragcoord.x > 0.0 && fragcoord.y < 1.0 && fragcoord.y > 0.0 && border_on_top > 0.5)\n"
"   background.a *= 0.0;\n"
"   return lerp(frame, snowscape, background.a);\n"
"}\n"
