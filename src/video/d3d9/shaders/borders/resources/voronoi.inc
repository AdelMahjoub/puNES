"\n"
"// Based on Voronoi - smooth Shadertoy - https://www.shadertoy.com/view/ldB3zc\n"
"// Created by inigo quilez - iq/2014\n"
"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float frame_count;\n"
"   float frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"input IN_global;\n"
"sampler2D s0_global;\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"\n"
"   float4 color : COLOR,\n"
"   out float4 oColor : COLOR,\n"
"\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD,\n"
"\n"
"   float2 tex_border : TEXCOORD1,\n"
"   out float2 otex_border : TEXCOORD1,\n"
"\n"
"   uniform input IN\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oColor = color;\n"
"   \n"
"   float2 out_res = float2(out_res_x, out_res_y);\n"
"   float2 corrected_size = float2(in_res_x, in_res_y);\n"
"   float2 scale = (IN.output_size / corrected_size) / box_scale;\n"
"   float2 middle = location * IN.video_size / IN.texture_size;\n"
"   float2 diff = tex.xy - middle;\n"
"   oTex = middle + diff * scale;\n"
"\n"
"   middle = float2(0.49999, 0.49999);\n"
"   float2 dist = tex_border - middle;\n"
"   otex_border = middle + dist * IN.output_size / out_res;\n"
"}\n"
"\n"
"float hash1( float n ) { return frac(sin(n)*43758.5453); }\n"
"float2  hash2( float2  p ) { p = float2( dot(p,float2(127.1,311.7)), dot(p,float2(269.5,183.3)) ); return frac(sin(p)*43758.5453); }\n"
"\n"
"float4 voronoi( in float2 x, float w )\n"
"{\n"
"    float2 n = floor( x );\n"
"    float2 f = frac( x );\n"
"\n"
"	float4 m = float4( 8.0, 0.0, 0.0, 0.0 );\n"
"    for( int j=-1; j<=1; j++ )\n"
"    for( int i=-1; i<=1; i++ )\n"
"    {\n"
"        float2 g = float2( float(i),float(j) );\n"
"        float2 o = hash2( n + g );\n"
"		\n"
"		// animate\n"
"        o = 0.5 + 0.5*sin( 0.01 * IN_global.frame_count + 6.2831*o );\n"
"\n"
"        // distance to cell		\n"
"		float d = length(g - f + o);\n"
"		\n"
"        // do the smooth min for colors and distances		\n"
"		float3 col = 0.5 + 0.5*sin( hash1(dot(n+g,float2(7.0,113.0)))*2.5 + 3.5 + float3(2.0,3.0,0.0));\n"
"		float h = smoothstep( 0.0, 1.0, 0.5 + 0.5*(m.x-d)/w );\n"
"		\n"
"	    m.x   = mix( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance\n"
"		m.yzw = mix( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // cioloe\n"
"    }\n"
"	\n"
"	return m;\n"
"}\n"
"\n"
"float4 conv_background(float4 back, float2 coord, float frame_count)\n"
"{\n"
"   return float4(back.rgb, back.a);\n"
"}\n"
"\n"
"float4 main_fragment (\n"
"   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,\n"
"   uniform sampler2D s0 : TEXUNIT0,\n"
"   uniform sampler2D bg,\n"
"   uniform input IN) : COLOR\n"
"{\n"
"   s0_global = s0;\n"
"   IN_global = IN;\n"
"\n"
"    float2 p = 500.0 * (tex.xy*(IN.texture_size.xy/IN.video_size.xy))/IN.texture_size.yy;\n"
"	\n"
"	float k = 2.0 + 70.0 * pow( 0.5 + 0.5*sin(0.25*6.2831*0.03 * IN.frame_count), 4.0 );\n"
"	k = 0.5 - 0.5*cos(0.25*6.2831*0.03 * IN.frame_count);\n"
"    float4 c = voronoi( 6.0*p, k );\n"
"\n"
"    float3 col = c.yzw;\n"
"	\n"
"	col *= 1.0 - 0.8*c.x*step(p.y,0.33);\n"
"	col *= mix(c.x,1.0,step(p.y,0.66));\n"
"	\n"
"	col *= smoothstep( 0.005, 0.007, abs(p.y-0.33) );\n"
"	col *= smoothstep( 0.005, 0.007, abs(p.y-0.66) );\n"
"	\n"
"	float4 hexscape = float4( col, 1.0 );\n"
"	\n"
"   float4 frame = tex2D(s0, tex);\n"
"   float2 fragcoord = tex.xy * (IN.texture_size.xy/IN.video_size.xy);\n"
"   float4 background = conv_background(tex2D(bg, tex_border), tex_border, IN.frame_count);\n"
"   if (fragcoord.x < 1.0 && fragcoord.x > 0.0 && fragcoord.y < 1.0 && fragcoord.y > 0.0 && border_on_top > 0.5)\n"
"   background.a *= 0.0;\n"
"   return lerp(frame, hexscape, background.a);\n"
"}\n"

