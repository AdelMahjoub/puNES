{
"/*\n"
"   Hyllian's 4xBR v3.8c+ReverseAA (squared) Shader + crt-caligari\n"
"   \n"
"   Copyright (C) 2011/2012 Hyllian/Jararaca - sergiogdb@gmail.com\n"
"\n"
"   This program is free software; you can redistribute it and/or\n"
"   modify it under the terms of the GNU General Public License\n"
"   as published by the Free Software Foundation; either version 2\n"
"   of the License, or (at your option) any later version.\n"
"\n"
"   This program is distributed in the hope that it will be useful,\n"
"   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"   GNU General Public License for more details.\n"
"\n"
"   You should have received a copy of the GNU General Public License\n"
"   along with this program; if not, write to the Free Software\n"
"   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n"
"\n"
"*/\n"
"\n"
"\n"
"/*\n"
" *  ReverseAA part of the code\n"
" *\n"
" *  Copyright (c) 2012, Christoph Feck <christoph@maxiom.de>\n"
" *  All Rights reserved.\n"
" *\n"
" *  Redistribution and use in source and binary forms, with or without\n"
" *  modification, are permitted provided that the following conditions are met:\n"
" *\n"
" *    * Redistributions of source code must retain the above copyright notice,\n"
" *      this list of conditions and the following disclaimer.\n"
" *\n"
" *    * Redistributions in binary form must reproduce the above copyright\n"
" *      notice, this list of conditions and the following disclaimer in the\n"
" *      documentation and/or other materials provided with the distribution.\n"
" *\n"
" *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n"
" *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n"
" *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n"
" *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n"
" *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n"
" *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n"
" *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n"
" *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n"
" *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n"
" *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n"
" *  POSSIBILITY OF SUCH DAMAGE.\n"
" *\n"
" */\n"
"\n"
"\n"
"const static float coef           = 2.0;\n"
"const static float4 eq_threshold  = float4(15.0, 15.0, 15.0, 15.0);\n"
"const static half y_weight        = 48.0;\n"
"const static half u_weight        = 7.0;\n"
"const static half v_weight        = 6.0;\n"
"const static half3x3 yuv          = half3x3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);\n"
"const static half3x3 yuv_weighted = half3x3(y_weight*yuv[0], u_weight*yuv[1], v_weight*yuv[2]);\n"
"const static float4 delta       = float4(0.4, 0.4, 0.4, 0.4);\n"
"const static float sharpness    = 0.65;\n"
"\n"
"\n"
"        // Constants used with gamma correction.\n"
"        #define InputGamma 2.4\n"
"        #define OutputGamma 2.2\n"
"\n"
"        #define GAMMA_IN(color)     pow(color, float3(InputGamma, InputGamma, InputGamma))\n"
"        #define GAMMA_OUT(color)    pow(color, float3(1.0 / OutputGamma, 1.0 / OutputGamma, 1.0 / OutputGamma))\n"
"\n"
"	#define TEX2D(coords)	GAMMA_IN( tex2D(decal, coords).xyz )\n"
"\n"
"        // 0.5 = the spot stays inside the original pixel\n"
"        // 1.0 = the spot bleeds up to the center of next pixel\n"
"	#define SPOT_HEIGHT 0.58\n"
"\n"
"        // Used to counteract the desaturation effect of weighting.\n"
"        #define COLOR_BOOST 1.45\n"
"\n"
"        // Macro for weights computing\n"
"        #define WEIGHT(w) \\\n"
"       		if(w>1.0) w=1.0; \\\n"
"       		w = 1.0 - w * w; \\\n"
"       		w = w * w;\\\n"
"\n"
"\n"
"\n"
"float4 df(float4 A, float4 B)\n"
"{\n"
"	return float4(abs(A-B));\n"
"}\n"
"\n"
"half c_df(half3 c1, half3 c2) {\n"
"                        half3 df = abs(c1 - c2);\n"
"                        return df.r + df.g + df.b;\n"
"                }\n"
"\n"
"bool4 eq(float4 A, float4 B)\n"
"{\n"
"	return (df(A, B) < eq_threshold);\n"
"}\n"
"\n"
"bool4 eq2(float4 A, float4 B)\n"
"{\n"
"	return (df(A, B) < float4(2.0, 2.0, 2.0, 2.0));\n"
"}\n"
"\n"
"\n"
"float4 weighted_distance(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h)\n"
"{\n"
"	return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));\n"
"}\n"
"\n"
"\n"
"\n"
"struct input\n"
"{\n"
"	half2 video_size;\n"
"	float2 texture_size;\n"
"	half2 output_size;\n"
"};\n"
"\n"
"\n"
"struct out_vertex {\n"
"	half4 position : POSITION;\n"
"	half4 color    : COLOR;\n"
"	float2 texCoord : TEXCOORD0;\n"
"	float4 t1       : TEXCOORD1;\n"
"	float4 t2       : TEXCOORD2;\n"
"	float4 t3       : TEXCOORD3;\n"
"	float4 t4       : TEXCOORD4;\n"
"	float4 t5       : TEXCOORD5;\n"
"	float4 t6       : TEXCOORD6;\n"
"	float4 t7       : TEXCOORD7;\n"
"};\n"
"\n"
"/*    VERTEX_SHADER    */\n"
"out_vertex main_vertex\n"
"(\n"
"	half4 position	: POSITION,\n"
"	half4 color	: COLOR,\n"
"	float2 texCoord1 : TEXCOORD0,\n"
"\n"
"   	uniform half4x4 modelViewProj,\n"
"	uniform input IN\n"
")\n"
"{\n"
"	out_vertex OUT;\n"
"\n"
"	OUT.position = mul(modelViewProj, position);\n"
"	OUT.color = color;\n"
"\n"
"	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);\n"
"	float dx = ps.x;\n"
"	float dy = ps.y;\n"
"\n"
"	//    A1 B1 C1\n"
"	// A0  A  B  C C4\n"
"	// D0  D  E  F F4\n"
"	// G0  G  H  I I4\n"
"	//    G5 H5 I5\n"
"\n"
"	// This line fix a bug in ATI cards.\n"
"	float2 texCoord = texCoord1 + float2(0.0000001, 0.0000001);\n"
"\n"
"	OUT.texCoord = texCoord;\n"
"	OUT.t1 = texCoord.xxxy + half4( -dx, 0, dx,-2.0*dy); // A1 B1 C1\n"
"	OUT.t2 = texCoord.xxxy + half4( -dx, 0, dx,    -dy); //  A  B  C\n"
"	OUT.t3 = texCoord.xxxy + half4( -dx, 0, dx,      0); //  D  E  F\n"
"	OUT.t4 = texCoord.xxxy + half4( -dx, 0, dx,     dy); //  G  H  I\n"
"	OUT.t5 = texCoord.xxxy + half4( -dx, 0, dx, 2.0*dy); // G5 H5 I5\n"
"	OUT.t6 = texCoord.xyyy + half4(-2.0*dx,-dy, 0,  dy); // A0 D0 G0\n"
"	OUT.t7 = texCoord.xyyy + half4( 2.0*dx,-dy, 0,  dy); // C4 F4 I4\n"
"\n"
"	return OUT;\n"
"}\n"
"\n"
"\n"
"/*    FRAGMENT SHADER    */\n"
"float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR\n"
"{\n"
"	bool4 edr, edr_left, edr_up, px; // px = pixel, edr = edge detection rule\n"
"	bool4 interp_restriction_lv1, interp_restriction_lv2_left, interp_restriction_lv2_up;\n"
"	bool4 nc, nc30, nc60, nc45; // new_color\n"
"	float4 fx, fx_left, fx_up, final_fx; // inequations of straight lines.\n"
"	half3 res1, res2, pix1, pix2;\n"
"	float blend1, blend2;\n"
"\n"
"	float2 fp = frac(VAR.texCoord*IN.texture_size);\n"
"\n"
"	half3 A1 = tex2D(decal, VAR.t1.xw).rgb;\n"
"	half3 B1 = tex2D(decal, VAR.t1.yw).rgb;\n"
"	half3 C1 = tex2D(decal, VAR.t1.zw).rgb;\n"
"\n"
"	half3 A  = tex2D(decal, VAR.t2.xw).rgb;\n"
"	half3 B  = tex2D(decal, VAR.t2.yw).rgb;\n"
"	half3 C  = tex2D(decal, VAR.t2.zw).rgb;\n"
"\n"
"	half3 D  = tex2D(decal, VAR.t3.xw).rgb;\n"
"	half3 E  = tex2D(decal, VAR.t3.yw).rgb;\n"
"	half3 F  = tex2D(decal, VAR.t3.zw).rgb;\n"
"\n"
"	half3 G  = tex2D(decal, VAR.t4.xw).rgb;\n"
"	half3 H  = tex2D(decal, VAR.t4.yw).rgb;\n"
"	half3 I  = tex2D(decal, VAR.t4.zw).rgb;\n"
"\n"
"	half3 G5 = tex2D(decal, VAR.t5.xw).rgb;\n"
"	half3 H5 = tex2D(decal, VAR.t5.yw).rgb;\n"
"	half3 I5 = tex2D(decal, VAR.t5.zw).rgb;\n"
"\n"
"	half3 A0 = tex2D(decal, VAR.t6.xy).rgb;\n"
"	half3 D0 = tex2D(decal, VAR.t6.xz).rgb;\n"
"	half3 G0 = tex2D(decal, VAR.t6.xw).rgb;\n"
"\n"
"	half3 C4 = tex2D(decal, VAR.t7.xy).rgb;\n"
"	half3 F4 = tex2D(decal, VAR.t7.xz).rgb;\n"
"	half3 I4 = tex2D(decal, VAR.t7.xw).rgb;\n"
"\n"
"	float4 b = mul( half4x3(B, D, H, F), yuv_weighted[0] );\n"
"	float4 c = mul( half4x3(C, A, G, I), yuv_weighted[0] );\n"
"	float4 e = mul( half4x3(E, E, E, E), yuv_weighted[0] );\n"
"	float4 a = c.yzwx;\n"
"	float4 d = b.yzwx;\n"
"	float4 f = b.wxyz;\n"
"	float4 g = c.zwxy;\n"
"	float4 h = b.zwxy;\n"
"	float4 i = c.wxyz;\n"
"\n"
"	float4 i4 = mul( half4x3(I4, C1, A0, G5), yuv_weighted[0] );\n"
"	float4 i5 = mul( half4x3(I5, C4, A1, G0), yuv_weighted[0] );\n"
"	float4 h5 = mul( half4x3(H5, F4, B1, D0), yuv_weighted[0] );\n"
"	float4 f4 = h5.yzwx;\n"
"\n"
"\n"
"	float4 Ao = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 Bo = float4( 1.0,  1.0, -1.0,-1.0 );\n"
"	float4 Co = float4( 1.5,  0.5, -0.5, 0.5 );\n"
"	float4 Ax = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 Bx = float4( 0.5,  2.0, -0.5,-2.0 );\n"
"	float4 Cx = float4( 1.0,  1.0, -0.5, 0.0 );\n"
"	float4 Ay = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 By = float4( 2.0,  0.5, -2.0,-0.5 );\n"
"	float4 Cy = float4( 2.0,  0.0, -1.0, 0.5 );\n"
"\n"
"	// These inequations define the line below which interpolation occurs.\n"
"	fx      = (Ao*fp.y+Bo*fp.x); \n"
"	fx_left = (Ax*fp.y+Bx*fp.x);\n"
"	fx_up   = (Ay*fp.y+By*fp.x);\n"
"\n"
"	interp_restriction_lv1      = ((e!=f) && (e!=h) && ((eq2(e,b) || eq2(e,d) || !eq2(e,a)) && (eq2(f,f4) || eq2(f,c) || eq2(h,h5) || eq2(h,g)))  && ( !eq(f,b) && !eq(f,c) || !eq(h,d) && !eq(h,g) || eq(e,i) && (!eq(f,f4) && !eq(f,i4) || !eq(h,h5) && !eq(h,i5)) || eq(e,g) || eq(e,c)) );\n"
"	interp_restriction_lv2_left = ((e!=g) && (d!=g));\n"
"	interp_restriction_lv2_up   = ((e!=c) && (b!=c));\n"
"\n"
"	float4 fx45 = smoothstep(Co - delta, Co + delta, fx);\n"
"	float4 fx30 = smoothstep(Cx - delta, Cx + delta, fx_left);\n"
"	float4 fx60 = smoothstep(Cy - delta, Cy + delta, fx_up);\n"
"\n"
"\n"
"	edr      = ((weighted_distance( e, c, g, i, h5, f4, h, f) + 3.5) < weighted_distance( h, d, i5, f, i4, b, e, i)) && interp_restriction_lv1;\n"
"	edr_left = ((coef*df(f,g)) <= df(h,c)) && interp_restriction_lv2_left;\n"
"	edr_up   = (df(f,g) >= (coef*df(h,c))) && interp_restriction_lv2_up;\n"
"\n"
"	nc45 = ( edr &&             bool4(fx45));\n"
"	nc30 = ( edr && edr_left && bool4(fx30));\n"
"	nc60 = ( edr && edr_up   && bool4(fx60));\n"
"\n"
"	px = (df(e,f) <= df(e,h));\n"
"\n"
"	half3 res = E;\n"
"\n"
"\n"
"    float3 n1, n2, n3, n4, s, aa, bb, cc, dd;\n"
"\n"
"\n"
"    n1 = B1; n2 = B; s = E; n3 = H; n4 = H5;\n"
"    aa = n2-n1; bb = s-n2; cc = n3-s; dd = n4-n3;\n"
"\n"
"    float3 t = (7 * (bb + cc) - 3 * (aa + dd)) / 16;\n"
"\n"
"    float3 m = (s < 0.5) ? 2*s : 2*(1.0-s);\n"
"\n"
"        m = min(m, sharpness*abs(bb));\n"
"        m = min(m, sharpness*abs(cc));\n"
"\n"
"    t = clamp(t, -m, m);\n"
"\n"
"   \n"
"    float3 s1 = (2*fp.y-1)*t + s;\n"
"\n"
"    n1 = D0; n2 = D; s = s1; n3 = F; n4 = F4;\n"
"    aa = n2-n1; bb = s-n2; cc = n3-s; dd = n4-n3;\n"
"\n"
"    t = (7 * (bb + cc) - 3 * (aa + dd)) / 16;\n"
"\n"
"    m = (s < 0.5) ? 2*s : 2*(1.0-s);\n"
"\n"
"        m = min(m, sharpness*abs(bb));\n"
"        m = min(m, sharpness*abs(cc));\n"
"\n"
"    t = clamp(t, -m, m);\n"
"\n"
"    float3 s0 = (2*fp.x-1)*t + s;\n"
"\n"
"\n"
"	nc = (nc30 || nc60 || nc45);\n"
"\n"
"	blend1 = blend2 = 0.0;\n"
"\n"
"	float4 final45 = dot(nc45, fx45);\n"
"	float4 final30 = dot(nc30, fx30);\n"
"	float4 final60 = dot(nc60, fx60);\n"
"\n"
"	float4 maximo = max(max(final30, final60), final45);\n"
"\n"
"	     if (nc.x) {pix1 = px.x ? F : H; blend1 = maximo.x;}\n"
"	else if (nc.y) {pix1 = px.y ? B : F; blend1 = maximo.y;}\n"
"	else if (nc.z) {pix1 = px.z ? D : B; blend1 = maximo.z;}\n"
"	else if (nc.w) {pix1 = px.w ? H : D; blend1 = maximo.w;}\n"
"\n"
"	     if (nc.w) {pix2 = px.w ? H : D; blend2 = maximo.w;}\n"
"	else if (nc.z) {pix2 = px.z ? D : B; blend2 = maximo.z;}\n"
"	else if (nc.y) {pix2 = px.y ? B : F; blend2 = maximo.y;}\n"
"	else if (nc.x) {pix2 = px.x ? F : H; blend2 = maximo.x;}\n"
"\n"
"	res1 = lerp(s0, pix1, blend1);\n"
"	res2 = lerp(s0, pix2, blend2);\n"
"\n"
"	res = lerp(res1, res2, step(c_df(E, res1), c_df(E, res2)));\n"
"\n"
"// CRT-caligari - only vertical blend\n"
"\n"
"            float3 color = GAMMA_IN(res);\n"
"\n"
"            float ddy = fp.y - 0.5;\n"
"            float v_weight_00 = ddy / SPOT_HEIGHT;\n"
"            WEIGHT(v_weight_00);\n"
"            color *= float3( v_weight_00, v_weight_00, v_weight_00 );\n"
"\n"
"	    // get closest vertical neighbour to blend\n"
" 	    float3 coords10;\n"
"            if (ddy>0.0) {\n"
"            	coords10 = H;\n"
"                ddy = 1.0 - ddy;\n"
"            } else {\n"
"                coords10 = B;\n"
"                ddy = 1.0 + ddy;\n"
"            }\n"
"	    float3 colorNB = GAMMA_IN(coords10);\n"
"\n"
"            float v_weight_10 = ddy / SPOT_HEIGHT;\n"
"            WEIGHT( v_weight_10 );\n"
"\n"
"            color += colorNB * float3( v_weight_10, v_weight_10, v_weight_10 );\n"
"\n"
"            color *= float3( COLOR_BOOST, COLOR_BOOST, COLOR_BOOST );\n"
"\n"
"	return float4(clamp( GAMMA_OUT(color), 0.0, 1.0 ), 1.0);\n"
"\n"
"\n"
"	return float4(res.x, res.y, res.z, 1.0);\n"
"\n"
"}\n"
"\n"
},
