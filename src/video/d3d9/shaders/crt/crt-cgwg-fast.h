{
"/* COMPATIBILITY \n"
"   - HLSL compilers\n"
"   - Cg   compilers\n"
"*/\n"
"\n"
"/*\n"
"    cgwg's CRT shader\n"
"\n"
"    Copyright (C) 2010-2011 cgwg, Themaister\n"
"\n"
"    This program is free software; you can redistribute it and/or modify it\n"
"    under the terms of the GNU General Public License as published by the Free\n"
"    Software Foundation; either version 2 of the License, or (at your option)\n"
"    any later version.\n"
"\n"
"    (cgwg gave their consent to have their code distributed under the GPL in\n"
"    this message:\n"
"\n"
"        http://board.byuu.org/viewtopic.php?p=26075#p26075\n"
"\n"
"        \"Feel free to distribute my shaders under the GPL. After all, the\n"
"        barrel distortion code was taken from the Curvature shader, which is\n"
"        under the GPL.\"\n"
"    )\n"
"*/\n"
"\n"
"struct tex_coords\n"
"{\n"
"   float2 c01; \n"
"   float2 c11; \n"
"   float2 c21;\n"
"   float2 c31;\n"
"   float2 c02;\n"
"   float2 c12; \n"
"   float2 c22;\n"
"   float2 c32; \n"
"   float mod_factor;\n"
"   float2 ratio_scale;\n"
"};\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float  frame_count;\n"
"   float  frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"\n"
"   float2 tex : TEXCOORD,\n"
"\n"
"   uniform input IN,\n"
"   out tex_coords coords\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"\n"
"   float2 delta = 1.0 / IN.texture_size;\n"
"   float dx = delta.x;\n"
"   float dy = delta.y;\n"
"\n"
"   coords.c01 = tex + float2(-dx, 0.0);\n"
"   coords.c11 = tex + float2(0.0, 0.0);\n"
"   coords.c21 = tex + float2(dx, 0.0);\n"
"   coords.c31 = tex + float2(2.0 * dx, 0.0);\n"
"   coords.c02 = tex + float2(-dx, dy);\n"
"   coords.c12 = tex + float2(0.0, dy);\n"
"   coords.c22 = tex + float2(dx, dy);\n"
"   coords.c32 = tex + float2(2.0 * dx, dy);\n"
"   coords.mod_factor = tex.x * IN.output_size.x * IN.texture_size.x / IN.video_size.x;\n"
"   coords.ratio_scale = tex * IN.texture_size;\n"
"}\n"
"\n"
"#define TEX2D(c) tex2D(s0 ,(c))\n"
"#define PI 3.141592653589\n"
"\n"
"#pragma parameter CRTCGWG_GAMMA \"CRTcgwg Gamma\" 2.7 0.0 10.0 0.01\n"
"\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float CRTCGWG_GAMMA;\n"
"#else\n"
"#define CRTCGWG_GAMMA 2.7\n"
"#endif\n"
"\n"
"float4 main_fragment(in tex_coords co, uniform input IN, uniform sampler2D s0 : TEXUNIT0) : COLOR\n"
"{\n"
"   float2 uv_ratio = frac(co.ratio_scale);\n"
"   float3 col, col2;\n"
"\n"
"   float4x3 texes0 = float4x3(TEX2D(co.c01).xyz, TEX2D(co.c11).xyz, TEX2D(co.c21).xyz, TEX2D(co.c31).xyz);\n"
"   float4x3 texes1 = float4x3(TEX2D(co.c02).xyz, TEX2D(co.c12).xyz, TEX2D(co.c22).xyz, TEX2D(co.c32).xyz);\n"
"\n"
"   float4 coeffs = float4(1.0 + uv_ratio.x, uv_ratio.x, 1.0 - uv_ratio.x, 2.0 - uv_ratio.x) + 0.005;\n"
"   coeffs = sin(PI * coeffs) * sin(0.5 * PI * coeffs) / (coeffs * coeffs);\n"
"   coeffs = coeffs / dot(coeffs, float(1.0));\n"
"\n"
"   float3 weights = float3(3.33 * uv_ratio.y, 3.33 * uv_ratio.y, 3.33 * uv_ratio.y);\n"
"   float3 weights2 = float3(uv_ratio.y * -3.33 + 3.33, uv_ratio.y * -3.33 + 3.33, uv_ratio.y * -3.33 + 3.33);\n"
"\n"
"   col = saturate(mul(coeffs, texes0));\n"
"   col2 = saturate(mul(coeffs, texes1));\n"
"\n"
"   float3 wid = 2.0 * pow(col, float3(4.0, 4.0, 4.0)) + 2.0;\n"
"   float3 wid2 = 2.0 * pow(col2, float3(4.0, 4.0, 4.0)) + 2.0;\n"
"\n"
"   col = pow(col, float3(CRTCGWG_GAMMA, CRTCGWG_GAMMA, CRTCGWG_GAMMA));\n"
"   col2 = pow(col2, float3(CRTCGWG_GAMMA, CRTCGWG_GAMMA, CRTCGWG_GAMMA));\n"
"\n"
"   float3 sqrt1 = rsqrt(0.5 * wid);\n"
"   float3 sqrt2 = rsqrt(0.5 * wid2);\n"
"\n"
"   float3 pow_mul1 = weights * sqrt1;\n"
"   float3 pow_mul2 = weights2 * sqrt2;\n"
"\n"
"   float3 div1 = 0.1320 * wid + 0.392;\n"
"   float3 div2 = 0.1320 * wid2 + 0.392;\n"
"\n"
"   float3 pow1 = -pow(pow_mul1, wid);\n"
"   float3 pow2 = -pow(pow_mul2, wid2);\n"
"\n"
"   weights = exp(pow1) / div1;\n"
"   weights2 = exp(pow2) / div2;\n"
"\n"
"   float3 multi = col * weights + col2 * weights2;\n"
"   float3 mcol = lerp(float3(1.0, 0.7, 1.0), float3(0.7, 1.0, 0.7), floor(fmod(co.mod_factor, 2.0)));\n"
"\n"
"   return float4(pow(mcol * multi, float3(0.454545, 0.454545, 0.454545)), 1.0);\n"
"}\n"
},
