{
"/*\n"
"    CRT Shader by EasyMode\n"
"    License: GPL\n"
"*/\n"
"\n"
"#pragma parameter GAMMA_OUTPUT \"Gamma Output\" 2.2 0.1 5.0 0.01\n"
"#pragma parameter SHARPNESS_H \"Sharpness Horizontal\" 0.6 0.0 1.0 0.05\n"
"#pragma parameter SHARPNESS_V \"Sharpness Vertical\" 1.0 0.0 1.0 0.05\n"
"#pragma parameter MASK_TYPE \"Mask Type\" 4.0 0.0 7.0 1.0\n"
"#pragma parameter MASK_STRENGTH_MIN \"Mask Strength Min.\" 0.2 0.0 0.5 0.01\n"
"#pragma parameter MASK_STRENGTH_MAX \"Mask Strength Max.\" 0.2 0.0 0.5 0.01\n"
"#pragma parameter MASK_SIZE \"Mask Size\" 1.0 1.0 100.0 1.0\n"
"#pragma parameter SCANLINE_STRENGTH_MIN \"Scanline Strength Min.\" 0.2 0.0 1.0 0.05\n"
"#pragma parameter SCANLINE_STRENGTH_MAX \"Scanline Strength Max.\" 0.4 0.0 1.0 0.05\n"
"#pragma parameter SCANLINE_BEAM_MIN \"Scanline Beam Min.\" 1.0 0.25 5.0 0.05\n"
"#pragma parameter SCANLINE_BEAM_MAX \"Scanline Beam Max.\" 1.0 0.25 5.0 0.05\n"
"#pragma parameter GEOM_CURVATURE \"Geom Curvature\" 0.0 0.0 0.1 0.01\n"
"#pragma parameter GEOM_WARP \"Geom Warp\" 0.0 0.0 0.1 0.01\n"
"#pragma parameter GEOM_CORNER_SIZE \"Geom Corner Size\" 0.0 0.0 0.1 0.01\n"
"#pragma parameter GEOM_CORNER_SMOOTH \"Geom Corner Smoothness\" 150.0 50.0 1000.0 25.0\n"
"#pragma parameter INTERLACING_TOGGLE \"Interlacing Toggle\" 1.0 0.0 1.0 1.0\n"
"#pragma parameter HALATION \"Halation\" 0.03 0.0 1.0 0.01\n"
"#pragma parameter DIFFUSION \"Diffusion\" 0.0 0.0 1.0 0.01\n"
"#pragma parameter BRIGHTNESS \"Brightness\" 1.0 0.0 2.0 0.05\n"
"\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float BRIGHTNESS;\n"
"uniform float DIFFUSION;\n"
"uniform float GAMMA_OUTPUT;\n"
"uniform float GEOM_CORNER_SIZE;\n"
"uniform float GEOM_CORNER_SMOOTH;\n"
"uniform float GEOM_CURVATURE;\n"
"uniform float GEOM_WARP;\n"
"uniform float HALATION;\n"
"uniform float INTERLACING_TOGGLE;\n"
"uniform float MASK_SIZE;\n"
"uniform float MASK_STRENGTH_MAX;\n"
"uniform float MASK_STRENGTH_MIN;\n"
"uniform float MASK_TYPE;\n"
"uniform float SCANLINE_BEAM_MAX;\n"
"uniform float SCANLINE_BEAM_MIN;\n"
"uniform float SCANLINE_STRENGTH_MAX;\n"
"uniform float SCANLINE_STRENGTH_MIN;\n"
"uniform float SHARPNESS_H;\n"
"uniform float SHARPNESS_V;\n"
"#else\n"
"#define BRIGHTNESS 1.0\n"
"#define DIFFUSION 0.0\n"
"#define GAMMA_OUTPUT 2.2\n"
"#define GEOM_CORNER_SIZE 0.0\n"
"#define GEOM_CORNER_SMOOTH 150.0\n"
"#define GEOM_CURVATURE 0.0\n"
"#define GEOM_WARP 0.0\n"
"#define HALATION 0.03\n"
"#define INTERLACING_TOGGLE 1.0\n"
"#define MASK_SIZE 1.0\n"
"#define MASK_STRENGTH_MAX 0.2\n"
"#define MASK_STRENGTH_MIN 0.2\n"
"#define MASK_TYPE 4.0\n"
"#define SCANLINE_BEAM_MAX 1.0\n"
"#define SCANLINE_BEAM_MIN 1.0\n"
"#define SCANLINE_STRENGTH_MAX 0.4\n"
"#define SCANLINE_STRENGTH_MIN 0.2\n"
"#define SHARPNESS_H 0.6\n"
"#define SHARPNESS_V 1.0\n"
"#endif\n"
"\n"
"#define FIX(c) max(abs(c), 1e-5)\n"
"#define PI 3.141592653589\n"
"#define TEX2D(c) tex2D(tex, c)\n"
"\n"
"void main_vertex\n"
"(\n"
"    float4 position : POSITION,\n"
"    out float4 oPosition : POSITION,\n"
"    uniform float4x4 modelViewProj,\n"
"    \n"
"    float2 tex : TEXCOORD,\n"
"    out float2 oTex : TEXCOORD\n"
")\n"
"{\n"
"    oPosition = mul(modelViewProj, position);\n"
"    oTex = tex;\n"
"}\n"
"\n"
"struct input\n"
"{\n"
"    float2 video_size;\n"
"    float2 texture_size;\n"
"    float2 output_size;\n"
"    float frame_count;\n"
"    float frame_direction;\n"
"    float frame_rotation;\n"
"};\n"
"\n"
"struct prev\n"
"{\n"
"    sampler2D texture : TEXUNIT1;\n"
"};\n"
"\n"
"float curve_distance(float x, float sharp)\n"
"{\n"
"    float x_step = step(0.5, x);\n"
"    float curve = 0.5 - sqrt(0.25 - (x - x_step) * (x - x_step)) * sign(0.5 - x);\n"
"\n"
"    return lerp(x, curve, sharp);\n"
"}\n"
"\n"
"float4x4 get_color_matrix(sampler2D tex, float2 co, float2 dx)\n"
"{\n"
"    return float4x4(TEX2D(co - dx), TEX2D(co), TEX2D(co + dx), TEX2D(co + 2.0 * dx));\n"
"}\n"
"\n"
"float4 filter_lanczos(float4 coeffs, float4x4 color_matrix)\n"
"{\n"
"    float4 col = mul(coeffs, color_matrix);\n"
"    float4 sample_min = min(color_matrix[1], color_matrix[2]);\n"
"    float4 sample_max = max(color_matrix[1], color_matrix[2]);\n"
"\n"
"    col = clamp(col, sample_min, sample_max);\n"
"\n"
"    return col;\n"
"}\n"
"\n"
"float3 get_scanline_weight(float pos, float beam, float strength)\n"
"{\n"
"    float weight = 1.0 - pow(cos(pos * 2.0 * PI) * 0.5 + 0.5, beam);\n"
"    \n"
"    weight = weight * strength * 2.0 + (1.0 - strength);\n"
"    \n"
"    return float3(weight);\n"
"}\n"
"\n"
"float2 curve_coordinate(float2 co, float curvature)\n"
"{\n"
"    float2 curve = float2(curvature, curvature * 0.75);\n"
"    float2 co2 = co + co * curve - curve / 2.0;\n"
"    float2 co_weight = float2(co.y, co.x) * 2.0 - 1.0;\n"
"\n"
"    co = lerp(co, co2, co_weight * co_weight);\n"
"\n"
"    return co;\n"
"}\n"
"\n"
"float get_corner_weight(float2 co, float2 corner, float smooth)\n"
"{\n"
"    float corner_weight;\n"
"    \n"
"    co = min(co, float2(1.0) - co) * float2(1.0, 0.75);\n"
"    co = (corner - min(co, corner));\n"
"    corner_weight = saturate((corner.x - sqrt(dot(co, co))) * smooth);\n"
"    corner_weight = lerp(1.0, corner_weight, ceil(corner.x));\n"
"    \n"
"    return corner_weight;\n"
"}\n"
"\n"
"float4 main_fragment(uniform sampler2D tex : TEXUNIT0, float2 coords : TEXCOORD0, uniform input IN, uniform prev PASSPREV4) : COLOR\n"
"{\n"
"    float2 tex_size = IN.texture_size;\n"
"    float2 midpoint = float2(0.5, 0.5);\n"
"    float scan_offset = 0.0;\n"
"\n"
"    if (INTERLACING_TOGGLE && IN.video_size.y >= 400)\n"
"    {\n"
"        tex_size.y *= 0.5;\n"
"\n"
"        if (mod(IN.frame_count, 2.0))\n"
"        {\n"
"            midpoint.y = 0.75;\n"
"            scan_offset = 0.5;\n"
"        }        \n"
"        else midpoint.y = 0.25;\n"
"    }\n"
"\n"
"    float2 co = coords * tex_size / IN.video_size;\n"
"    float2 xy = curve_coordinate(co, GEOM_WARP);\n"
"    float corner_weight = get_corner_weight(curve_coordinate(co, GEOM_CURVATURE), float2(GEOM_CORNER_SIZE), GEOM_CORNER_SMOOTH);\n"
"\n"
"    xy *= IN.video_size / tex_size;\n"
"\n"
"    float2 dx = float2(1.0 / tex_size.x, 0.0);\n"
"    float2 dy = float2(0.0, 1.0 / tex_size.y);\n"
"    float2 pix_co = xy * tex_size - midpoint;\n"
"    float2 tex_co = (floor(pix_co) + midpoint) / tex_size;\n"
"    float2 dist = frac(pix_co);\n"
"    float curve_x, curve_y;\n"
"    float3 col, col2, diff;\n"
"\n"
"    curve_x = curve_distance(dist.x, SHARPNESS_H * SHARPNESS_H);\n"
"    curve_y = curve_distance(dist.y, SHARPNESS_V * SHARPNESS_V);\n"
"\n"
"    float4 coeffs_x = PI * float4(1.0 + curve_x, curve_x, 1.0 - curve_x, 2.0 - curve_x);\n"
"    float4 coeffs_y = PI * float4(1.0 + curve_y, curve_y, 1.0 - curve_y, 2.0 - curve_y);\n"
"\n"
"    coeffs_x = FIX(coeffs_x);\n"
"    coeffs_x = 2.0 * sin(coeffs_x) * sin(coeffs_x / 2.0) / (coeffs_x * coeffs_x);\n"
"    coeffs_x /= dot(coeffs_x, float4(1.0));\n"
"\n"
"    coeffs_y = FIX(coeffs_y);\n"
"    coeffs_y = 2.0 * sin(coeffs_y) * sin(coeffs_y / 2.0) / (coeffs_y * coeffs_y);\n"
"    coeffs_y /= dot(coeffs_y, float4(1.0));\n"
"\n"
"    float4x4 color_matrix;\n"
"\n"
"    color_matrix[0] = filter_lanczos(coeffs_x, get_color_matrix(PASSPREV4.texture, tex_co - dy, dx));\n"
"    color_matrix[1] = filter_lanczos(coeffs_x, get_color_matrix(PASSPREV4.texture, tex_co, dx));\n"
"    color_matrix[2] = filter_lanczos(coeffs_x, get_color_matrix(PASSPREV4.texture, tex_co + dy, dx));\n"
"    color_matrix[3] = filter_lanczos(coeffs_x, get_color_matrix(PASSPREV4.texture, tex_co + 2.0 * dy, dx));\n"
"\n"
"    col = filter_lanczos(coeffs_y, color_matrix).rgb;\n"
"    diff = tex2D(tex, xy).rgb;\n"
"\n"
"    float rgb_max = max(col.r, max(col.g, col.b));\n"
"    float sample_offset = (IN.video_size.y / IN.output_size.y) * 0.5;\n"
"    float scan_pos = xy.y * tex_size.y + scan_offset;\n"
"    float scan_strength = lerp(SCANLINE_STRENGTH_MAX, SCANLINE_STRENGTH_MIN, rgb_max);\n"
"    float scan_beam = clamp(rgb_max * SCANLINE_BEAM_MAX, SCANLINE_BEAM_MIN, SCANLINE_BEAM_MAX);\n"
"    float scan_weight = 0.0;\n"
"\n"
"    float mask_colors;\n"
"    float mask_dot_width;\n"
"    float mask_dot_height;\n"
"    float mask_stagger;\n"
"    float mask_dither;\n"
"    float4 mask_config;\n"
"\n"
"    if      (MASK_TYPE == 1) mask_config = float4(2.0, 1.0, 1.0, 0.0);\n"
"    else if (MASK_TYPE == 2) mask_config = float4(3.0, 1.0, 1.0, 0.0);\n"
"    else if (MASK_TYPE == 3) mask_config = float4(2.1, 1.0, 1.0, 0.0);\n"
"    else if (MASK_TYPE == 4) mask_config = float4(3.1, 1.0, 1.0, 0.0);\n"
"    else if (MASK_TYPE == 5) mask_config = float4(2.0, 1.0, 1.0, 1.0);\n"
"    else if (MASK_TYPE == 6) mask_config = float4(3.0, 2.0, 1.0, 3.0);\n"
"    else if (MASK_TYPE == 7) mask_config = float4(3.0, 2.0, 2.0, 3.0);\n"
"\n"
"    mask_colors = floor(mask_config.x);\n"
"    mask_dot_width = mask_config.y;\n"
"    mask_dot_height = mask_config.z;\n"
"    mask_stagger = mask_config.w;\n"
"    mask_dither = frac(mask_config.x) * 10.0;\n"
"\n"
"    float2 mod_fac = floor(coords * IN.output_size * IN.texture_size / (IN.video_size * float2(MASK_SIZE, mask_dot_height * MASK_SIZE)));\n"
"    int dot_no = int(mod((mod_fac.x + mod(mod_fac.y, 2.0) * mask_stagger) / mask_dot_width, mask_colors));\n"
"    int dither = mod(mod_fac.y + mod(floor(mod_fac.x / mask_colors), 2.0), 2.0);\n"
"\n"
"    float mask_strength = lerp(MASK_STRENGTH_MAX, MASK_STRENGTH_MIN, rgb_max);\n"
"    float mask_dark, mask_bright, mask_mul;\n"
"    float3 mask_weight;\n"
"\n"
"    mask_dark = 1.0 - mask_strength;\n"
"    mask_bright = 1.0 + mask_strength * 2.0;\n"
"\n"
"    if (dot_no == 0) mask_weight = lerp(float3(mask_bright, mask_bright, mask_bright), float3(mask_bright, mask_dark, mask_dark), mask_colors - 2.0);\n"
"    else if (dot_no == 1) mask_weight = lerp(float3(mask_dark, mask_dark, mask_dark), float3(mask_dark, mask_bright, mask_dark), mask_colors - 2.0);\n"
"    else mask_weight = float3(mask_dark, mask_dark, mask_bright);\n"
"\n"
"    if (dither) mask_mul = mask_dark;\n"
"    else mask_mul = mask_bright;\n"
"\n"
"    mask_weight *= lerp(1.0, mask_mul, mask_dither);\n"
"    mask_weight = lerp(float3(1.0), mask_weight, saturate(MASK_TYPE));\n"
"\n"
"    col2 = (col * mask_weight);\n"
"    col2 *= BRIGHTNESS;\n"
"\n"
"    scan_weight = get_scanline_weight(scan_pos - sample_offset, scan_beam, scan_strength);\n"
"    col = saturate(col2 * scan_weight);\n"
"    scan_weight = get_scanline_weight(scan_pos, scan_beam, scan_strength);\n"
"    col += saturate(col2 * scan_weight);\n"
"    scan_weight = get_scanline_weight(scan_pos + sample_offset, scan_beam, scan_strength);\n"
"    col += saturate(col2 * scan_weight);\n"
"    col /= 3.0;\n"
"\n"
"    col *= float3(corner_weight);\n"
"    col += diff * mask_weight * HALATION * float3(corner_weight);\n"
"    col += diff * DIFFUSION * float3(corner_weight);\n"
"    col = pow(col, float3(1.0 / GAMMA_OUTPUT));\n"
"\n"
"    return float4(col, 1.0);\n"
"}\n"
},
