{
"/* COMPATIBILITY\n"
"   - HLSL compilers\n"
"   - Cg compilers\n"
"*/\n"
"\n"
"/*\n"
"   Reverse Antialiasing Shader\n"
"  \n"
"   Adapted from the C source (see Copyright below) to shader\n"
"   cg language by Hyllian/Jararaca - sergiogdb@gmail.com\n"
"\n"
"   This shader works best in 2x scale. \n"
"\n"
"*/\n"
"\n"
"\n"
"\n"
"/*\n"
" *\n"
" *  Copyright (c) 2012, Christoph Feck <christoph@maxiom.de>\n"
" *  All Rights reserved.\n"
" *\n"
" *  Redistribution and use in source and binary forms, with or without\n"
" *  modification, are permitted provided that the following conditions are met:\n"
" *\n"
" *    * Redistributions of source code must retain the above copyright notice,\n"
" *      this list of conditions and the following disclaimer.\n"
" *\n"
" *    * Redistributions in binary form must reproduce the above copyright\n"
" *      notice, this list of conditions and the following disclaimer in the\n"
" *      documentation and/or other materials provided with the distribution.\n"
" *\n"
" *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n"
" *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n"
" *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n"
" *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n"
" *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n"
" *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n"
" *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n"
" *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n"
" *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n"
" *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n"
" *  POSSIBILITY OF SUCH DAMAGE.\n"
" *\n"
" */\n"
"\n"
"\n"
"        // Constants used with gamma correction.\n"
"        #define InputGamma 2.4\n"
"        #define OutputGamma 2.2\n"
"\n"
"        #define GAMMA_IN(color) pow(color, float3(InputGamma, InputGamma, InputGamma))\n"
"        #define GAMMA_OUT(color) pow(color, float3(1.0 / OutputGamma, 1.0 / OutputGamma, 1.0 / OutputGamma))\n"
"\n"
"        // 0.5 = the spot stays inside the original pixel\n"
"        // 1.0 = the spot bleeds up to the center of next pixel\n"
"	#define SPOT_HEIGHT 0.6\n"
"\n"
"        // Used to counteract the desaturation effect of weighting.\n"
"        #define COLOR_BOOST 1.4\n"
"\n"
"        // Macro for weights computing\n"
"        #define WEIGHT(w) \\\n"
"       		if(w>1.0) w=1.0; \\\n"
"       		w = 1.0 - w * w; \\\n"
"       		w = w * w;\\\n"
"\n"
"\n"
"struct input\n"
"{\n"
"    half2 video_size;\n"
"    float2 texture_size;\n"
"    half2 output_size;\n"
"        float frame_count;\n"
"        float frame_direction;\n"
"        float frame_rotation;\n"
"};\n"
"\n"
"\n"
"struct out_vertex {\n"
"    float4 position : POSITION;\n"
"    float4 color    : COLOR;\n"
"    float2 texCoord : TEXCOORD0;\n"
"    float4 t1       : TEXCOORD1;\n"
"    float4 t2       : TEXCOORD2;\n"
"    float4 t3       : TEXCOORD3;\n"
"    float4 t4       : TEXCOORD4;\n"
"    float4 t5       : TEXCOORD5;\n"
"    float4 t6       : TEXCOORD6;\n"
"    float4 t7       : TEXCOORD7;\n"
"};\n"
"\n"
"/*    VERTEX_SHADER    */\n"
"out_vertex main_vertex\n"
"(\n"
"	float4 position	: POSITION,\n"
"	float4 color	: COLOR,\n"
"	float2 texCoord1 : TEXCOORD0,\n"
"\n"
"       uniform half4x4 modelViewProj,\n"
"    uniform input IN\n"
")\n"
"{\n"
"    out_vertex OUT;\n"
"\n"
"    OUT.position = mul(modelViewProj, position);\n"
"    OUT.color = color;\n"
"\n"
"    half2 ps = half2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);\n"
"    half dx = ps.x;\n"
"    half dy = ps.y;\n"
"\n"
"    //    A1 B1 C1\n"
"    // A0  A  B  C C4\n"
"    // D0  D  E  F F4\n"
"    // G0  G  H  I I4\n"
"    //    G5 H5 I5\n"
"\n"
"	// This line fix a bug in ATI cards.\n"
"	float2 texCoord = texCoord1 + float2(0.0000001, 0.0000001);\n"
"\n"
"    OUT.texCoord = texCoord;\n"
"    OUT.t1 = texCoord.xxxy + half4( -dx, 0, dx,-2.0*dy); // A1 B1 C1\n"
"    OUT.t2 = texCoord.xxxy + half4( -dx, 0, dx,    -dy); //  A  B  C\n"
"    OUT.t3 = texCoord.xxxy + half4( -dx, 0, dx,      0); //  D  E  F\n"
"    OUT.t4 = texCoord.xxxy + half4( -dx, 0, dx,     dy); //  G  H  I\n"
"    OUT.t5 = texCoord.xxxy + half4( -dx, 0, dx, 2.0*dy); // G5 H5 I5\n"
"    OUT.t6 = texCoord.xyyy + half4(-2.0*dx,-dy, 0,  dy); // A0 D0 G0\n"
"    OUT.t7 = texCoord.xyyy + half4( 2.0*dx,-dy, 0,  dy); // C4 F4 I4\n"
"\n"
"    return OUT;\n"
"}\n"
"\n"
"\n"
"/*    FRAGMENT SHADER    */\n"
"float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR\n"
"{\n"
"    float2 fp = frac(VAR.texCoord*IN.texture_size);\n"
"\n"
"    half3 B1 = tex2D(decal, VAR.t1.yw).rgb;\n"
"    half3 B  = tex2D(decal, VAR.t2.yw).rgb;\n"
"    half3 D  = tex2D(decal, VAR.t3.xw).rgb;\n"
"    half3 E  = tex2D(decal, VAR.t3.yw).rgb;\n"
"    half3 F  = tex2D(decal, VAR.t3.zw).rgb;\n"
"    half3 H  = tex2D(decal, VAR.t4.yw).rgb;\n"
"    half3 H5 = tex2D(decal, VAR.t5.yw).rgb;\n"
"    half3 D0 = tex2D(decal, VAR.t6.xz).rgb;\n"
"    half3 F4 = tex2D(decal, VAR.t7.xz).rgb;\n"
"\n"
"    float3 n1, n2, n3, n4, s, aa, bb, cc, dd, t, m;\n"
"/*\n"
"    n1 = B1; n2 = B; s = E; n3 = H; n4 = H5;\n"
"    aa = n2-n1; bb = s-n2; cc = n3-s; dd = n4-n3;\n"
"\n"
"    float3 t = (7 * (bb + cc) - 3 * (aa + dd)) / 16;\n"
"\n"
"    float3 m = (s < 0.5) ? 2*s : 2*(1.0-s);\n"
"\n"
"        m = min(m, 2*abs(bb));\n"
"        m = min(m, 2*abs(cc));\n"
"\n"
"    t = clamp(t, -m, m);\n"
"   \n"
"    float3 s1 = (2*fp.y-1)*t + s;\n"
"*/\n"
"    n1 = D0; n2 = D; s = E; n3 = F; n4 = F4;\n"
"    aa = n2-n1; bb = s-n2; cc = n3-s; dd = n4-n3;\n"
"\n"
"    t = (7 * (bb + cc) - 3 * (aa + dd)) / 16;\n"
"\n"
"    m = (s < 0.5) ? 2*s : 2*(1.0-s);\n"
"\n"
"        m = min(m, 2*abs(bb)+0.01);\n"
"        m = min(m, 2*abs(cc)+0.01);\n"
"\n"
"    t = clamp(t, -m, m);\n"
"\n"
"    float3 res = (2*fp.x-1)*t + s;\n"
"\n"
"\n"
"// CRT-caligari - only vertical blend\n"
"\n"
"            float3 color = GAMMA_IN(res);\n"
"\n"
"            float ddy = fp.y - 0.5;\n"
"            float v_weight_00 = ddy / SPOT_HEIGHT;\n"
"            WEIGHT(v_weight_00);\n"
"            color *= float3( v_weight_00, v_weight_00, v_weight_00 );\n"
"\n"
"	    // get closest vertical neighbour to blend\n"
" 	    float3 coords10;\n"
"            if (ddy>0.0) {\n"
"            	coords10 = H;\n"
"                ddy = 1.0 - ddy;\n"
"            } else {\n"
"                coords10 = B;\n"
"                ddy = 1.0 + ddy;\n"
"            }\n"
"	    float3 colorNB = GAMMA_IN(coords10);\n"
"\n"
"            float v_weight_10 = ddy / SPOT_HEIGHT;\n"
"            WEIGHT( v_weight_10 );\n"
"\n"
"            color += colorNB * float3( v_weight_10, v_weight_10, v_weight_10 );\n"
"\n"
"            color *= float3( COLOR_BOOST, COLOR_BOOST, COLOR_BOOST );\n"
"\n"
"	return float4(clamp( GAMMA_OUT(color), 0.0, 1.0 ), 1.0);\n"
"}\n"
"\n"
},
