{
"struct data\n"
"{\n"
"   float2 pix_no;\n"
"   float one;\n"
"};\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"   float2 tex : TEXCOORD,\n"
"   uniform input IN,\n"
"   out data oData\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oData.pix_no = tex * IN.texture_size - float2(0.0, 0.5);\n"
"   oData.one = 1.0 / IN.texture_size.y;\n"
"}\n"
"\n"
"#define CRT_GEOM_BEAM 1\n"
"\n"
"float3 beam(float3 color, float dist)\n"
"{\n"
"#if CRT_GEOM_BEAM\n"
"   float3 wid = 2.0 + 2.0 * pow(color, 4.0);\n"
"   float3 weights = float3(abs(dist) / 0.3);\n"
"   return 2.0 * color * exp(-pow(weights * rsqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);\n"
"#else\n"
"   const float width = 0.25;\n"
"   float3 x = dist / width;\n"
"   return 2.0 * color * exp(-0.5 * x * x) / width;\n"
"#endif\n"
"}\n"
"\n"
"#pragma parameter BOOST \"Color Boost\" 1.0 0.5 1.5 0.02\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float BOOST;\n"
"#else\n"
"#define BOOST 1.0\n"
"#endif\n"
"\n"
"float4 main_fragment (uniform input IN, in data vertex, uniform sampler2D s0 : TEXUNIT0) : COLOR\n"
"{\n"
"#define TEX(off_y) tex2D(s0, tex + float2(0.0, off_y * vertex.one)).rgb\n"
"\n"
"   float2 texel = floor(vertex.pix_no);\n"
"   float phase = vertex.pix_no.y - texel.y;\n"
"   float2 tex = float2(texel + 0.5) / IN.texture_size;\n"
"\n"
"   float3 top = TEX(0);\n"
"   float3 bottom = TEX(1);\n"
"\n"
"   float dist0 = phase;\n"
"   float dist1 = 1.0 - phase;\n"
"\n"
"   float3 scanline = float3(0.0);\n"
"\n"
"   scanline += beam(top, dist0);\n"
"   scanline += beam(bottom, dist1);\n"
"\n"
"   return float4(BOOST * scanline / 1.15, 1.0);\n"
"}\n"
"\n"
},
