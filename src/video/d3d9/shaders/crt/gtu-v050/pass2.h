{
"////////////////////////////////////////////////////////\n"
"//	GTU version 0.50	\n"
"//	Author: aliaspider - aliaspider@gmail.com\n"
"//	License: GPLv3      \n"
"////////////////////////////////////////////////////////\n"
"\n"
"\n"
#include "config.h"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oTex = tex;\n"
"}\n"
"\n"
"#define YIQ_to_RGB 	transpose(mat3x3( 1.0   , 1.0      , 1.0      ,	0.9563   , -0.2721   , -1.1070   ,		0.6210   , -0.6474   , 1.7046   ))\n"
"#define pi			3.14159265358\n"
"#define a(x) abs(x)\n"
"#define d(x,b) (pi*b*min(a(x)+0.5,1.0/b))\n"
"#define e(x,b) (pi*b*min(max(a(x)-0.5,-1.0/b),1.0/b))\n"
"#define STU(x,b) ((d(x,b)+sin(d(x,b))-e(x,b)-sin(e(x,b)))/(2.0*pi))\n"
"#define X(i) (offset-(i))\n"
"#define GETC (tex2D(s0, float2(tex.x - X/IN.texture_size.x,tex.y)).rgb)\n"
"#ifdef compositeConnection\n"
"#define VAL float3((c.x*STU(X,(signalResolution/IN.video_size.x))),(c.y*STU(X,(signalResolutionI/IN.video_size.x))),(c.z*STU(X,(signalResolutionQ/IN.video_size.x))))\n"
"#else\n"
"#define VAL (c*STU(X,(signalResolution/IN.video_size.x)))\n"
"#endif //COMPOSITE_CONNECTION\n"
"#define PROCESS(i) X=X(i);c=GETC;tempColor+=VAL;\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float  frame_count;\n"
"   float  frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"float4 main_fragment (float2 tex : TEXCOORD, uniform sampler2D s0 : TEXUNIT0, uniform input IN) : COLOR\n"
"{\n"
"// return tex2D(s0, tex);\n"
"	float	offset	= fract((tex.x * IN.texture_size.x) - 0.5);\n"
"	float3	tempColor = float3(0.0);	\n"
"	float 	X;\n"
"	float3 	c;	\n"
"#ifdef compositeConnection	\n"
"	float range=ceil(0.5+IN.video_size.x/min(min(signalResolution,signalResolutionI),signalResolutionQ));\n"
"#else\n"
"	float range=ceil(0.5+IN.video_size.x/signalResolution);\n"
"#endif\n"
"\n"
"	float i;\n"
"	for (i=-range;i<range+2.0;i++){\n"
"		PROCESS(i)\n"
"	}\n"
"	\n"
"#ifdef compositeConnection\n"
"	tempColor=clamp(mul(YIQ_to_RGB,tempColor),0.0,1.0);\n"
"#else\n"
"	tempColor=clamp(tempColor,0.0,1.0);\n"
"#endif\n"
"	// tempColor=clamp(tempColor,0.0,1.0);\n"
"	return float4(tempColor,1.0);\n"
"}\n"
},
