{
"////////////////////////////////////////////////////////\n"
"//	GTU version 0.50	\n"
"//	Author: aliaspider - aliaspider@gmail.com\n"
"//	License: GPLv3      \n"
"////////////////////////////////////////////////////////\n"
"\n"
#include "config.h"
"\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oTex = tex;\n"
"}\n"
"\n"
"struct input\n"
"{\n"
"   float2 video_size;\n"
"   float2 texture_size;\n"
"   float2 output_size;\n"
"   float  frame_count;\n"
"   float  frame_direction;\n"
"   float frame_rotation;\n"
"};\n"
"\n"
"\n"
"\n"
"#define pi			3.14159265358\n"
"#define normalGauss(x) ((exp(-(x)*(x)*0.5))/sqrt(2.0*pi))\n"
"float normalGaussIntegral(float x)\n"
"{\n"
"	float a1 = 0.4361836;\n"
"	float a2 = -0.1201676;\n"
"	float a3 = 0.9372980;\n"
"	float p = 0.3326700;\n"
"	float t = 1.0 / (1.0 + p*abs(x));\n"
"	return (0.5-normalGauss(x) * (t*(a1 + t*(a2 + a3*t))))*sign(x);\n"
"}\n"
"\n"
"\n"
"float3 scanlines( float x , float3 c,input IN){\n"
"	float temp=sqrt(2*pi)*(tvVerticalResolution/IN.video_size.y);\n"
"	\n"
"	float rrr=0.5*(IN.video_size.y/IN.output_size.y);\n"
"	float x1=(x+rrr)*temp;\n"
"	float x2=(x-rrr)*temp;\n"
"	c.r=(c.r*(normalGaussIntegral(x1)-normalGaussIntegral(x2)));	\n"
"	c.g=(c.g*(normalGaussIntegral(x1)-normalGaussIntegral(x2)));	\n"
"	c.b=(c.b*(normalGaussIntegral(x1)-normalGaussIntegral(x2)));\n"
"	c*=(IN.output_size.y/IN.video_size.y);\n"
"	return c;\n"
"}\n"
"\n"
"#define Y(j) (offset.y-(j))\n"
"#define a(x) abs(x)\n"
"#define d(x,b) (pi*b*min(a(x)+0.5,1.0/b))\n"
"#define e(x,b) (pi*b*min(max(a(x)-0.5,-1.0/b),1.0/b))\n"
"#define STU(x,b) ((d(x,b)+sin(d(x,b))-e(x,b)-sin(e(x,b)))/(2.0*pi))\n"
"\n"
"#define SOURCE(j) float2(tex.x,tex.y - Y(j)/IN.texture_size.y)\n"
"#define C(j) (tex2D(s0, SOURCE(j)).xyz)\n"
"\n"
"#ifdef noScanlines\n"
"#define VAL(j) (C(j)*STU(Y(j),(tvVerticalResolution/IN.video_size.y)))\n"
"#else\n"
"#define VAL(j) (scanlines(Y(j),C(j),IN))\n"
"#endif\n"
"\n"
"\n"
"float4 main_fragment (float2 tex : TEXCOORD, uniform sampler2D s0 : TEXUNIT0, uniform input IN) : COLOR\n"
"{\n"
"	float2	offset	= fract((tex.xy * IN.texture_size.xy) - 0.5);\n"
"	float3	tempColor = float3(0.0);	\n"
"\n"
"	float range=ceil(0.5+IN.video_size.y/tvVerticalResolution);\n"
"\n"
"	float i;\n"
"	for (i=-range;i<range+2.0;i++){\n"
"		tempColor+=VAL(i);\n"
"	}\n"
"\n"
"	tempColor-=float3(blackLevel);\n"
"	tempColor*=(contrast/float3(1.0-blackLevel));\n"
"	return float4(tempColor, 1.0);\n"
"   	\n"
"}\n"
"\n"
"\n"
},
