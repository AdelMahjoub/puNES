{
"/* COMPATIBILITY \n"
"   - HLSL compilers\n"
"   - Cg   compilers\n"
"*/\n"
"\n"
"#define round(x) floor( (x) + 0.5 )\n"
"#define gamma 2.2\n"
"#define TEX2D(c) pow(tex2D(IN.texture, (c)), float4(gamma))\n"
"\n"
"#pragma parameter GRID_STRENGTH \"LCD Grid Strength\" 0.05 0.00 1.00 0.01\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float GRID_STRENGTH;\n"
"#else\n"
"#define GRID_STRENGTH 0.05\n"
"#endif\n"
"\n"
"// VERTEX SHADER //\n"
"\n"
"void main_vertex\n"
"(\n"
"	float4 position	: POSITION,\n"
"	float2 texCoord : TEXCOORD0,\n"
"\n"
"    uniform float4x4 modelViewProj,\n"
"\n"
"	out float4 oPosition : POSITION,\n"
"	out float2 otexCoord : TEXCOORD\n"
")\n"
"{\n"
"	oPosition = mul(modelViewProj, position);\n"
"	otexCoord = texCoord;\n"
"}\n"
"\n"
"struct input\n"
"{\n"
"  float2 video_size;\n"
"  float2 texCoord_size;\n"
"  float2 output_size;\n"
"  float frame_count;\n"
"  float frame_direction;\n"
"  float frame_rotation;\n"
"  float2 texture_size;\n"
"  sampler2D texture : TEXUNIT0;\n"
"};\n"
"\n"
"struct output \n"
"{\n"
"  float4 col    : COLOR;\n"
"};\n"
"\n"
"float intsmear_func(float z)\n"
"{\n"
"  float z2 = z*z;\n"
"  float z4 = z2*z2;\n"
"  float z8 = z4*z4;\n"
"  return z - 2.0/3.0*z*z2 - 1.0/5.0*z*z4 + 4.0/7.0*z*z2*z4 - 1.0/9.0*z*z8\n"
"    - 2.0/11.0*z*z2*z8 + 1.0/13.0*z*z4*z8;\n"
"}\n"
"float intsmear(float x, float dx)\n"
"{\n"
"  const float d = 1.5;\n"
"  float zl = clamp((x-dx)/d,-1.0,1.0);\n"
"  float zh = clamp((x+dx)/d,-1.0,1.0);\n"
"  return d * ( intsmear_func(zh) - intsmear_func(zl) )/(2.0*dx);\n"
"}\n"
"\n"
"// FRAGMENT SHADER //\n"
"\n"
"output main_fragment(in float2 texCoord : TEXCOORD0,\n"
"uniform input IN,\n"
"uniform sampler2D texture : TEXUNIT0\n"
")\n"
"{\n"
"  float2 texelSize = 1.0 / IN.texture_size;\n"
"  float2 subtexelSize = texelSize / float2(3.0,1.0);\n"
"  float2 range;\n"
"  range = IN.video_size / (IN.output_size * IN.texture_size);\n"
" // range.y = IN.video_size / (IN.output_size * IN.texture_size);\n"
"\n"
"  float left   = texCoord.x - texelSize.x*0.5;\n"
"  float top    = texCoord.y + range.y;\n"
"  float right  = texCoord.x + texelSize.x*0.5;\n"
"  float bottom = texCoord.y - range.y;\n"
"\n"
"  float4 lcol, rcol;\n"
"  float subpix = mod(texCoord.x/subtexelSize.x+1.5,3.0);\n"
"  float rsubpix = range.x/subtexelSize.x;\n"
"  lcol = float4(intsmear(subpix+1.0,rsubpix),intsmear(subpix    ,rsubpix),\n"
"	      intsmear(subpix-1.0,rsubpix),0.0);\n"
"  rcol = float4(intsmear(subpix-2.0,rsubpix),intsmear(subpix-3.0,rsubpix),\n"
"	      intsmear(subpix-4.0,rsubpix),0.0);\n"
"\n"
"  float4 topLeftColor     = TEX2D((floor(float2(left, top)     / texelSize) + 0.5) * texelSize) * lcol;\n"
"  float4 bottomRightColor = TEX2D((floor(float2(right, bottom) / texelSize) + 0.5) * texelSize) * rcol;\n"
"  float4 bottomLeftColor  = TEX2D((floor(float2(left, bottom)  / texelSize) + 0.5) * texelSize) * lcol;\n"
"  float4 topRightColor    = TEX2D((floor(float2(right, top)    / texelSize) + 0.5) * texelSize) * rcol;\n"
"\n"
"  float2 border = round(texCoord.st/subtexelSize);\n"
"  float2 bordert = clamp((border+float2(0.0,+GRID_STRENGTH)) * subtexelSize,\n"
"		       float2(left, bottom), float2(right, top));\n"
"  float2 borderb = clamp((border+float2(0.0,-GRID_STRENGTH)) * subtexelSize,\n"
"		       float2(left, bottom), float2(right, top));\n"
"  float totalArea = 2.0 * range.y;\n"
"\n"
"  float4 averageColor;\n"
"  averageColor  = ((top - bordert.y)    / totalArea) * topLeftColor;\n"
"  averageColor += ((borderb.y - bottom) / totalArea) * bottomRightColor;\n"
"  averageColor += ((borderb.y - bottom) / totalArea) * bottomLeftColor;\n"
"  averageColor += ((top - bordert.y)    / totalArea) * topRightColor;\n"
"\n"
"  output OUT;\n"
"   OUT.col = pow(averageColor,float4(1.0/gamma));\n"
"   return OUT;   \n"
"}\n"
},
