"/* COMPATIBILITY \n"
"   - HLSL compilers\n"
"   - Cg   compilers\n"
"*/\n"
"\n"
"\n"
"/*\n"
"* Copyright (C) 2003 Maxim Stepin ( maxst@hiend3d.com )\n"
"*\n"
"* Copyright (C) 2010 Cameron Zemek ( grom@zeminvaders.net )\n"
"*\n"
"* Copyright (C) 2014 Jules Blok ( jules@aerix.nl )\n"
"*\n"
"* This program is free software; you can redistribute it and/or\n"
"* modify it under the terms of the GNU Lesser General Public\n"
"* License as published by the Free Software Foundation; either\n"
"* version 2.1 of the License, or (at your option) any later version.\n"
"*\n"
"* This program is distributed in the hope that it will be useful,\n"
"* but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n"
"* Lesser General Public License for more details.\n"
"*\n"
"* You should have received a copy of the GNU Lesser General Public\n"
"* License along with this program; if not, write to the Free Software\n"
"* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n"
"*/\n"
"\n"
"struct orig\n"
"{\n"
"	float2 tex_coord;\n"
"	uniform float2 texture_size;\n"
"	uniform sampler2D texture;\n"
"};\n"
"\n"
"struct input\n"
"{\n"
"	half2 video_size;\n"
"	float2 texture_size;\n"
"	half2 output_size;\n"
"};\n"
"\n"
"struct out_vertex {\n"
"	float4 position : POSITION;\n"
"	float4 color    : COLOR;\n"
"	float2 texCoord : TEXCOORD0;\n"
"};\n"
"\n"
"/*    VERTEX_SHADER    */\n"
"out_vertex main_vertex\n"
"(\n"
"	float4 position	: POSITION,\n"
"	float4 color	: COLOR,\n"
"	float2 texCoord : TEXCOORD0,\n"
"\n"
"   	uniform half4x4 modelViewProj,\n"
"	uniform input IN\n"
")\n"
"{\n"
"	out_vertex OUT;\n"
"\n"
"	OUT.position = mul(modelViewProj, position);\n"
"	OUT.color = color;\n"
"\n"
"	float2 ps = 1.0/IN.texture_size;\n"
"	float dx = ps.x;\n"
"	float dy = ps.y;\n"
"\n"
"	//   +----+----+----+\n"
"	//   |    |    |    |\n"
"	//   | w1 | w2 | w3 |\n"
"	//   +----+----+----+\n"
"	//   |    |    |    |\n"
"	//   | w4 | w5 | w6 |\n"
"	//   +----+----+----+\n"
"	//   |    |    |    |\n"
"	//   | w7 | w8 | w9 |\n"
"	//   +----+----+----+\n"
"\n"
"	OUT.texCoord = texCoord;\n"
"\n"
"	return OUT;\n"
"}\n"
"\n"
"\n"
"/*    FRAGMENT SHADER    */\n"
"float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, orig ORIG, uniform input IN, uniform sampler2D LUT : TEXUNIT1) : COLOR\n"
"{\n"
"	float2 fp = frac(VAR.texCoord*IN.texture_size);\n"
"	half2 quad = sign(-0.5 + fp);\n"
"\n"
"	float2 ps = 1.0/ORIG.texture_size;\n"
"	float dx = ps.x;\n"
"	float dy = ps.y;\n"
"\n"
"	float3 p1  = tex2D(ORIG.texture, VAR.texCoord).rgb;\n"
"	float3 p2  = tex2D(ORIG.texture, VAR.texCoord + float2(dx, dy) * quad).rgb;\n"
"	float3 p3  = tex2D(ORIG.texture, VAR.texCoord + float2(dx, 0) * quad).rgb;\n"
"	float3 p4  = tex2D(ORIG.texture, VAR.texCoord + float2(0, dy) * quad).rgb;\n"
"	float4x3 pixels = half4x3(p1, p2, p3, p4);\n"
"\n"
"	half2 index = tex2D(decal, VAR.texCoord).xy * half2(255.0, 15.0 * (SCALE * SCALE));\n"
"	index.y += dot(floor(fp * SCALE), half2(1, SCALE));\n"
"\n"
"	half2 step = 1.0 / half2(256.0, 16.0 * (SCALE * SCALE));\n"
"	half2 offset = step / 2.0;\n"
"	half4 weights = tex2D(LUT, index * step + offset);\n"
"	half sum = dot(weights, half4(1));\n"
"	float3 res = mul(transpose(pixels), weights / sum);\n"
"\n"
"	return float4(res, 1.0);\n"
"}\n"
