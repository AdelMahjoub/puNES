{
"/*\n"
"   Color Mangler\n"
"   Author: hunterk\n"
"   License: Public domain\n"
"*/\n"
"#pragma parameter display_gamma \"Display Gamma\" 2.2 0.0 10.0 0.1\n"
"#pragma parameter target_gamma \"Target Gamma\" 2.2 0.0 10.0 0.1\n"
"#pragma parameter sat \"Saturation\" 1.0 0.0 3.0 0.01\n"
"#pragma parameter lum \"Luminance\" 1.0 0.0 5.0 0.01\n"
"#pragma parameter cntrst \"Contrast\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter r \"Red\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter g \"Green\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter b \"Blue\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter rg \"Red-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter rb \"Red-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter gr \"Green-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter gb \"Green-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter br \"Blue-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter bg \"Blue-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blr \"Black-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blg \"Black-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blb \"Black-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float display_gamma;\n"
"uniform float target_gamma;\n"
"uniform float sat;\n"
"uniform float lum;\n"
"uniform float cntrst;\n"
"uniform float blr;\n"
"uniform float blg;\n"
"uniform float blb;\n"
"uniform float r;\n"
"uniform float g;\n"
"uniform float b;\n"
"uniform float rg;\n"
"uniform float rb;\n"
"uniform float gr;\n"
"uniform float gb;\n"
"uniform float br;\n"
"uniform float bg;\n"
"#else\n"
"#define display_gamma 2.2\n"
"#define target_gamma 2.2\n"
"#define sat 1.0\n"
"#define lum 1.0\n"
"#define cntrst 1.0\n"
"#define blr 0.0\n"
"#define blg 0.0\n"
"#define blb 0.0\n"
"#define r 1.0\n"
"#define g 1.0\n"
"#define b 1.0\n"
"#define rg 0.0\n"
"#define rb 0.0\n"
"#define gr 0.0\n"
"#define gb 0.0\n"
"#define br 0.0\n"
"#define bg 0.0\n"
"#endif\n"
"\n"
"struct input\n"
"{\n"
"  float2 video_size;\n"
"  float2 texture_size;\n"
"  float2 output_size;\n"
"  float  frame_count;\n"
"  float  frame_direction;\n"
"  float frame_rotation;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"   uniform input IN,\n"
"\n"
"   float2 tex : TEXCOORD,\n"
"   out float2 oTex : TEXCOORD\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oTex = tex;\n"
"}\n"
"\n"
"float4 main_fragment(float2 tex : TEXCOORD, uniform sampler2D s0 : TEXUNIT0) : COLOR\n"
"{\n"
"float4 screen = pow(tex2D(s0, tex), target_gamma).rgba; //sample image in linear colorspace\n"
"float4 avglum = float4(0.5);\n"
"screen = lerp(screen, avglum, (1.0 - cntrst));\n"
"\n"
"//				r   g    b   black\n"
"mat4x4 color = {r,  gr,  br, blr,  //red channel\n"
"			   rg,   g,  bg, blg,  //green channel\n"
"			   rb,  gb,   b, blb,  //blue channel\n"
"			  0.0, 0.0, 0.0,    1.0}; //alpha channel; these numbers do nothing for our purposes.\n"
"			  \n"
"mat4x4 adjust = {(1.0 - sat) * 0.3086 + sat, (1.0 - sat) * 0.6094,          (1.0 - sat) * 0.0820,          0.0,\n"
"			    (1.0 - sat) * 0.3086,          (1.0 - sat) * 0.6094 + sat, (1.0 - sat) * 0.0820,          0.0,\n"
"			    (1.0 - sat) * 0.3086,          (1.0 - sat) * 0.6094,          (1.0 - sat) * 0.0820 + sat, 0.0,\n"
"			     1.0, 1.0, 1.0, 1.0};\n"
"\n"
"color = mul(color, adjust);\n"
"screen = saturate(screen * lum);\n"
"screen = mul(color, screen);\n"
"return pow(screen, 1.0 / display_gamma);\n"
"}\n"},
