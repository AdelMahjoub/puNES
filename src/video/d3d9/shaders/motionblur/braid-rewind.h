{
"/*\n"
"    Braid Rewind\n"
"    Authors: hunterk, cgwg\n"
" \n"
"    This program is free software; you can redistribute it and/or modify it\n"
"    under the terms of the GNU General Public License as published by the Free\n"
"    Software Foundation; either version 2 of the License, or (at your option)\n"
"    any later version.\n"
"*/\n"
"\n"
"struct previous\n"
"{\n"
"   uniform sampler2D texture;\n"
"   float2 tex_coord;\n"
"};\n"
"\n"
"struct input\n"
"{\n"
"    float2 video_size;\n"
"    float2 texture_size;\n"
"    float2 output_size;\n"
"    float frame_count;\n"
"    float frame_direction;\n"
"    float frame_rotation;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"\n"
"   float4 color : COLOR,\n"
"   out float4 oColor : COLOR,\n"
"\n"
"   float2 texCoord : TEXCOORD,\n"
"   out float2 oTexCoord : TEXCOORD,\n"
"\n"
"   uniform input IN\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   oColor = color;\n"
"   oTexCoord = texCoord;\n"
"}\n"
"\n"
"struct output \n"
"{\n"
"  float4 col    : COLOR;\n"
"};\n"
"\n"
"output main_fragment(in sampler2D s0 : TEXUNIT0, in float2 texCoord : TEXCOORD0,\n"
"uniform input IN,\n"
"      previous PREV,\n"
"      previous PREV1,\n"
"      previous PREV2,\n"
"      previous PREV3,\n"
"      previous PREV4,\n"
"      previous PREV5,\n"
"      previous PREV6\n"
")\n"
"{\n"
"   float4 current = tex2D(s0, texCoord);\n"
"\n"
"   float4 color = tex2D(PREV6.texture, texCoord);\n"
"   color = color + tex2D(PREV5.texture, texCoord);\n"
"   color = color + tex2D(PREV4.texture, texCoord);\n"
"   color = color + tex2D(PREV3.texture, texCoord);\n"
"   color = color + tex2D(PREV2.texture, texCoord);\n"
"   color = color + tex2D(PREV1.texture, texCoord);\n"
"   color = color + tex2D(PREV.texture, texCoord);\n"
"   color = color + current;\n"
"\n"
"   float4 sepia = float4(1.0,0.8,0.6,1.0); \n"
"\n"
"   if (IN.frame_direction < 0.0)\n"
"   {\n"
"      current = ((current + (color / 7.0)) / 2.0) * sepia;\n"
"   }\n"
"   else\n"
"   {\n"
"      current = current;\n"
"   }\n"
"\n"
"   output OUT;\n"
"   OUT.col = current;\n"
"   return OUT;\n"
"}\n"
},
