{
"/*\n"
"    Motion Blur\n"
"    Authors: hunterk, cgwg\n"
" \n"
"    This program is free software; you can redistribute it and/or modify it\n"
"    under the terms of the GNU General Public License as published by the Free\n"
"    Software Foundation; either version 2 of the License, or (at your option)\n"
"    any later version.\n"
"*/\n"
"\n"
"struct previous\n"
"{\n"
"   uniform sampler2D texture;\n"
"   float2 tex_coord;\n"
"};\n"
"\n"
"struct input\n"
"{\n"
"    float2 video_size;\n"
"    float2 texture_size;\n"
"    float2 output_size;\n"
"    float frame_count;\n"
"    float frame_direction;\n"
"    float frame_rotation;\n"
"    sampler2D texture : TEXUNIT0;\n"
"};\n"
"\n"
"struct tex_coords\n"
"{\n"
"   float2 tex;\n"
"   float2 prev;\n"
"   float2 prev1;\n"
"   float2 prev2;\n"
"   float2 prev3;\n"
"   float2 prev4;\n"
"   float2 prev5;\n"
"   float2 prev6;\n"
"};\n"
"\n"
"void main_vertex\n"
"(\n"
"   float4 position : POSITION,\n"
"   out float4 oPosition : POSITION,\n"
"   uniform float4x4 modelViewProj,\n"
"   float2 tex : TEXCOORD,\n"
"\n"
"   previous PREV,\n"
"   previous PREV1,\n"
"   previous PREV2,\n"
"   previous PREV3,\n"
"   previous PREV4,\n"
"   previous PREV5,\n"
"   previous PREV6,\n"
"   out tex_coords coords\n"
")\n"
"{\n"
"   oPosition = mul(modelViewProj, position);\n"
"   coords = tex_coords(tex, PREV.tex_coord,\n"
"      PREV1.tex_coord,\n"
"      PREV2.tex_coord,\n"
"      PREV3.tex_coord,\n"
"      PREV4.tex_coord,\n"
"      PREV5.tex_coord,\n"
"      PREV6.tex_coord);\n"
"}\n"
"\n"
"struct output \n"
"{\n"
"  float4 col    : COLOR;\n"
"};\n"
"\n"
"output main_fragment(tex_coords coords,\n"
"uniform input IN,\n"
"      previous PREV,\n"
"      previous PREV1,\n"
"      previous PREV2,\n"
"      previous PREV3,\n"
"      previous PREV4,\n"
"      previous PREV5,\n"
"      previous PREV6\n"
")\n"
"{\n"
"   float4 color = tex2D(PREV6.texture, coords.prev6);\n"
"   color = (color + tex2D(PREV5.texture, coords.prev5)) / 2.0;\n"
"   color = (color + tex2D(PREV4.texture, coords.prev4)) / 2.0;\n"
"   color = (color + tex2D(PREV3.texture, coords.prev3)) / 2.0;\n"
"   color = (color + tex2D(PREV2.texture, coords.prev2)) / 2.0;\n"
"   color = (color + tex2D(PREV1.texture, coords.prev1)) / 2.0;\n"
"   color = (color + tex2D(PREV.texture, coords.prev)) / 2.0;\n"
"   color = (color + tex2D(IN.texture, coords.tex)) / 2.0;\n"
"\n"
"\n"
"   output OUT;\n"
"   OUT.col = color;\n"
"   return OUT;\n"
"}\n"
},
