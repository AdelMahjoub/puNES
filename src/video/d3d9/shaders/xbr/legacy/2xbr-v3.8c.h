{
"/* COMPATIBILITY \n"
"   - HLSL compilers\n"
"   - Cg   compilers\n"
"*/\n"
"\n"
"\n"
"/*\n"
"   Hyllian's 2xBR v3.8c (squared) Shader\n"
"   \n"
"   Copyright (C) 2011/2012 Hyllian/Jararaca - sergiogdb@gmail.com\n"
"\n"
"   This program is free software; you can redistribute it and/or\n"
"   modify it under the terms of the GNU General Public License\n"
"   as published by the Free Software Foundation; either version 2\n"
"   of the License, or (at your option) any later version.\n"
"\n"
"   This program is distributed in the hope that it will be useful,\n"
"   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"   GNU General Public License for more details.\n"
"\n"
"   You should have received a copy of the GNU General Public License\n"
"   along with this program; if not, write to the Free Software\n"
"   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n"
"\n"
"\n"
"   Incorporates some of the ideas from SABR shader. Thanks to Joshua Street.\n"
"*/\n"
"\n"
"const static float coef           = 2.0;\n"
"const static float4 eq_threshold  = float4(15.0, 15.0, 15.0, 15.0);\n"
"const static float y_weight        = 48.0;\n"
"const static float u_weight        = 7.0;\n"
"const static float v_weight        = 6.0;\n"
"const static float3x3 yuv          = float3x3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);\n"
"const static float3x3 yuv_weighted = float3x3(y_weight*yuv[0], u_weight*yuv[1], v_weight*yuv[2]);\n"
"const static float scale          = 2.0;\n"
"const static float4 delta         = float4(1.0/scale, 1.0/scale, 1.0/scale, 1.0/scale);\n"
"const static float4 deltaL        = float4(0.5/scale, 1.0/scale, 0.5/scale, 1.0/scale);\n"
"const static float4 deltaU        = deltaL.yxwz;\n"
"\n"
"float4 df(float4 A, float4 B)\n"
"{\n"
"	return float4(abs(A-B));\n"
"}\n"
"\n"
"float c_df(float3 c1, float3 c2) {\n"
"                        float3 df = abs(c1 - c2);\n"
"                        return df.r + df.g + df.b;\n"
"                }\n"
"\n"
"\n"
"\n"
"\n"
"bool4 eq(float4 A, float4 B)\n"
"{\n"
"	return (df(A, B) < eq_threshold);\n"
"}\n"
"\n"
"float4 weighted_distance(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h)\n"
"{\n"
"	return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));\n"
"}\n"
"\n"
"\n"
"\n"
"struct input\n"
"{\n"
"	float2 video_size;\n"
"	float2 texture_size;\n"
"	float2 output_size;\n"
"};\n"
"\n"
"\n"
"struct out_vertex {\n"
"	float4 position : POSITION;\n"
"	float4 color    : COLOR;\n"
"	float2 texCoord : TEXCOORD0;\n"
"	float4 t1       : TEXCOORD1;\n"
"	float4 t2       : TEXCOORD2;\n"
"	float4 t3       : TEXCOORD3;\n"
"	float4 t4       : TEXCOORD4;\n"
"	float4 t5       : TEXCOORD5;\n"
"	float4 t6       : TEXCOORD6;\n"
"	float4 t7       : TEXCOORD7;\n"
"};\n"
"\n"
"/*    VERTEX_SHADER    */\n"
"out_vertex main_vertex\n"
"(\n"
"	float4 position	: POSITION,\n"
"	float4 color	: COLOR,\n"
"	float2 texCoord1 : TEXCOORD0,\n"
"\n"
"   	uniform float4x4 modelViewProj,\n"
"	uniform input IN\n"
")\n"
"{\n"
"	out_vertex OUT;\n"
"\n"
"	OUT.position = mul(modelViewProj, position);\n"
"	OUT.color = color;\n"
"\n"
"	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);\n"
"	float dx = ps.x;\n"
"	float dy = ps.y;\n"
"\n"
"	//    A1 B1 C1\n"
"	// A0  A  B  C C4\n"
"	// D0  D  E  F F4\n"
"	// G0  G  H  I I4\n"
"	//    G5 H5 I5\n"
"\n"
"	// This line fix a bug in ATI cards.\n"
"	float2 texCoord = texCoord1 + float2(0.0000001, 0.0000001);\n"
"\n"
"	OUT.texCoord = texCoord;\n"
"	OUT.t1 = texCoord.xxxy + float4( -dx, 0, dx,-2.0*dy); // A1 B1 C1\n"
"	OUT.t2 = texCoord.xxxy + float4( -dx, 0, dx,    -dy); //  A  B  C\n"
"	OUT.t3 = texCoord.xxxy + float4( -dx, 0, dx,      0); //  D  E  F\n"
"	OUT.t4 = texCoord.xxxy + float4( -dx, 0, dx,     dy); //  G  H  I\n"
"	OUT.t5 = texCoord.xxxy + float4( -dx, 0, dx, 2.0*dy); // G5 H5 I5\n"
"	OUT.t6 = texCoord.xyyy + float4(-2.0*dx,-dy, 0,  dy); // A0 D0 G0\n"
"	OUT.t7 = texCoord.xyyy + float4( 2.0*dx,-dy, 0,  dy); // C4 F4 I4\n"
"\n"
"	return OUT;\n"
"}\n"
"\n"
"\n"
"/*    FRAGMENT SHADER    */\n"
"float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR\n"
"{\n"
"	bool4 edr, edr_left, edr_up, px; // px = pixel, edr = edge detection rule\n"
"	bool4 interp_restriction_lv1, interp_restriction_lv2_left, interp_restriction_lv2_up;\n"
"	float4 fx, fx_left, fx_up, final_fx; // inequations of straight lines.\n"
"	float3 res1, res2, pix1, pix2;\n"
"\n"
"	float2 fp = frac(VAR.texCoord*IN.texture_size);\n"
"\n"
"	float3 A1 = tex2D(decal, VAR.t1.xw).rgb;\n"
"	float3 B1 = tex2D(decal, VAR.t1.yw).rgb;\n"
"	float3 C1 = tex2D(decal, VAR.t1.zw).rgb;\n"
"\n"
"	float3 A  = tex2D(decal, VAR.t2.xw).rgb;\n"
"	float3 B  = tex2D(decal, VAR.t2.yw).rgb;\n"
"	float3 C  = tex2D(decal, VAR.t2.zw).rgb;\n"
"\n"
"	float3 D  = tex2D(decal, VAR.t3.xw).rgb;\n"
"	float3 E  = tex2D(decal, VAR.t3.yw).rgb;\n"
"	float3 F  = tex2D(decal, VAR.t3.zw).rgb;\n"
"\n"
"	float3 G  = tex2D(decal, VAR.t4.xw).rgb;\n"
"	float3 H  = tex2D(decal, VAR.t4.yw).rgb;\n"
"	float3 I  = tex2D(decal, VAR.t4.zw).rgb;\n"
"\n"
"	float3 G5 = tex2D(decal, VAR.t5.xw).rgb;\n"
"	float3 H5 = tex2D(decal, VAR.t5.yw).rgb;\n"
"	float3 I5 = tex2D(decal, VAR.t5.zw).rgb;\n"
"\n"
"	float3 A0 = tex2D(decal, VAR.t6.xy).rgb;\n"
"	float3 D0 = tex2D(decal, VAR.t6.xz).rgb;\n"
"	float3 G0 = tex2D(decal, VAR.t6.xw).rgb;\n"
"\n"
"	float3 C4 = tex2D(decal, VAR.t7.xy).rgb;\n"
"	float3 F4 = tex2D(decal, VAR.t7.xz).rgb;\n"
"	float3 I4 = tex2D(decal, VAR.t7.xw).rgb;\n"
"\n"
"	float4 b = mul( float4x3(B, D, H, F), yuv_weighted[0] );\n"
"	float4 c = mul( float4x3(C, A, G, I), yuv_weighted[0] );\n"
"	float4 e = mul( float4x3(E, E, E, E), yuv_weighted[0] );\n"
"	float4 d = b.yzwx;\n"
"	float4 f = b.wxyz;\n"
"	float4 g = c.zwxy;\n"
"	float4 h = b.zwxy;\n"
"	float4 i = c.wxyz;\n"
"\n"
"	float4 i4 = mul( float4x3(I4, C1, A0, G5), yuv_weighted[0] );\n"
"	float4 i5 = mul( float4x3(I5, C4, A1, G0), yuv_weighted[0] );\n"
"	float4 h5 = mul( float4x3(H5, F4, B1, D0), yuv_weighted[0] );\n"
"	float4 f4 = h5.yzwx;\n"
"\n"
"	float4 Ao = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 Bo = float4( 1.0,  1.0, -1.0,-1.0 );\n"
"	float4 Co = float4( 1.5,  0.5, -0.5, 0.5 );\n"
"	float4 Ax = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 Bx = float4( 0.5,  2.0, -0.5,-2.0 );\n"
"	float4 Cx = float4( 1.0,  1.0, -0.5, 0.0 );\n"
"	float4 Ay = float4( 1.0, -1.0, -1.0, 1.0 );\n"
"	float4 By = float4( 2.0,  0.5, -2.0,-0.5 );\n"
"	float4 Cy = float4( 2.0,  0.0, -1.0, 0.5 );\n"
"\n"
"	// These inequations define the line below which interpolation occurs.\n"
"	fx      = (Ao*fp.y+Bo*fp.x); \n"
"	fx_left = (Ax*fp.y+Bx*fp.x);\n"
"	fx_up   = (Ay*fp.y+By*fp.x);\n"
"\n"
"	interp_restriction_lv1      = ((e!=f) && (e!=h)  && ( !eq(f,b) && !eq(f,c) || !eq(h,d) && !eq(h,g) || eq(e,i) && (!eq(f,f4) && !eq(f,i4) || !eq(h,h5) && !eq(h,i5)) || eq(e,g) || eq(e,c)) );\n"
"	interp_restriction_lv2_left = ((e!=g) && (d!=g));\n"
"	interp_restriction_lv2_up   = ((e!=c) && (b!=c));\n"
"\n"
"	float4 fx45 = saturate((fx      + delta  -Co)/(2*delta ));\n"
"	float4 fx30 = saturate((fx_left + deltaL -Cx)/(2*deltaL));\n"
"	float4 fx60 = saturate((fx_up   + deltaU -Cy)/(2*deltaU));\n"
"\n"
"//	float4 fx45 = max(0, min(1, (fx      + delta -Co)/(2*delta)));\n"
"//	float4 fx30 = max(0, min(1, (fx_left + delta -Cx)/(2*delta)));\n"
"//	float4 fx60 = max(0, min(1, (fx_up   + delta -Cy)/(2*delta)));\n"
"\n"
"//	float4 fx45 = smoothstep(Co - delta, Co + delta, fx);\n"
"//	float4 fx30 = smoothstep(Cx - delta, Cx + delta, fx_left);\n"
"//	float4 fx60 = smoothstep(Cy - delta, Cy + delta, fx_up);\n"
"\n"
"\n"
"	edr      = (weighted_distance( e, c, g, i, h5, f4, h, f) < weighted_distance( h, d, i5, f, i4, b, e, i)) && interp_restriction_lv1;\n"
"	edr_left = ((coef*df(f,g)) <= df(h,c)) && interp_restriction_lv2_left && edr;\n"
"	edr_up   = (df(f,g) >= (coef*df(h,c))) && interp_restriction_lv2_up && edr;\n"
"\n"
"\n"
"	fx45 = edr*fx45;\n"
"	fx30 = edr_left*fx30;\n"
"	fx60 = edr_up*fx60;\n"
"\n"
"	px = (df(e,f) <= df(e,h));\n"
"\n"
"	float4 maximo = max(max(fx30, fx60), fx45);\n"
"\n"
"        float4x3 pix = float4x3(lerp(E, lerp(H, F, px.x), maximo.x), lerp(E, lerp(F, B, px.y), maximo.y), lerp(E, lerp(B, D, px.z), maximo.z), lerp(E, lerp(D, H, px.w), maximo.w));\n"
"	float4 pixel = mul( pix, yuv_weighted[0] );\n"
"	\n"
"\n"
"	float4 diff = df(pixel,e);\n"
"\n"
"	float3 res = pix[0];\n"
"	float mx = diff.x;\n"
"\n"
"        if (diff.y > mx) {res = pix[1]; mx = diff.y;}\n"
"        if (diff.z > mx) {res = pix[2]; mx = diff.z;}\n"
"        if (diff.w > mx) {res = pix[3];}\n"
"\n"
"	return float4(res, 1.0);\n"
"}\n"
"\n"
"\n"
},
