{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _t41;\n"
"COMPAT_VARYING     vec4 _t31;\n"
"COMPAT_VARYING     vec4 _t21;\n"
"COMPAT_VARYING     vec4 _t11;\n"
"COMPAT_VARYING     vec2 _CT;\n"
"COMPAT_VARYING     vec4 _position2;\n"
"COMPAT_VARYING     vec4 _color2;\n"
"COMPAT_VARYING     vec4 _t4;\n"
"COMPAT_VARYING     vec4 _t3;\n"
"COMPAT_VARYING     vec4 _t2;\n"
"COMPAT_VARYING     vec4 _t1;\n"
"COMPAT_VARYING     vec2 _texCoord2;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _position1;\n"
"    vec4 _color1;\n"
"    vec2 _texCoord2;\n"
"    vec4 _t1;\n"
"    vec4 _t2;\n"
"    vec4 _t3;\n"
"    vec4 _t4;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color2;\n"
"};\n"
"struct VERTEX_INPUT {\n"
"    vec4 _position2;\n"
"    vec2 _CT;\n"
"    vec4 _t11;\n"
"    vec4 _t21;\n"
"    vec4 _t31;\n"
"    vec4 _t41;\n"
"};\n"
"VERTEX_OUTPUT _ret_0;\n"
"float _TMP2;\n"
"float _TMP1;\n"
"input_dummy _IN1;\n"
"vec4 _r0009;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
"COMPAT_VARYING vec4 TEX4;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    VERTEX_OUTPUT _OUT;\n"
"    vec2 _ps;\n"
"    float _dx;\n"
"    float _dy;\n"
"    vec2 _texCoord;\n"
"    _r0009 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0009 = _r0009 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0009 = _r0009 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0009 = _r0009 + VertexCoord.w*MVPMatrix[3];\n"
"    if (TextureSize.x == 0.00000000E+00) { \n"
"        _TMP1 = TextureSize.x;\n"
"    } else {\n"
"        _TMP1 = TextureSize.x;\n"
"    } \n"
"    if (TextureSize.y == 0.00000000E+00) { \n"
"        _TMP2 = TextureSize.y;\n"
"    } else {\n"
"        _TMP2 = TextureSize.y;\n"
"    } \n"
"    _ps = vec2(1.00000000E+00/_TMP1, 1.00000000E+00/_TMP2);\n"
"    _dx = _ps.x*5.00000000E-01;\n"
"    _dy = _ps.y*5.00000000E-01;\n"
"    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);\n"
"    _OUT._t1.xy = _texCoord + vec2(-_dx, 0.00000000E+00);\n"
"    _OUT._t2.xy = _texCoord + vec2(_dx, 0.00000000E+00);\n"
"    _OUT._t3.xy = _texCoord + vec2(0.00000000E+00, -_dy);\n"
"    _OUT._t4.xy = _texCoord + vec2(0.00000000E+00, _dy);\n"
"    _OUT._t1.zw = _texCoord + vec2(-_dx, -_dy);\n"
"    _OUT._t2.zw = _texCoord + vec2(-_dx, _dy);\n"
"    _OUT._t3.zw = _texCoord + vec2(_dx, -_dy);\n"
"    _OUT._t4.zw = _texCoord + vec2(_dx, _dy);\n"
"    _ret_0._position1 = _r0009;\n"
"    _ret_0._color1 = COLOR;\n"
"    _ret_0._texCoord2 = _texCoord;\n"
"    _ret_0._t1 = _OUT._t1;\n"
"    _ret_0._t2 = _OUT._t2;\n"
"    _ret_0._t3 = _OUT._t3;\n"
"    _ret_0._t4 = _OUT._t4;\n"
"    gl_Position = _r0009;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _texCoord;\n"
"    TEX1 = _OUT._t1;\n"
"    TEX2 = _OUT._t2;\n"
"    TEX3 = _OUT._t3;\n"
"    TEX4 = _OUT._t4;\n"
"    return;\n"
"    COL0 = _ret_0._color1;\n"
"    TEX0.xy = _ret_0._texCoord2;\n"
"    TEX1 = _ret_0._t1;\n"
"    TEX2 = _ret_0._t2;\n"
"    TEX3 = _ret_0._t3;\n"
"    TEX4 = _ret_0._t4;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _t4;\n"
"COMPAT_VARYING     vec4 _t3;\n"
"COMPAT_VARYING     vec4 _t21;\n"
"COMPAT_VARYING     vec4 _t11;\n"
"COMPAT_VARYING     vec2 _CT;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec4 _t41;\n"
"COMPAT_VARYING     vec4 _t31;\n"
"COMPAT_VARYING     vec4 _t22;\n"
"COMPAT_VARYING     vec4 _t12;\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _color;\n"
"    vec2 _texCoord;\n"
"    vec4 _t12;\n"
"    vec4 _t22;\n"
"    vec4 _t31;\n"
"    vec4 _t41;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color1;\n"
"};\n"
"struct VERTEX_INPUT {\n"
"    vec2 _CT;\n"
"    vec4 _t11;\n"
"    vec4 _t21;\n"
"    vec4 _t3;\n"
"    vec4 _t4;\n"
"};\n"
"float _TMP20;\n"
"vec3 _TMP19;\n"
"float _TMP18;\n"
"vec3 _TMP17;\n"
"float _TMP16;\n"
"vec3 _TMP15;\n"
"float _TMP14;\n"
"vec3 _TMP13;\n"
"float _TMP12;\n"
"vec3 _TMP11;\n"
"float _TMP10;\n"
"vec3 _TMP9;\n"
"vec4 _TMP8;\n"
"vec4 _TMP7;\n"
"vec4 _TMP6;\n"
"vec4 _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"vec4 _TMP0;\n"
"uniform sampler2D Texture;\n"
"vec3 _a0045;\n"
"vec3 _a0049;\n"
"vec3 _a0053;\n"
"vec3 _a0057;\n"
"vec3 _a0061;\n"
"vec3 _a0065;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
"COMPAT_VARYING vec4 TEX4;\n"
"uniform vec3 _dt;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    output_dummy _OUT;\n"
"    float _d1;\n"
"    float _d2;\n"
"    float _hl;\n"
"    float _vl;\n"
"    float _k1;\n"
"    float _k2;\n"
"    vec3 _t1;\n"
"    vec3 _t2;\n"
"    vec3 _TMP25;\n"
"    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.zw);\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, TEX3.xy);\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, TEX3.zw);\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, TEX1.xy);\n"
"    _TMP4 = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.xy);\n"
"    _TMP6 = COMPAT_TEXTURE(Texture, TEX2.zw);\n"
"    _TMP7 = COMPAT_TEXTURE(Texture, TEX4.xy);\n"
"    _TMP8 = COMPAT_TEXTURE(Texture, TEX4.zw);\n"
"    _a0045 = _TMP0.xyz - _TMP8.xyz;\n"
"    _TMP9 = abs(_a0045);\n"
"    _TMP10 = dot(_TMP9, _dt);\n"
"    _d1 = _TMP10 + 9.99999975E-05;\n"
"    _a0049 = _TMP2.xyz - _TMP6.xyz;\n"
"    _TMP11 = abs(_a0049);\n"
"    _TMP12 = dot(_TMP11, _dt);\n"
"    _d2 = _TMP12 + 9.99999975E-05;\n"
"    _a0053 = _TMP3.xyz - _TMP5.xyz;\n"
"    _TMP13 = abs(_a0053);\n"
"    _TMP14 = dot(_TMP13, _dt);\n"
"    _hl = _TMP14 + 9.99999975E-05;\n"
"    _a0057 = _TMP1.xyz - _TMP7.xyz;\n"
"    _TMP15 = abs(_a0057);\n"
"    _TMP16 = dot(_TMP15, _dt);\n"
"    _vl = _TMP16 + 9.99999975E-05;\n"
"    _k1 = 5.00000000E-01*(_hl + _vl);\n"
"    _k2 = 5.00000000E-01*(_d1 + _d2);\n"
"    _t1 = (_hl*(_TMP1.xyz + _TMP7.xyz) + _vl*(_TMP3.xyz + _TMP5.xyz) + _k1*_TMP4.xyz)/(2.50000000E+00*(_hl + _vl));\n"
"    _t2 = (_d1*(_TMP2.xyz + _TMP6.xyz) + _d2*(_TMP0.xyz + _TMP8.xyz) + _k2*_TMP4.xyz)/(2.50000000E+00*(_d1 + _d2));\n"
"    _a0061 = _t1 - _TMP4.xyz;\n"
"    _TMP17 = abs(_a0061);\n"
"    _TMP18 = dot(_TMP17, _dt);\n"
"    _k1 = _TMP18 + 9.99999975E-05;\n"
"    _a0065 = _t2 - _TMP4.xyz;\n"
"    _TMP19 = abs(_a0065);\n"
"    _TMP20 = dot(_TMP19, _dt);\n"
"    _k2 = _TMP20 + 9.99999975E-05;\n"
"    _TMP25 = (_k1*_t2 + _k2*_t1)/(_k1 + _k2);\n"
"    _OUT._color1 = vec4(_TMP25.x, _TMP25.y, _TMP25.z, 1.00000000E+00);\n"
"    FragColor = _OUT._color1;\n"
"    return;\n"
"} \n"
"#endif\n"
},
