{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     vec2 _texCoord1;\n"
"COMPAT_VARYING     vec4 _vpos1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _position1;\n"
"    vec4 _vpos1;\n"
"    vec2 _texCoord1;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"VERTEX_OUTPUT _ret_0;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _ret_0._position1 = _r0006;\n"
"    _ret_0._vpos1 = _r0006;\n"
"    _ret_0._texCoord1 = TexCoord.xy;\n"
"    gl_Position = _r0006;\n"
"    TEX1 = _r0006;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    return;\n"
"    TEX1 = _ret_0._vpos1;\n"
"    TEX0.xy = _ret_0._texCoord1;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _vpos;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _vpos;\n"
"    vec2 _texCoord;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"vec4 _TMP19;\n"
"vec4 _TMP18;\n"
"vec4 _TMP17;\n"
"vec4 _TMP16;\n"
"vec2 _TMP15;\n"
"vec2 _TMP14;\n"
"float _TMP13;\n"
"float _TMP12;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"float _TMP9;\n"
"float _TMP8;\n"
"float _TMP7;\n"
"float _TMP6;\n"
"float _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"vec4 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec2 _c0026;\n"
"vec2 _c0028;\n"
"vec2 _c0030;\n"
"vec2 _c0032;\n"
"float _a0062;\n"
"vec2 _b0070;\n"
"vec2 _c0074;\n"
"vec2 _c0076;\n"
"vec2 _c0078;\n"
"vec2 _c0080;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    output_dummy _OUT;\n"
"    vec2 _inverse_resolution;\n"
"    float _lumaNW;\n"
"    float _lumaNE;\n"
"    float _lumaSW;\n"
"    float _lumaSE;\n"
"    float _lumaM;\n"
"    float _lumaMin;\n"
"    float _lumaMax;\n"
"    vec2 _dir;\n"
"    float _dirReduce;\n"
"    float _rcpDirMin;\n"
"    vec3 _rgbA;\n"
"    vec3 _rgbB;\n"
"    float _lumaB;\n"
"    _inverse_resolution = 1.00000000E+00/InputSize.xy;\n"
"    _c0026 = (TEX0.xy + vec2( -1.00000000E+00, -1.00000000E+00))*_inverse_resolution;\n"
"    _TMP0 = COMPAT_TEXTURE(Texture, _c0026);\n"
"    _c0028 = (TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00))*_inverse_resolution;\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, _c0028);\n"
"    _c0030 = (TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00))*_inverse_resolution;\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, _c0030);\n"
"    _c0032 = (TEX0.xy + vec2( 1.00000000E+00, 1.00000000E+00))*_inverse_resolution;\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, _c0032);\n"
"    _TMP4 = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _lumaNW = dot(_TMP0.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaNE = dot(_TMP1.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaSW = dot(_TMP2.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaSE = dot(_TMP3.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaM = dot(_TMP4.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _TMP5 = min(_lumaNW, _lumaNE);\n"
"    _TMP6 = min(_lumaSW, _lumaSE);\n"
"    _TMP7 = min(_TMP5, _TMP6);\n"
"    _lumaMin = min(_lumaM, _TMP7);\n"
"    _TMP8 = max(_lumaNW, _lumaNE);\n"
"    _TMP9 = max(_lumaSW, _lumaSE);\n"
"    _TMP10 = max(_TMP8, _TMP9);\n"
"    _lumaMax = max(_lumaM, _TMP10);\n"
"    _dir.x = -((_lumaNW + _lumaNE) - (_lumaSW + _lumaSE));\n"
"    _dir.y = (_lumaNW + _lumaSW) - (_lumaNE + _lumaSE);\n"
"    _a0062 = (_lumaNW + _lumaNE + _lumaSW + _lumaSE)*3.12500000E-02;\n"
"    _dirReduce = max(_a0062, 3.90625000E-03);\n"
"    _TMP11 = abs(_dir.x);\n"
"    _TMP12 = abs(_dir.y);\n"
"    _TMP13 = min(_TMP11, _TMP12);\n"
"    _rcpDirMin = 1.00000000E+00/(_TMP13 + _dirReduce);\n"
"    _b0070 = _dir*_rcpDirMin;\n"
"    _TMP14 = max(vec2( -8.00000000E+00, -8.00000000E+00), _b0070);\n"
"    _TMP15 = min(vec2( 8.00000000E+00, 8.00000000E+00), _TMP14);\n"
"    _dir = _TMP15*_inverse_resolution;\n"
"    _c0074 = TEX0.xy + _dir*-1.66666657E-01;\n"
"    _TMP16 = COMPAT_TEXTURE(Texture, _c0074);\n"
"    _c0076 = TEX0.xy + _dir*1.66666687E-01;\n"
"    _TMP17 = COMPAT_TEXTURE(Texture, _c0076);\n"
"    _rgbA = 5.00000000E-01*(_TMP16.xyz + _TMP17.xyz);\n"
"    _c0078 = TEX0.xy*_inverse_resolution + _dir*-5.00000000E-01;\n"
"    _TMP18 = COMPAT_TEXTURE(Texture, _c0078);\n"
"    _c0080 = TEX0.xy + _dir*5.00000000E-01;\n"
"    _TMP19 = COMPAT_TEXTURE(Texture, _c0080);\n"
"    _rgbB = _rgbA*5.00000000E-01 + 2.50000000E-01*(_TMP18.xyz + _TMP19.xyz);\n"
"    _lumaB = dot(_rgbB, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    if (_lumaB < _lumaMin || _lumaB > _lumaMax) { \n"
"        _OUT._color = vec4(_rgbA.x, _rgbA.y, _rgbA.z, 1.00000000E+00);\n"
"    } else {\n"
"        _OUT._color = vec4(_rgbB.x, _rgbB.y, _rgbB.z, 1.00000000E+00);\n"
"    } \n"
"    FragColor = _OUT._color;\n"
"    return;\n"
"} \n"
"#endif\n"
},
