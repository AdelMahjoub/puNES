{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _M;\n"
"COMPAT_VARYING     vec2 _DR;\n"
"COMPAT_VARYING     vec2 _DL;\n"
"COMPAT_VARYING     vec2 _UR;\n"
"COMPAT_VARYING     vec2 _UL;\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     vec2 _texCoord1;\n"
"COMPAT_VARYING     vec4 _vpos1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _position1;\n"
"    vec4 _vpos1;\n"
"    vec2 _texCoord1;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"struct deltas {\n"
"    vec2 _UL;\n"
"    vec2 _UR;\n"
"    vec2 _DL;\n"
"    vec2 _DR;\n"
"    vec2 _M;\n"
"};\n"
"VERTEX_OUTPUT _ret_0;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _ret_0._position1 = _r0006;\n"
"    _ret_0._vpos1 = _r0006;\n"
"    _ret_0._texCoord1 = TexCoord.xy;\n"
"    gl_Position = _r0006;\n"
"    TEX1 = _r0006;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    return;\n"
"    TEX1 = _ret_0._vpos1;\n"
"    TEX0.xy = _ret_0._texCoord1;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _M;\n"
"COMPAT_VARYING     vec2 _DR;\n"
"COMPAT_VARYING     vec2 _DL;\n"
"COMPAT_VARYING     vec2 _UR;\n"
"COMPAT_VARYING     vec2 _UL;\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _vpos;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct VERTEX_OUTPUT {\n"
"    vec4 _vpos;\n"
"    vec2 _texCoord;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"struct deltas {\n"
"    vec2 _UL;\n"
"    vec2 _UR;\n"
"    vec2 _DL;\n"
"    vec2 _DR;\n"
"    vec2 _M;\n"
"};\n"
"float _TMP12;\n"
"float _TMP11;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"vec4 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    output_dummy _OUT;\n"
"    vec2 _ps;\n"
"    float _lumaUL;\n"
"    float _lumaUR;\n"
"    float _lumaDL;\n"
"    float _lumaDR;\n"
"    vec2 _dir;\n"
"    deltas _TMP16;\n"
"    _ps = vec2(9.99899983E-01/TextureSize.x, 9.99899983E-01/TextureSize.y);\n"
"    _TMP16._UL = TEX0.xy + vec2(-_ps.x, -_ps.y);\n"
"    _TMP16._UR = TEX0.xy + vec2(_ps.x, -_ps.y);\n"
"    _TMP16._DL = TEX0.xy + vec2(-_ps.x, _ps.y);\n"
"    _TMP16._DR = TEX0.xy + vec2(_ps.x, _ps.y);\n"
"    _TMP0 = COMPAT_TEXTURE(Texture, _TMP16._UL);\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, _TMP16._UR);\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, _TMP16._DL);\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, _TMP16._DR);\n"
"    _lumaUL = dot(_TMP0.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaUR = dot(_TMP1.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaDL = dot(_TMP2.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _lumaDR = dot(_TMP3.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));\n"
"    _dir.x = -((_lumaUL + _lumaUR) - (_lumaDR + _lumaDL));\n"
"    _dir.y = (_lumaUR + _lumaDR) - (_lumaUL + _lumaDL);\n"
"    _TMP11 = abs(_dir.x);\n"
"    _TMP12 = abs(_dir.y);\n"
"    _OUT._color = vec4(_TMP11 + _TMP12, _TMP11 + _TMP12, _TMP11 + _TMP12, _TMP11 + _TMP12);\n"
"    FragColor = _OUT._color;\n"
"    return;\n"
"} \n"
"#endif\n"
},
