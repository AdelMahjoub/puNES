{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 VARratio_scale;\n"
"COMPAT_VARYING     float VARmod_factor;\n"
"COMPAT_VARYING     vec2 VARc32;\n"
"COMPAT_VARYING     vec2 VARc22;\n"
"COMPAT_VARYING     vec2 VARc12;\n"
"COMPAT_VARYING     vec2 VARc02;\n"
"COMPAT_VARYING     vec2 VARc31;\n"
"COMPAT_VARYING     vec2 VARc21;\n"
"COMPAT_VARYING     vec2 VARc11;\n"
"COMPAT_VARYING     vec2 VARc01;\n"
"struct tex_coords {\n"
"    vec2 VARc01;\n"
"    vec2 VARc11;\n"
"    vec2 VARc21;\n"
"    vec2 VARc31;\n"
"    vec2 VARc02;\n"
"    vec2 VARc12;\n"
"    vec2 VARc22;\n"
"    vec2 VARc32;\n"
"    float VARmod_factor;\n"
"    vec2 VARratio_scale;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"tex_coords _coords1;\n"
"input_dummy _IN1;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _delta;\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0006;\n"
"    _delta = 1.00000000E+00/TextureSize;\n"
"    VARc01 = TexCoord.xy + vec2(-_delta.x, 0.00000000E+00);\n"
"    VARc11 = TexCoord.xy;\n"
"    VARc21 = TexCoord.xy + vec2(_delta.x, 0.00000000E+00);\n"
"    VARc31 = TexCoord.xy + vec2(2.00000000E+00*_delta.x, 0.00000000E+00);\n"
"    VARc02 = TexCoord.xy + vec2(-_delta.x, _delta.y);\n"
"    VARc12 = TexCoord.xy + vec2(0.00000000E+00, _delta.y);\n"
"    VARc22 = TexCoord.xy + vec2(_delta.x, _delta.y);\n"
"    VARc32 = TexCoord.xy + vec2(2.00000000E+00*_delta.x, _delta.y);\n"
"    VARmod_factor = (TexCoord.x*OutputSize.x*TextureSize.x)/InputSize.x;\n"
"    VARratio_scale = TexCoord.xy*TextureSize;\n"
"    gl_Position = _r0006;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 VARratio_scale;\n"
"COMPAT_VARYING     float VARmod_factor;\n"
"COMPAT_VARYING     vec2 VARc32;\n"
"COMPAT_VARYING     vec2 VARc22;\n"
"COMPAT_VARYING     vec2 VARc12;\n"
"COMPAT_VARYING     vec2 VARc02;\n"
"COMPAT_VARYING     vec2 VARc31;\n"
"COMPAT_VARYING     vec2 VARc21;\n"
"COMPAT_VARYING     vec2 VARc11;\n"
"COMPAT_VARYING     vec2 VARc01;\n"
"struct tex_coords {\n"
"    vec2 VARc01;\n"
"    vec2 VARc11;\n"
"    vec2 VARc21;\n"
"    vec2 VARc31;\n"
"    vec2 VARc02;\n"
"    vec2 VARc12;\n"
"    vec2 VARc22;\n"
"    vec2 VARc32;\n"
"    float VARmod_factor;\n"
"    vec2 VARratio_scale;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP21;\n"
"float _TMP28;\n"
"float _TMP27;\n"
"float _TMP26;\n"
"float _TMP20;\n"
"float _TMP35;\n"
"float _TMP34;\n"
"float _TMP33;\n"
"float _TMP32;\n"
"vec3 _TMP16;\n"
"vec3 _TMP15;\n"
"float _TMP31;\n"
"float _TMP30;\n"
"float _TMP29;\n"
"vec3 _TMP14;\n"
"vec3 _TMP13;\n"
"vec3 _TMP36;\n"
"float _TMP10;\n"
"vec4 _TMP9;\n"
"vec4 _TMP8;\n"
"float _TMP25;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"vec4 _TMP7;\n"
"vec4 _TMP6;\n"
"vec4 _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"vec4 _TMP0;\n"
"tex_coords _co1;\n"
"uniform sampler2D Texture;\n"
"vec4 _x0062;\n"
"vec4 _x0072;\n"
"vec3 _r0084;\n"
"vec3 _TMP87;\n"
"vec3 _r0094;\n"
"vec3 _TMP97;\n"
"vec3 _x0136;\n"
"vec3 _x0144;\n"
"vec3 _TMP167;\n"
"vec3 _TMP177;\n"
"float VARc0188;\n"
"float _a0190;\n"
"vec3 _a0200;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _uv_ratio;\n"
"    vec3 _col;\n"
"    vec3 _col2;\n"
"    vec4 _coeffs;\n"
"    vec3 _weights;\n"
"    vec3 _weights2;\n"
"    vec3 _wid;\n"
"    vec3 _wid2;\n"
"    vec3 _sqrt1;\n"
"    vec3 _sqrt2;\n"
"    vec3 _pow_mul1;\n"
"    vec3 _pow_mul2;\n"
"    vec3 _div1;\n"
"    vec3 _div2;\n"
"    vec3 _pow1;\n"
"    vec3 _pow2;\n"
"    vec3 _multi;\n"
"    vec3 _mcol;\n"
"    _uv_ratio = fract(VARratio_scale);\n"
"    _TMP0 = COMPAT_TEXTURE(Texture, VARc01);\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, VARc11);\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, VARc21);\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, VARc31);\n"
"    _TMP4 = COMPAT_TEXTURE(Texture, VARc02);\n"
"    _TMP5 = COMPAT_TEXTURE(Texture, VARc12);\n"
"    _TMP6 = COMPAT_TEXTURE(Texture, VARc22);\n"
"    _TMP7 = COMPAT_TEXTURE(Texture, VARc32);\n"
"    _coeffs = vec4(1.00000000E+00 + _uv_ratio.x, _uv_ratio.x, 1.00000000E+00 - _uv_ratio.x, 2.00000000E+00 - _uv_ratio.x) + 4.99999989E-03;\n"
"    _x0062 = 3.14159274E+00*_coeffs;\n"
"    _TMP22 = sin(_x0062.x);\n"
"    _TMP23 = sin(_x0062.y);\n"
"    _TMP24 = sin(_x0062.z);\n"
"    _TMP25 = sin(_x0062.w);\n"
"    _TMP8 = vec4(_TMP22, _TMP23, _TMP24, _TMP25);\n"
"    _x0072 = 1.57079637E+00*_coeffs;\n"
"    _TMP22 = sin(_x0072.x);\n"
"    _TMP23 = sin(_x0072.y);\n"
"    _TMP24 = sin(_x0072.z);\n"
"    _TMP25 = sin(_x0072.w);\n"
"    _TMP9 = vec4(_TMP22, _TMP23, _TMP24, _TMP25);\n"
"    _coeffs = (_TMP8*_TMP9)/(_coeffs*_coeffs);\n"
"    _TMP10 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _coeffs = _coeffs/_TMP10;\n"
"    _weights = vec3(3.32999992E+00*_uv_ratio.y, 3.32999992E+00*_uv_ratio.y, 3.32999992E+00*_uv_ratio.y);\n"
"    _weights2 = vec3(_uv_ratio.y*-3.32999992E+00 + 3.32999992E+00, _uv_ratio.y*-3.32999992E+00 + 3.32999992E+00, _uv_ratio.y*-3.32999992E+00 + 3.32999992E+00);\n"
"    _r0084 = _coeffs.x*_TMP0.xyz;\n"
"    _r0084 = _r0084 + _coeffs.y*_TMP1.xyz;\n"
"    _r0084 = _r0084 + _coeffs.z*_TMP2.xyz;\n"
"    _r0084 = _r0084 + _coeffs.w*_TMP3.xyz;\n"
"    _TMP36 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0084);\n"
"    _TMP87 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP36);\n"
"    _r0094 = _coeffs.x*_TMP4.xyz;\n"
"    _r0094 = _r0094 + _coeffs.y*_TMP5.xyz;\n"
"    _r0094 = _r0094 + _coeffs.z*_TMP6.xyz;\n"
"    _r0094 = _r0094 + _coeffs.w*_TMP7.xyz;\n"
"    _TMP36 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0094);\n"
"    _TMP97 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP36);\n"
"    _TMP26 = pow(_TMP87.x, 4.00000000E+00);\n"
"    _TMP27 = pow(_TMP87.y, 4.00000000E+00);\n"
"    _TMP28 = pow(_TMP87.z, 4.00000000E+00);\n"
"    _TMP13 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _wid = 2.00000000E+00*_TMP13 + 2.00000000E+00;\n"
"    _TMP26 = pow(_TMP97.x, 4.00000000E+00);\n"
"    _TMP27 = pow(_TMP97.y, 4.00000000E+00);\n"
"    _TMP28 = pow(_TMP97.z, 4.00000000E+00);\n"
"    _TMP14 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _wid2 = 2.00000000E+00*_TMP14 + 2.00000000E+00;\n"
"    _TMP26 = pow(_TMP87.x, 2.70000005E+00);\n"
"    _TMP27 = pow(_TMP87.y, 2.70000005E+00);\n"
"    _TMP28 = pow(_TMP87.z, 2.70000005E+00);\n"
"    _col = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _TMP26 = pow(_TMP97.x, 2.70000005E+00);\n"
"    _TMP27 = pow(_TMP97.y, 2.70000005E+00);\n"
"    _TMP28 = pow(_TMP97.z, 2.70000005E+00);\n"
"    _col2 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _x0136 = 5.00000000E-01*_wid;\n"
"    _TMP29 = inversesqrt(_x0136.x);\n"
"    _TMP30 = inversesqrt(_x0136.y);\n"
"    _TMP31 = inversesqrt(_x0136.z);\n"
"    _sqrt1 = vec3(_TMP29, _TMP30, _TMP31);\n"
"    _x0144 = 5.00000000E-01*_wid2;\n"
"    _TMP29 = inversesqrt(_x0144.x);\n"
"    _TMP30 = inversesqrt(_x0144.y);\n"
"    _TMP31 = inversesqrt(_x0144.z);\n"
"    _sqrt2 = vec3(_TMP29, _TMP30, _TMP31);\n"
"    _pow_mul1 = _weights*_sqrt1;\n"
"    _pow_mul2 = _weights2*_sqrt2;\n"
"    _div1 = 1.31999999E-01*_wid + 3.91999990E-01;\n"
"    _div2 = 1.31999999E-01*_wid2 + 3.91999990E-01;\n"
"    _TMP26 = pow(_pow_mul1.x, _wid.x);\n"
"    _TMP27 = pow(_pow_mul1.y, _wid.y);\n"
"    _TMP28 = pow(_pow_mul1.z, _wid.z);\n"
"    _TMP15 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _pow1 = -_TMP15;\n"
"    _TMP26 = pow(_pow_mul2.x, _wid2.x);\n"
"    _TMP27 = pow(_pow_mul2.y, _wid2.y);\n"
"    _TMP28 = pow(_pow_mul2.z, _wid2.z);\n"
"    _TMP16 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _pow2 = -_TMP16;\n"
"    _TMP26 = pow(2.71828198E+00, _pow1.x);\n"
"    _TMP27 = pow(2.71828198E+00, _pow1.y);\n"
"    _TMP28 = pow(2.71828198E+00, _pow1.z);\n"
"    _TMP167 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _weights = _TMP167/_div1;\n"
"    _TMP26 = pow(2.71828198E+00, _pow2.x);\n"
"    _TMP27 = pow(2.71828198E+00, _pow2.y);\n"
"    _TMP28 = pow(2.71828198E+00, _pow2.z);\n"
"    _TMP177 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _weights2 = _TMP177/_div2;\n"
"    _multi = _col*_weights + _col2*_weights2;\n"
"    _a0190 = VARmod_factor/2.00000000E+00;\n"
"    _TMP32 = abs(_a0190);\n"
"    _TMP33 = fract(_TMP32);\n"
"    _TMP34 = abs(2.00000000E+00);\n"
"    VARc0188 = _TMP33*_TMP34;\n"
"    if (VARmod_factor < 0.00000000E+00) { \n"
"        _TMP35 = -VARc0188;\n"
"    } else {\n"
"        _TMP35 = VARc0188;\n"
"    } \n"
"    _TMP20 = floor(_TMP35);\n"
"    _mcol = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP20*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);\n"
"    _a0200 = _mcol*_multi;\n"
"    _TMP26 = pow(_a0200.x, 4.54544991E-01);\n"
"    _TMP27 = pow(_a0200.y, 4.54544991E-01);\n"
"    _TMP28 = pow(_a0200.z, 4.54544991E-01);\n"
"    _TMP21 = vec3(_TMP26, _TMP27, _TMP28);\n"
"    _ret_0 = vec4(_TMP21.x, _TMP21.y, _TMP21.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
