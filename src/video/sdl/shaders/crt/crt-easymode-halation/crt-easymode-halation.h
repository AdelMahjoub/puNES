{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct prev {\n"
"float _placeholder26;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0005;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _oTex;\n"
"    _r0005 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0005;\n"
"    _oTex = TexCoord.xy;\n"
"    gl_Position = _r0005;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct prev {\n"
"float _placeholder33;\n"
"};\n"
"vec4 _ret_0;\n"
"float _TMP52;\n"
"float _TMP51;\n"
"float _TMP50;\n"
"vec3 _TMP56;\n"
"float _TMP49;\n"
"float _TMP48;\n"
"float _TMP47;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"float _TMP31;\n"
"float _TMP21;\n"
"float _TMP20;\n"
"float _TMP18;\n"
"float _TMP17;\n"
"vec4 _TMP16;\n"
"vec4 _TMP55;\n"
"vec4 _TMP46;\n"
"vec4 _TMP45;\n"
"vec4 _TMP44;\n"
"vec4 _TMP43;\n"
"float _TMP10;\n"
"vec4 _TMP9;\n"
"vec4 _TMP8;\n"
"float _TMP42;\n"
"float _TMP41;\n"
"float _TMP40;\n"
"float _TMP39;\n"
"vec4 _TMP7;\n"
"float _TMP6;\n"
"vec4 _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"float _TMP38;\n"
"float _TMP37;\n"
"float _TMP53;\n"
"vec2 _TMP2;\n"
"float _TMP36;\n"
"float _TMP54;\n"
"float _TMP35;\n"
"float _TMP34;\n"
"vec2 _TMP33;\n"
"vec2 _TMP32;\n"
"float _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"prev _PASSPREV41;\n"
"float _x0065;\n"
"vec2 _co0067;\n"
"vec2 _co_weight0067;\n"
"vec2 _t0069;\n"
"vec2 _co0071;\n"
"vec2 _co_weight0071;\n"
"vec2 _t0073;\n"
"vec2 _co0075;\n"
"float _corner_weight0075;\n"
"vec2 _b0077;\n"
"float _x0087;\n"
"float _TMP88;\n"
"float _TMP104;\n"
"float _x_step0105;\n"
"float _curve0105;\n"
"float _a0109;\n"
"float _val0113;\n"
"float _a0113;\n"
"float _TMP116;\n"
"float _x_step0117;\n"
"float _curve0117;\n"
"float _a0121;\n"
"float _val0125;\n"
"float _a0125;\n"
"vec4 _TMP130;\n"
"vec4 _x0145;\n"
"vec4 _TMP158;\n"
"vec4 _x0173;\n"
"vec2 _co0185;\n"
"vec2 _c0187;\n"
"vec2 _c0191;\n"
"vec2 _c0193;\n"
"vec4 _sample_min0195;\n"
"vec4 _sample_max0195;\n"
"vec4 _r0197;\n"
"vec4 _TMP202;\n"
"vec2 _c0211;\n"
"vec2 _c0215;\n"
"vec2 _c0217;\n"
"vec4 _sample_min0219;\n"
"vec4 _sample_max0219;\n"
"vec4 _r0221;\n"
"vec4 _TMP226;\n"
"vec2 _co0233;\n"
"vec2 _c0235;\n"
"vec2 _c0239;\n"
"vec2 _c0241;\n"
"vec4 _sample_min0243;\n"
"vec4 _sample_max0243;\n"
"vec4 _r0245;\n"
"vec4 _TMP250;\n"
"vec2 _co0257;\n"
"vec2 _c0259;\n"
"vec2 _c0263;\n"
"vec2 _c0265;\n"
"vec4 _sample_min0267;\n"
"vec4 _sample_max0267;\n"
"vec4 _r0269;\n"
"vec4 _TMP274;\n"
"vec4 _sample_min0281;\n"
"vec4 _sample_max0281;\n"
"vec4 _r0283;\n"
"vec4 _TMP288;\n"
"float _TMP302;\n"
"vec2 _x0313;\n"
"float _x0321;\n"
"float _x0323;\n"
"float _x0327;\n"
"float _x0329;\n"
"float _x0331;\n"
"float _t0335;\n"
"float _t0337;\n"
"float _TMP342;\n"
"float _pos0351;\n"
"float _weight0351;\n"
"float _a0353;\n"
"float _x0355;\n"
"vec3 _x0357;\n"
"vec3 _TMP358;\n"
"float _weight0365;\n"
"float _a0367;\n"
"float _x0369;\n"
"vec3 _x0371;\n"
"vec3 _TMP372;\n"
"float _pos0379;\n"
"float _weight0379;\n"
"float _a0381;\n"
"float _x0383;\n"
"vec3 _x0385;\n"
"vec3 _TMP386;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform sampler2D PassPrev4Texture;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _tex_size;\n"
"    vec2 _midpoint;\n"
"    float _scan_offset;\n"
"    vec2 _co4;\n"
"    vec2 _xy;\n"
"    vec2 _dx1;\n"
"    vec2 _dy;\n"
"    vec2 _pix_co;\n"
"    vec2 _tex_co;\n"
"    vec2 _dist;\n"
"    vec3 _col1;\n"
"    vec3 _col2;\n"
"    vec4 _coeffs_x;\n"
"    vec4 _coeffs_y;\n"
"    float _rgb_max;\n"
"    float _sample_offset;\n"
"    float _scan_pos;\n"
"    float _scan_strength;\n"
"    float _mask_colors;\n"
"    float _mask_dither;\n"
"    vec2 _mod_fac;\n"
"    int _dot_no;\n"
"    int _dither;\n"
"    float _mask_mul;\n"
"    vec3 _mask_weight;\n"
"    _tex_size = TextureSize;\n"
"    _midpoint = vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _scan_offset = 0.00000000E+00;\n"
"    if (InputSize.y >= 4.00000000E+02) { \n"
"        _tex_size.y = TextureSize.y*5.00000000E-01;\n"
"        _x0065 = float(FrameCount)/2.00000000E+00;\n"
"        _TMP31 = floor(_x0065);\n"
"        _TMP0 = float(FrameCount) - 2.00000000E+00*_TMP31;\n"
"        if (bool(_TMP0)) { \n"
"            _midpoint.y = 7.50000000E-01;\n"
"            _scan_offset = 5.00000000E-01;\n"
"        } else {\n"
"            _midpoint.y = 2.50000000E-01;\n"
"        } \n"
"    } \n"
"    _co4 = (TEX0.xy*_tex_size)/InputSize;\n"
"    _co_weight0067 = vec2(_co4.y, _co4.x)*2.00000000E+00 - 1.00000000E+00;\n"
"    _t0069 = _co_weight0067*_co_weight0067;\n"
"    _co0067 = _co4 + _t0069*(_co4 - _co4);\n"
"    _co_weight0071 = vec2(_co4.y, _co4.x)*2.00000000E+00 - 1.00000000E+00;\n"
"    _t0073 = _co_weight0071*_co_weight0071;\n"
"    _co0071 = _co4 + _t0073*(_co4 - _co4);\n"
"    _b0077 = vec2( 1.00000000E+00, 1.00000000E+00) - _co0071;\n"
"    _TMP32 = min(_co0071, _b0077);\n"
"    _co0075 = _TMP32*vec2( 1.00000000E+00, 7.50000000E-01);\n"
"    _TMP33 = min(_co0075, vec2( 0.00000000E+00, 0.00000000E+00));\n"
"    _co0075 = vec2( 0.00000000E+00, 0.00000000E+00) - _TMP33;\n"
"    _TMP34 = dot(_co0075, _co0075);\n"
"    _TMP53 = inversesqrt(_TMP34);\n"
"    _TMP35 = 1.00000000E+00/_TMP53;\n"
"    _x0087 = (0.00000000E+00 - _TMP35)*1.50000000E+02;\n"
"    _TMP47 = min(1.00000000E+00, _x0087);\n"
"    _TMP88 = max(0.00000000E+00, _TMP47);\n"
"    _TMP54 = floor(-0.00000000E+00);\n"
"    _TMP36 = -_TMP54;\n"
"    _corner_weight0075 = 1.00000000E+00 + _TMP36*(_TMP88 - 1.00000000E+00);\n"
"    _xy = _co0067*(InputSize/_tex_size);\n"
"    _dx1 = vec2(1.00000000E+00/TextureSize.x, 0.00000000E+00);\n"
"    _dy = vec2(0.00000000E+00, 1.00000000E+00/_tex_size.y);\n"
"    _pix_co = _xy*_tex_size - _midpoint;\n"
"    _TMP2 = floor(_pix_co);\n"
"    _tex_co = (_TMP2 + _midpoint)/_tex_size;\n"
"    _dist = fract(_pix_co);\n"
"    _x_step0105 = float((_dist.x >= 5.00000000E-01));\n"
"    _a0109 = 2.50000000E-01 - (_dist.x - _x_step0105)*(_dist.x - _x_step0105);\n"
"    _TMP53 = inversesqrt(_a0109);\n"
"    _TMP37 = 1.00000000E+00/_TMP53;\n"
"    _a0113 = 5.00000000E-01 - _dist.x;\n"
"    _val0113 = float((_a0113 > 0.00000000E+00));\n"
"    _TMP38 = _val0113 - float((_a0113 < 0.00000000E+00));\n"
"    _curve0105 = 5.00000000E-01 - _TMP37*_TMP38;\n"
"    _TMP104 = _dist.x + 3.60000014E-01*(_curve0105 - _dist.x);\n"
"    _x_step0117 = float((_dist.y >= 5.00000000E-01));\n"
"    _a0121 = 2.50000000E-01 - (_dist.y - _x_step0117)*(_dist.y - _x_step0117);\n"
"    _TMP53 = inversesqrt(_a0121);\n"
"    _TMP37 = 1.00000000E+00/_TMP53;\n"
"    _a0125 = 5.00000000E-01 - _dist.y;\n"
"    _val0125 = float((_a0125 > 0.00000000E+00));\n"
"    _TMP38 = _val0125 - float((_a0125 < 0.00000000E+00));\n"
"    _curve0117 = 5.00000000E-01 - _TMP37*_TMP38;\n"
"    _TMP116 = _dist.y + (_curve0117 - _dist.y);\n"
"    _coeffs_x = 3.14159274E+00*vec4(1.00000000E+00 + _TMP104, _TMP104, 1.00000000E+00 - _TMP104, 2.00000000E+00 - _TMP104);\n"
"    _coeffs_y = 3.14159274E+00*vec4(1.00000000E+00 + _TMP116, _TMP116, 1.00000000E+00 - _TMP116, 2.00000000E+00 - _TMP116);\n"
"    _TMP3 = abs(_coeffs_x);\n"
"    _TMP130 = max(_TMP3, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));\n"
"    _TMP39 = sin(_TMP130.x);\n"
"    _TMP40 = sin(_TMP130.y);\n"
"    _TMP41 = sin(_TMP130.z);\n"
"    _TMP42 = sin(_TMP130.w);\n"
"    _TMP4 = vec4(_TMP39, _TMP40, _TMP41, _TMP42);\n"
"    _x0145 = _TMP130/2.00000000E+00;\n"
"    _TMP39 = sin(_x0145.x);\n"
"    _TMP40 = sin(_x0145.y);\n"
"    _TMP41 = sin(_x0145.z);\n"
"    _TMP42 = sin(_x0145.w);\n"
"    _TMP5 = vec4(_TMP39, _TMP40, _TMP41, _TMP42);\n"
"    _coeffs_x = ((2.00000000E+00*_TMP4)*_TMP5)/(_TMP130*_TMP130);\n"
"    _TMP6 = dot(_coeffs_x, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _coeffs_x = _coeffs_x/_TMP6;\n"
"    _TMP7 = abs(_coeffs_y);\n"
"    _TMP158 = max(_TMP7, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));\n"
"    _TMP39 = sin(_TMP158.x);\n"
"    _TMP40 = sin(_TMP158.y);\n"
"    _TMP41 = sin(_TMP158.z);\n"
"    _TMP42 = sin(_TMP158.w);\n"
"    _TMP8 = vec4(_TMP39, _TMP40, _TMP41, _TMP42);\n"
"    _x0173 = _TMP158/2.00000000E+00;\n"
"    _TMP39 = sin(_x0173.x);\n"
"    _TMP40 = sin(_x0173.y);\n"
"    _TMP41 = sin(_x0173.z);\n"
"    _TMP42 = sin(_x0173.w);\n"
"    _TMP9 = vec4(_TMP39, _TMP40, _TMP41, _TMP42);\n"
"    _coeffs_y = ((2.00000000E+00*_TMP8)*_TMP9)/(_TMP158*_TMP158);\n"
"    _TMP10 = dot(_coeffs_y, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _coeffs_y = _coeffs_y/_TMP10;\n"
"    _co0185 = _tex_co - _dy;\n"
"    _c0187 = _co0185 - _dx1;\n"
"    _TMP43 = COMPAT_TEXTURE(PassPrev4Texture, _c0187);\n"
"    _TMP44 = COMPAT_TEXTURE(PassPrev4Texture, _co0185);\n"
"    _c0191 = _co0185 + _dx1;\n"
"    _TMP45 = COMPAT_TEXTURE(PassPrev4Texture, _c0191);\n"
"    _c0193 = _co0185 + 2.00000000E+00*_dx1;\n"
"    _TMP46 = COMPAT_TEXTURE(PassPrev4Texture, _c0193);\n"
"    _r0197 = _coeffs_x.x*_TMP43;\n"
"    _r0197 = _r0197 + _coeffs_x.y*_TMP44;\n"
"    _r0197 = _r0197 + _coeffs_x.z*_TMP45;\n"
"    _r0197 = _r0197 + _coeffs_x.w*_TMP46;\n"
"    _sample_min0195 = min(_TMP44, _TMP45);\n"
"    _sample_max0195 = max(_TMP44, _TMP45);\n"
"    _TMP55 = min(_sample_max0195, _r0197);\n"
"    _TMP202 = max(_sample_min0195, _TMP55);\n"
"    _c0211 = _tex_co - _dx1;\n"
"    _TMP43 = COMPAT_TEXTURE(PassPrev4Texture, _c0211);\n"
"    _TMP44 = COMPAT_TEXTURE(PassPrev4Texture, _tex_co);\n"
"    _c0215 = _tex_co + _dx1;\n"
"    _TMP45 = COMPAT_TEXTURE(PassPrev4Texture, _c0215);\n"
"    _c0217 = _tex_co + 2.00000000E+00*_dx1;\n"
"    _TMP46 = COMPAT_TEXTURE(PassPrev4Texture, _c0217);\n"
"    _r0221 = _coeffs_x.x*_TMP43;\n"
"    _r0221 = _r0221 + _coeffs_x.y*_TMP44;\n"
"    _r0221 = _r0221 + _coeffs_x.z*_TMP45;\n"
"    _r0221 = _r0221 + _coeffs_x.w*_TMP46;\n"
"    _sample_min0219 = min(_TMP44, _TMP45);\n"
"    _sample_max0219 = max(_TMP44, _TMP45);\n"
"    _TMP55 = min(_sample_max0219, _r0221);\n"
"    _TMP226 = max(_sample_min0219, _TMP55);\n"
"    _co0233 = _tex_co + _dy;\n"
"    _c0235 = _co0233 - _dx1;\n"
"    _TMP43 = COMPAT_TEXTURE(PassPrev4Texture, _c0235);\n"
"    _TMP44 = COMPAT_TEXTURE(PassPrev4Texture, _co0233);\n"
"    _c0239 = _co0233 + _dx1;\n"
"    _TMP45 = COMPAT_TEXTURE(PassPrev4Texture, _c0239);\n"
"    _c0241 = _co0233 + 2.00000000E+00*_dx1;\n"
"    _TMP46 = COMPAT_TEXTURE(PassPrev4Texture, _c0241);\n"
"    _r0245 = _coeffs_x.x*_TMP43;\n"
"    _r0245 = _r0245 + _coeffs_x.y*_TMP44;\n"
"    _r0245 = _r0245 + _coeffs_x.z*_TMP45;\n"
"    _r0245 = _r0245 + _coeffs_x.w*_TMP46;\n"
"    _sample_min0243 = min(_TMP44, _TMP45);\n"
"    _sample_max0243 = max(_TMP44, _TMP45);\n"
"    _TMP55 = min(_sample_max0243, _r0245);\n"
"    _TMP250 = max(_sample_min0243, _TMP55);\n"
"    _co0257 = _tex_co + 2.00000000E+00*_dy;\n"
"    _c0259 = _co0257 - _dx1;\n"
"    _TMP43 = COMPAT_TEXTURE(PassPrev4Texture, _c0259);\n"
"    _TMP44 = COMPAT_TEXTURE(PassPrev4Texture, _co0257);\n"
"    _c0263 = _co0257 + _dx1;\n"
"    _TMP45 = COMPAT_TEXTURE(PassPrev4Texture, _c0263);\n"
"    _c0265 = _co0257 + 2.00000000E+00*_dx1;\n"
"    _TMP46 = COMPAT_TEXTURE(PassPrev4Texture, _c0265);\n"
"    _r0269 = _coeffs_x.x*_TMP43;\n"
"    _r0269 = _r0269 + _coeffs_x.y*_TMP44;\n"
"    _r0269 = _r0269 + _coeffs_x.z*_TMP45;\n"
"    _r0269 = _r0269 + _coeffs_x.w*_TMP46;\n"
"    _sample_min0267 = min(_TMP44, _TMP45);\n"
"    _sample_max0267 = max(_TMP44, _TMP45);\n"
"    _TMP55 = min(_sample_max0267, _r0269);\n"
"    _TMP274 = max(_sample_min0267, _TMP55);\n"
"    _r0283 = _coeffs_y.x*_TMP202;\n"
"    _r0283 = _r0283 + _coeffs_y.y*_TMP226;\n"
"    _r0283 = _r0283 + _coeffs_y.z*_TMP250;\n"
"    _r0283 = _r0283 + _coeffs_y.w*_TMP274;\n"
"    _sample_min0281 = min(_TMP226, _TMP250);\n"
"    _sample_max0281 = max(_TMP226, _TMP250);\n"
"    _TMP55 = min(_sample_max0281, _r0283);\n"
"    _TMP288 = max(_sample_min0281, _TMP55);\n"
"    _TMP16 = COMPAT_TEXTURE(Texture, _xy);\n"
"    _TMP17 = max(_TMP288.y, _TMP288.z);\n"
"    _rgb_max = max(_TMP288.x, _TMP17);\n"
"    _sample_offset = (InputSize.y/OutputSize.y)*5.00000000E-01;\n"
"    _scan_pos = _xy.y*_tex_size.y + _scan_offset;\n"
"    _scan_strength = 4.00000006E-01 + _rgb_max*-2.00000003E-01;\n"
"    _TMP47 = min(1.00000000E+00, _rgb_max);\n"
"    _TMP302 = max(1.00000000E+00, _TMP47);\n"
"    _mask_colors = floor(3.09999990E+00);\n"
"    _TMP18 = fract(3.09999990E+00);\n"
"    _mask_dither = _TMP18*1.00000000E+01;\n"
"    _x0313 = (TEX0.xy*OutputSize*TextureSize)/InputSize;\n"
"    _mod_fac = floor(_x0313);\n"
"    _x0321 = _mod_fac.x/_mask_colors;\n"
"    _TMP31 = floor(_x0321);\n"
"    _TMP20 = _mod_fac.x - _mask_colors*_TMP31;\n"
"    _dot_no = int(_TMP20);\n"
"    _x0323 = _mod_fac.x/_mask_colors;\n"
"    _TMP21 = floor(_x0323);\n"
"    _x0327 = _TMP21/2.00000000E+00;\n"
"    _TMP31 = floor(_x0327);\n"
"    _TMP22 = _TMP21 - 2.00000000E+00*_TMP31;\n"
"    _x0329 = _mod_fac.y + _TMP22;\n"
"    _x0331 = _x0329/2.00000000E+00;\n"
"    _TMP31 = floor(_x0331);\n"
"    _TMP23 = _x0329 - 2.00000000E+00*_TMP31;\n"
"    _dither = int(_TMP23);\n"
"    if (_dot_no == 0) { \n"
"        _t0335 = _mask_colors - 2.00000000E+00;\n"
"        _mask_weight = vec3( 1.39999998E+00, 1.39999998E+00, 1.39999998E+00) + _t0335*vec3( 0.00000000E+00, -5.99999964E-01, -5.99999964E-01);\n"
"    } else {\n"
"        if (_dot_no == 1) { \n"
"            _t0337 = _mask_colors - 2.00000000E+00;\n"
"            _mask_weight = vec3( 8.00000012E-01, 8.00000012E-01, 8.00000012E-01) + _t0337*vec3( 0.00000000E+00, 5.99999964E-01, 0.00000000E+00);\n"
"        } else {\n"
"            _mask_weight = vec3( 8.00000012E-01, 8.00000012E-01, 1.39999998E+00);\n"
"        } \n"
"    } \n"
"    if (bool(_dither)) { \n"
"        _mask_mul = 8.00000012E-01;\n"
"    } else {\n"
"        _mask_mul = 1.39999998E+00;\n"
"    } \n"
"    _TMP24 = 1.00000000E+00 + _mask_dither*(_mask_mul - 1.00000000E+00);\n"
"    _mask_weight = _mask_weight*_TMP24;\n"
"    _TMP47 = min(1.00000000E+00, 4.00000000E+00);\n"
"    _TMP342 = max(0.00000000E+00, _TMP47);\n"
"    _mask_weight = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + _TMP342*(_mask_weight - vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _col2 = _TMP288.xyz*_mask_weight;\n"
"    _pos0351 = _scan_pos - _sample_offset;\n"
"    _a0353 = _pos0351*2.00000000E+00*3.14159274E+00;\n"
"    _TMP48 = cos(_a0353);\n"
"    _x0355 = _TMP48*5.00000000E-01 + 5.00000000E-01;\n"
"    _TMP49 = pow(_x0355, _TMP302);\n"
"    _weight0351 = 1.00000000E+00 - _TMP49;\n"
"    _weight0351 = _weight0351*_scan_strength*2.00000000E+00 + (1.00000000E+00 - _scan_strength);\n"
"    _x0357 = _col2*_weight0351;\n"
"    _TMP56 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0357);\n"
"    _TMP358 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP56);\n"
"    _a0367 = _scan_pos*2.00000000E+00*3.14159274E+00;\n"
"    _TMP48 = cos(_a0367);\n"
"    _x0369 = _TMP48*5.00000000E-01 + 5.00000000E-01;\n"
"    _TMP49 = pow(_x0369, _TMP302);\n"
"    _weight0365 = 1.00000000E+00 - _TMP49;\n"
"    _weight0365 = _weight0365*_scan_strength*2.00000000E+00 + (1.00000000E+00 - _scan_strength);\n"
"    _x0371 = _col2*_weight0365;\n"
"    _TMP56 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0371);\n"
"    _TMP372 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP56);\n"
"    _col1 = _TMP358 + _TMP372;\n"
"    _pos0379 = _scan_pos + _sample_offset;\n"
"    _a0381 = _pos0379*2.00000000E+00*3.14159274E+00;\n"
"    _TMP48 = cos(_a0381);\n"
"    _x0383 = _TMP48*5.00000000E-01 + 5.00000000E-01;\n"
"    _TMP49 = pow(_x0383, _TMP302);\n"
"    _weight0379 = 1.00000000E+00 - _TMP49;\n"
"    _weight0379 = _weight0379*_scan_strength*2.00000000E+00 + (1.00000000E+00 - _scan_strength);\n"
"    _x0385 = _col2*_weight0379;\n"
"    _TMP56 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0385);\n"
"    _TMP386 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP56);\n"
"    _col1 = _col1 + _TMP386;\n"
"    _col1 = _col1/3.00000000E+00;\n"
"    _col1 = _col1*vec3(_corner_weight0075, _corner_weight0075, _corner_weight0075);\n"
"    _col1 = _col1 + ((_TMP16.xyz*_mask_weight)*2.99999993E-02)*vec3(_corner_weight0075, _corner_weight0075, _corner_weight0075);\n"
"    _TMP50 = pow(_col1.x, 4.54545438E-01);\n"
"    _TMP51 = pow(_col1.y, 4.54545438E-01);\n"
"    _TMP52 = pow(_col1.z, 4.54545438E-01);\n"
"    _col1 = vec3(_TMP50, _TMP51, _TMP52);\n"
"    _ret_0 = vec4(_col1.x, _col1.y, _col1.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
