{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0005;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _oTex;\n"
"    _r0005 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0005;\n"
"    _oTex = TexCoord.xy;\n"
"    gl_Position = _r0005;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"float _TMP30;\n"
"float _TMP29;\n"
"float _TMP28;\n"
"float _TMP13;\n"
"float _TMP32;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"float _TMP31;\n"
"float _TMP9;\n"
"float _TMP8;\n"
"float _TMP15;\n"
"float _TMP14;\n"
"float _TMP33;\n"
"vec4 _TMP34;\n"
"vec4 _TMP27;\n"
"vec4 _TMP25;\n"
"vec4 _TMP23;\n"
"vec4 _TMP21;\n"
"vec4 _TMP26;\n"
"vec4 _TMP24;\n"
"vec4 _TMP22;\n"
"vec4 _TMP20;\n"
"float _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"float _TMP19;\n"
"float _TMP18;\n"
"float _TMP17;\n"
"float _TMP16;\n"
"vec4 _TMP1;\n"
"vec2 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"float _TMP43;\n"
"float _x_step0044;\n"
"float _curve0044;\n"
"float _a0048;\n"
"float _val0052;\n"
"float _a0052;\n"
"vec4 _TMP57;\n"
"vec4 _x0072;\n"
"vec2 _c0086;\n"
"vec4 _x0088;\n"
"vec4 _x0094;\n"
"vec2 _c0098;\n"
"vec4 _x0100;\n"
"vec2 _c0104;\n"
"vec4 _x0106;\n"
"vec4 _sample_min0110;\n"
"vec4 _sample_max0110;\n"
"vec4 _r0112;\n"
"vec4 _TMP117;\n"
"vec2 _co0124;\n"
"vec2 _c0126;\n"
"vec4 _x0128;\n"
"vec4 _x0134;\n"
"vec2 _c0138;\n"
"vec4 _x0140;\n"
"vec2 _c0144;\n"
"vec4 _x0146;\n"
"vec4 _sample_min0150;\n"
"vec4 _sample_max0150;\n"
"vec4 _r0152;\n"
"vec4 _TMP157;\n"
"float _TMP163;\n"
"float _x_step0164;\n"
"float _curve0164;\n"
"float _a0168;\n"
"float _val0172;\n"
"float _a0172;\n"
"float _TMP183;\n"
"float _TMP189;\n"
"float _x0190;\n"
"float _a0196;\n"
"float _x0198;\n"
"vec2 _x0200;\n"
"float _x0208;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _dx1;\n"
"    vec2 _dy;\n"
"    vec2 _pix_co;\n"
"    vec2 _tex_co;\n"
"    vec2 _dist;\n"
"    vec3 _col2;\n"
"    vec3 _col21;\n"
"    vec4 _coeffs1;\n"
"    float _luma;\n"
"    float _bright;\n"
"    float _scan_weight;\n"
"    vec2 _mod_fac;\n"
"    int _dot_no;\n"
"    vec3 _mask_weight;\n"
"    vec3 _TMP37;\n"
"    _dx1 = vec2(1.00000000E+00/TextureSize.x, 0.00000000E+00);\n"
"    _dy = vec2(0.00000000E+00, 1.00000000E+00/TextureSize.y);\n"
"    _pix_co = TEX0.xy*TextureSize - vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _TMP0 = floor(_pix_co);\n"
"    _tex_co = (_TMP0 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize;\n"
"    _dist = fract(_pix_co);\n"
"    _x_step0044 = float((_dist.x >= 5.00000000E-01));\n"
"    _a0048 = 2.50000000E-01 - (_dist.x - _x_step0044)*(_dist.x - _x_step0044);\n"
"    _TMP33 = inversesqrt(_a0048);\n"
"    _TMP14 = 1.00000000E+00/_TMP33;\n"
"    _a0052 = 5.00000000E-01 - _dist.x;\n"
"    _val0052 = float((_a0052 > 0.00000000E+00));\n"
"    _TMP15 = _val0052 - float((_a0052 < 0.00000000E+00));\n"
"    _curve0044 = 5.00000000E-01 - _TMP14*_TMP15;\n"
"    _TMP43 = _dist.x + 2.50000000E-01*(_curve0044 - _dist.x);\n"
"    _coeffs1 = 3.14159274E+00*vec4(1.00000000E+00 + _TMP43, _TMP43, 1.00000000E+00 - _TMP43, 2.00000000E+00 - _TMP43);\n"
"    _TMP1 = abs(_coeffs1);\n"
"    _TMP57 = max(_TMP1, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));\n"
"    _TMP16 = sin(_TMP57.x);\n"
"    _TMP17 = sin(_TMP57.y);\n"
"    _TMP18 = sin(_TMP57.z);\n"
"    _TMP19 = sin(_TMP57.w);\n"
"    _TMP2 = vec4(_TMP16, _TMP17, _TMP18, _TMP19);\n"
"    _x0072 = _TMP57/2.00000000E+00;\n"
"    _TMP16 = sin(_x0072.x);\n"
"    _TMP17 = sin(_x0072.y);\n"
"    _TMP18 = sin(_x0072.z);\n"
"    _TMP19 = sin(_x0072.w);\n"
"    _TMP3 = vec4(_TMP16, _TMP17, _TMP18, _TMP19);\n"
"    _coeffs1 = ((2.00000000E+00*_TMP2)*_TMP3)/(_TMP57*_TMP57);\n"
"    _TMP4 = dot(_coeffs1, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _coeffs1 = _coeffs1/_TMP4;\n"
"    _c0086 = _tex_co - _dx1;\n"
"    _TMP20 = COMPAT_TEXTURE(Texture, _c0086);\n"
"    _x0088 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP20 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP21 = _TMP20*_x0088;\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _tex_co);\n"
"    _x0094 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP22 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP23 = _TMP22*_x0094;\n"
"    _c0098 = _tex_co + _dx1;\n"
"    _TMP24 = COMPAT_TEXTURE(Texture, _c0098);\n"
"    _x0100 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP24 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP25 = _TMP24*_x0100;\n"
"    _c0104 = _tex_co + 2.00000000E+00*_dx1;\n"
"    _TMP26 = COMPAT_TEXTURE(Texture, _c0104);\n"
"    _x0106 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP26 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP27 = _TMP26*_x0106;\n"
"    _r0112 = _coeffs1.x*_TMP21;\n"
"    _r0112 = _r0112 + _coeffs1.y*_TMP23;\n"
"    _r0112 = _r0112 + _coeffs1.z*_TMP25;\n"
"    _r0112 = _r0112 + _coeffs1.w*_TMP27;\n"
"    _sample_min0110 = min(_TMP23, _TMP25);\n"
"    _sample_max0110 = max(_TMP23, _TMP25);\n"
"    _TMP34 = min(_sample_max0110, _r0112);\n"
"    _TMP117 = max(_sample_min0110, _TMP34);\n"
"    _co0124 = _tex_co + _dy;\n"
"    _c0126 = _co0124 - _dx1;\n"
"    _TMP20 = COMPAT_TEXTURE(Texture, _c0126);\n"
"    _x0128 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP20 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP21 = _TMP20*_x0128;\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _co0124);\n"
"    _x0134 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP22 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP23 = _TMP22*_x0134;\n"
"    _c0138 = _co0124 + _dx1;\n"
"    _TMP24 = COMPAT_TEXTURE(Texture, _c0138);\n"
"    _x0140 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP24 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP25 = _TMP24*_x0140;\n"
"    _c0144 = _co0124 + 2.00000000E+00*_dx1;\n"
"    _TMP26 = COMPAT_TEXTURE(Texture, _c0144);\n"
"    _x0146 = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) + (_TMP26 - vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP27 = _TMP26*_x0146;\n"
"    _r0152 = _coeffs1.x*_TMP21;\n"
"    _r0152 = _r0152 + _coeffs1.y*_TMP23;\n"
"    _r0152 = _r0152 + _coeffs1.z*_TMP25;\n"
"    _r0152 = _r0152 + _coeffs1.w*_TMP27;\n"
"    _sample_min0150 = min(_TMP23, _TMP25);\n"
"    _sample_max0150 = max(_TMP23, _TMP25);\n"
"    _TMP34 = min(_sample_max0150, _r0152);\n"
"    _TMP157 = max(_sample_min0150, _TMP34);\n"
"    _x_step0164 = float((_dist.y >= 5.00000000E-01));\n"
"    _a0168 = 2.50000000E-01 - (_dist.y - _x_step0164)*(_dist.y - _x_step0164);\n"
"    _TMP33 = inversesqrt(_a0168);\n"
"    _TMP14 = 1.00000000E+00/_TMP33;\n"
"    _a0172 = 5.00000000E-01 - _dist.y;\n"
"    _val0172 = float((_a0172 > 0.00000000E+00));\n"
"    _TMP15 = _val0172 - float((_a0172 < 0.00000000E+00));\n"
"    _curve0164 = 5.00000000E-01 - _TMP14*_TMP15;\n"
"    _TMP163 = _dist.y + (_curve0164 - _dist.y);\n"
"    _col2 = _TMP117.xyz + _TMP163*(_TMP157.xyz - _TMP117.xyz);\n"
"    _luma = dot(vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02), _col2);\n"
"    _TMP8 = max(_col2.y, _col2.z);\n"
"    _TMP9 = max(_col2.x, _TMP8);\n"
"    _bright = (_TMP9 + _luma)/2.00000000E+00;\n"
"    _TMP31 = min(6.49999976E-01, _bright);\n"
"    _TMP183 = max(3.49999994E-01, _TMP31);\n"
"    _x0190 = _bright*1.50000000E+00;\n"
"    _TMP31 = min(1.50000000E+00, _x0190);\n"
"    _TMP189 = max(1.50000000E+00, _TMP31);\n"
"    _a0196 = TEX0.y*2.00000000E+00*3.14159274E+00*TextureSize.y;\n"
"    _TMP10 = cos(_a0196);\n"
"    _x0198 = _TMP10*5.00000000E-01 + 5.00000000E-01;\n"
"    _TMP11 = pow(_x0198, _TMP189);\n"
"    _scan_weight = 1.00000000E+00 - _TMP11;\n"
"    _x0200 = (TEX0.xy*OutputSize*TextureSize)/InputSize;\n"
"    _mod_fac = floor(_x0200);\n"
"    _x0208 = _mod_fac.x/3.00000000E+00;\n"
"    _TMP32 = floor(_x0208);\n"
"    _TMP13 = _mod_fac.x - 3.00000000E+00*_TMP32;\n"
"    _dot_no = int(_TMP13);\n"
"    if (_dot_no == 0) { \n"
"        _mask_weight = vec3( 1.00000000E+00, 6.99999988E-01, 6.99999988E-01);\n"
"    } else {\n"
"        if (_dot_no == 1) { \n"
"            _mask_weight = vec3( 6.99999988E-01, 1.00000000E+00, 6.99999988E-01);\n"
"        } else {\n"
"            _mask_weight = vec3( 6.99999988E-01, 6.99999988E-01, 1.00000000E+00);\n"
"        } \n"
"    } \n"
"    if (InputSize.y >= 4.00000000E+02) { \n"
"        _scan_weight = 1.00000000E+00;\n"
"    } \n"
"    _col21 = _col2.xyz;\n"
"    _col2 = _col2*vec3(_scan_weight, _scan_weight, _scan_weight);\n"
"    _col2 = _col2 + _TMP183*(_col21 - _col2);\n"
"    _col2 = _col2*_mask_weight;\n"
"    _TMP28 = pow(_col2.x, 5.55555582E-01);\n"
"    _TMP29 = pow(_col2.y, 5.55555582E-01);\n"
"    _TMP30 = pow(_col2.z, 5.55555582E-01);\n"
"    _col2 = vec3(_TMP28, _TMP29, _TMP30);\n"
"    _TMP37 = _col2*1.20000005E+00;\n"
"    _ret_0 = vec4(_TMP37.x, _TMP37.y, _TMP37.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
