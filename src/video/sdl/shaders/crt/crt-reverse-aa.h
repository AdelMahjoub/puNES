{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _t7;\n"
"COMPAT_VARYING     vec4 _t6;\n"
"COMPAT_VARYING     vec4 _t5;\n"
"COMPAT_VARYING     vec4 _t4;\n"
"COMPAT_VARYING     vec4 _t3;\n"
"COMPAT_VARYING     vec4 _t2;\n"
"COMPAT_VARYING     vec4 _t1;\n"
"COMPAT_VARYING     vec2 _texCoord2;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _position1;\n"
"    vec4 _color1;\n"
"    vec2 _texCoord2;\n"
"    vec4 _t1;\n"
"    vec4 _t2;\n"
"    vec4 _t3;\n"
"    vec4 _t4;\n"
"    vec4 _t5;\n"
"    vec4 _t6;\n"
"    vec4 _t7;\n"
"};\n"
"out_vertex _ret_0;\n"
"input_dummy _IN1;\n"
"vec4 _r0009;\n"
"vec4 _v0009;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
"COMPAT_VARYING vec4 TEX4;\n"
"COMPAT_VARYING vec4 TEX5;\n"
"COMPAT_VARYING vec4 TEX6;\n"
"COMPAT_VARYING vec4 TEX7;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    out_vertex _OUT;\n"
"    vec2 _ps;\n"
"    vec2 _texCoord;\n"
"    _v0009 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));\n"
"    _r0009 = _v0009.x*MVPMatrix[0];\n"
"    _r0009 = _r0009 + _v0009.y*MVPMatrix[1];\n"
"    _r0009 = _r0009 + _v0009.z*MVPMatrix[2];\n"
"    _r0009 = _r0009 + _v0009.w*MVPMatrix[3];\n"
"    _OUT._position1 = vec4(float(_r0009.x), float(_r0009.y), float(_r0009.z), float(_r0009.w));\n"
"    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));\n"
"    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);\n"
"    _OUT._t1 = _texCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((-2.00000000E+00*_ps.y)));\n"
"    _OUT._t2 = _texCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(-_ps.y));\n"
"    _OUT._t3 = _texCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), 0.00000000E+00);\n"
"    _OUT._t4 = _texCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(_ps.y));\n"
"    _OUT._t5 = _texCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((2.00000000E+00*_ps.y)));\n"
"    _OUT._t6 = _texCoord.xyyy + vec4(float((-2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));\n"
"    _OUT._t7 = _texCoord.xyyy + vec4(float((2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));\n"
"    _ret_0._position1 = _OUT._position1;\n"
"    _ret_0._color1 = COLOR;\n"
"    _ret_0._texCoord2 = _texCoord;\n"
"    _ret_0._t1 = _OUT._t1;\n"
"    _ret_0._t2 = _OUT._t2;\n"
"    _ret_0._t3 = _OUT._t3;\n"
"    _ret_0._t4 = _OUT._t4;\n"
"    _ret_0._t5 = _OUT._t5;\n"
"    _ret_0._t6 = _OUT._t6;\n"
"    _ret_0._t7 = _OUT._t7;\n"
"    gl_Position = _OUT._position1;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _texCoord;\n"
"    TEX1 = _OUT._t1;\n"
"    TEX2 = _OUT._t2;\n"
"    TEX3 = _OUT._t3;\n"
"    TEX4 = _OUT._t4;\n"
"    TEX5 = _OUT._t5;\n"
"    TEX6 = _OUT._t6;\n"
"    TEX7 = _OUT._t7;\n"
"    return;\n"
"    COL0 = _ret_0._color1;\n"
"    TEX0.xy = _ret_0._texCoord2;\n"
"    TEX1 = _ret_0._t1;\n"
"    TEX2 = _ret_0._t2;\n"
"    TEX3 = _ret_0._t3;\n"
"    TEX4 = _ret_0._t4;\n"
"    TEX5 = _ret_0._t5;\n"
"    TEX6 = _ret_0._t6;\n"
"    TEX7 = _ret_0._t7;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _t7;\n"
"COMPAT_VARYING     vec4 _t6;\n"
"COMPAT_VARYING     vec4 _t5;\n"
"COMPAT_VARYING     vec4 _t4;\n"
"COMPAT_VARYING     vec4 _t3;\n"
"COMPAT_VARYING     vec4 _t2;\n"
"COMPAT_VARYING     vec4 _t1;\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _color1;\n"
"    vec2 _texCoord;\n"
"    vec4 _t1;\n"
"    vec4 _t2;\n"
"    vec4 _t3;\n"
"    vec4 _t4;\n"
"    vec4 _t5;\n"
"    vec4 _t6;\n"
"    vec4 _t7;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP11;\n"
"vec3 _TMP17;\n"
"float _TMP16;\n"
"float _TMP15;\n"
"float _TMP14;\n"
"vec3 _TMP13;\n"
"vec3 _TMP10;\n"
"vec3 _TMP9;\n"
"vec4 _TMP8;\n"
"vec4 _TMP7;\n"
"vec4 _TMP5;\n"
"vec4 _TMP4;\n"
"vec4 _TMP3;\n"
"vec4 _TMP2;\n"
"vec4 _TMP1;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec2 _x0023;\n"
"vec3 _b0045;\n"
"vec3 _b0049;\n"
"vec3 _TMP50;\n"
"vec3 _a0051;\n"
"vec3 _TMP80;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
"COMPAT_VARYING vec4 TEX4;\n"
"COMPAT_VARYING vec4 TEX6;\n"
"COMPAT_VARYING vec4 TEX7;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _fp;\n"
"    vec3 _B;\n"
"    vec3 _D;\n"
"    vec3 _E;\n"
"    vec3 _F;\n"
"    vec3 _H;\n"
"    vec3 _D0;\n"
"    vec3 _F4;\n"
"    vec3 _n1;\n"
"    vec3 _n2;\n"
"    vec3 _n3;\n"
"    vec3 _n4;\n"
"    vec3 _s;\n"
"    vec3 _aa;\n"
"    vec3 _bb;\n"
"    vec3 _cc;\n"
"    vec3 _dd;\n"
"    vec3 _t;\n"
"    vec3 _m;\n"
"    vec3 _res;\n"
"    vec3 _color;\n"
"    float _ddy;\n"
"    float _v_weight_00;\n"
"    vec3 _coords10;\n"
"    vec3 _colorNB;\n"
"    float _v_weight_10;\n"
"    _x0023 = TEX0.xy*TextureSize;\n"
"    _fp = fract(_x0023);\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, TEX2.yw);\n"
"    _B = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));\n"
"    _TMP2 = COMPAT_TEXTURE(Texture, TEX3.xw);\n"
"    _D = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));\n"
"    _TMP3 = COMPAT_TEXTURE(Texture, TEX3.yw);\n"
"    _E = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));\n"
"    _TMP4 = COMPAT_TEXTURE(Texture, TEX3.zw);\n"
"    _F = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));\n"
"    _TMP5 = COMPAT_TEXTURE(Texture, TEX4.yw);\n"
"    _H = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));\n"
"    _TMP7 = COMPAT_TEXTURE(Texture, TEX6.xz);\n"
"    _D0 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));\n"
"    _TMP8 = COMPAT_TEXTURE(Texture, TEX7.xz);\n"
"    _F4 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));\n"
"    _n1 = vec3(float(_D0.x), float(_D0.y), float(_D0.z));\n"
"    _n2 = vec3(float(_D.x), float(_D.y), float(_D.z));\n"
"    _s = vec3(float(_E.x), float(_E.y), float(_E.z));\n"
"    _n3 = vec3(float(_F.x), float(_F.y), float(_F.z));\n"
"    _n4 = vec3(float(_F4.x), float(_F4.y), float(_F4.z));\n"
"    _aa = _n2 - _n1;\n"
"    _bb = _s - _n2;\n"
"    _cc = _n3 - _s;\n"
"    _dd = _n4 - _n3;\n"
"    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;\n"
"    _m = vec3(_s.x < 5.00000000E-01 ? (2.00000000E+00*_s).x : (2.00000000E+00*(1.00000000E+00 - _s)).x, _s.y < 5.00000000E-01 ? (2.00000000E+00*_s).y : (2.00000000E+00*(1.00000000E+00 - _s)).y, _s.z < 5.00000000E-01 ? (2.00000000E+00*_s).z : (2.00000000E+00*(1.00000000E+00 - _s)).z);\n"
"    _TMP9 = abs(_bb);\n"
"    _b0045 = 2.00000000E+00*_TMP9 + 9.99999978E-03;\n"
"    _m = min(_m, _b0045);\n"
"    _TMP10 = abs(_cc);\n"
"    _b0049 = 2.00000000E+00*_TMP10 + 9.99999978E-03;\n"
"    _m = min(_m, _b0049);\n"
"    _a0051 = -_m;\n"
"    _TMP13 = min(_m, _t);\n"
"    _TMP50 = max(_a0051, _TMP13);\n"
"    _res = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP50 + _s;\n"
"    _TMP14 = pow(_res.x, 2.40000010E+00);\n"
"    _TMP15 = pow(_res.y, 2.40000010E+00);\n"
"    _TMP16 = pow(_res.z, 2.40000010E+00);\n"
"    _color = vec3(_TMP14, _TMP15, _TMP16);\n"
"    _ddy = _fp.y - 5.00000000E-01;\n"
"    _v_weight_00 = _ddy/6.00000024E-01;\n"
"    if (_v_weight_00 > 1.00000000E+00) { \n"
"        _v_weight_00 = 1.00000000E+00;\n"
"    } \n"
"    _v_weight_00 = 1.00000000E+00 - _v_weight_00*_v_weight_00;\n"
"    _v_weight_00 = _v_weight_00*_v_weight_00;\n"
"    _color = _color*vec3(_v_weight_00, _v_weight_00, _v_weight_00);\n"
"    if (_ddy > 0.00000000E+00) { \n"
"        _coords10 = vec3(float(_H.x), float(_H.y), float(_H.z));\n"
"        _ddy = 1.00000000E+00 - _ddy;\n"
"    } else {\n"
"        _coords10 = vec3(float(_B.x), float(_B.y), float(_B.z));\n"
"        _ddy = 1.00000000E+00 + _ddy;\n"
"    } \n"
"    _TMP14 = pow(_coords10.x, 2.40000010E+00);\n"
"    _TMP15 = pow(_coords10.y, 2.40000010E+00);\n"
"    _TMP16 = pow(_coords10.z, 2.40000010E+00);\n"
"    _colorNB = vec3(_TMP14, _TMP15, _TMP16);\n"
"    _v_weight_10 = _ddy/6.00000024E-01;\n"
"    if (_v_weight_10 > 1.00000000E+00) { \n"
"        _v_weight_10 = 1.00000000E+00;\n"
"    } \n"
"    _v_weight_10 = 1.00000000E+00 - _v_weight_10*_v_weight_10;\n"
"    _v_weight_10 = _v_weight_10*_v_weight_10;\n"
"    _color = _color + _colorNB*vec3(_v_weight_10, _v_weight_10, _v_weight_10);\n"
"    _color = _color*vec3( 1.39999998E+00, 1.39999998E+00, 1.39999998E+00);\n"
"    _TMP14 = pow(_color.x, 4.54545438E-01);\n"
"    _TMP15 = pow(_color.y, 4.54545438E-01);\n"
"    _TMP16 = pow(_color.z, 4.54545438E-01);\n"
"    _TMP11 = vec3(_TMP14, _TMP15, _TMP16);\n"
"    _TMP17 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP11);\n"
"    _TMP80 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP17);\n"
"    _ret_0 = vec4(_TMP80.x, _TMP80.y, _TMP80.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
