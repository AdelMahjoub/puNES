{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _interlaced;\n"
"COMPAT_VARYING     vec2 _uv_step;\n"
"COMPAT_VARYING     vec2 _tex_uv1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size1;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _position1;\n"
"    vec2 _tex_uv1;\n"
"    vec2 _uv_step;\n"
"    float _interlaced;\n"
"};\n"
"out_vertex _ret_0;\n"
"bool _TMP13;\n"
"input_dummy _IN1;\n"
"vec4 _r0221;\n"
"bool _sd_interlace10223;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    out_vertex _OUT;\n"
"    _r0221 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0221 = _r0221 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0221 = _r0221 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0221 = _r0221 + VertexCoord.w*MVPMatrix[3];\n"
"    _OUT._uv_step = vec2( 1.00000000E+00, 1.00000000E+00)/TextureSize;\n"
"    _sd_interlace10223 = InputSize.y > 2.88500000E+02 && InputSize.y < 5.76500000E+02;\n"
"    _TMP13 = _sd_interlace10223 || false;\n"
"    _OUT._interlaced = float(_TMP13);\n"
"    _ret_0._position1 = _r0221;\n"
"    _ret_0._tex_uv1 = TexCoord.xy;\n"
"    _ret_0._uv_step = _OUT._uv_step;\n"
"    _ret_0._interlaced = _OUT._interlaced;\n"
"    gl_Position = _r0221;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    TEX1.xy = _OUT._uv_step;\n"
"    TEX2.x = _OUT._interlaced;\n"
"    return;\n"
"    TEX0.xy = _ret_0._tex_uv1;\n"
"    TEX1.xy = _ret_0._uv_step;\n"
"    TEX2.x = _ret_0._interlaced;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _interlaced;\n"
"COMPAT_VARYING     vec2 _uv_step;\n"
"COMPAT_VARYING     vec2 _tex_uv;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec2 _tex_uv;\n"
"    vec2 _uv_step;\n"
"    float _interlaced;\n"
"};\n"
"float _TMP21;\n"
"float _TMP20;\n"
"float _TMP19;\n"
"float _TMP18;\n"
"vec4 _TMP17;\n"
"vec3 _TMP23;\n"
"float _TMP26;\n"
"float _TMP25;\n"
"float _TMP24;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec4 _TMP232;\n"
"vec4 _TMP252;\n"
"vec2 _tex_coords0253;\n"
"vec4 _TMP272;\n"
"vec2 _tex_coords0273;\n"
"float _c0293;\n"
"float _a0295;\n"
"float _x0301;\n"
"float _a0303;\n"
"float _c0303;\n"
"float _a0305;\n"
"vec4 _color0313;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"float _crt_gamma;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _v_step1;\n"
"    vec3 _interpolated_line1;\n"
"    float _modulus1;\n"
"    float _curr_line_texel1;\n"
"    float _line_num_last1;\n"
"    vec3 _color11;\n"
"    _crt_gamma = max(0.00000000E+00, 2.50000000E+00);\n"
"    _v_step1 = vec2(0.00000000E+00, TEX1.y);\n"
"    _TMP17 = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _TMP24 = pow(_TMP17.x, _crt_gamma);\n"
"    _TMP25 = pow(_TMP17.y, _crt_gamma);\n"
"    _TMP26 = pow(_TMP17.z, _crt_gamma);\n"
"    _TMP23 = vec3(_TMP24, _TMP25, _TMP26);\n"
"    _TMP232 = vec4(_TMP23.x, _TMP23.y, _TMP23.z, _TMP17.w);\n"
"    _tex_coords0253 = TEX0.xy - _v_step1;\n"
"    _TMP17 = COMPAT_TEXTURE(Texture, _tex_coords0253);\n"
"    _TMP24 = pow(_TMP17.x, _crt_gamma);\n"
"    _TMP25 = pow(_TMP17.y, _crt_gamma);\n"
"    _TMP26 = pow(_TMP17.z, _crt_gamma);\n"
"    _TMP23 = vec3(_TMP24, _TMP25, _TMP26);\n"
"    _TMP252 = vec4(_TMP23.x, _TMP23.y, _TMP23.z, _TMP17.w);\n"
"    _tex_coords0273 = TEX0.xy + _v_step1;\n"
"    _TMP17 = COMPAT_TEXTURE(Texture, _tex_coords0273);\n"
"    _TMP24 = pow(_TMP17.x, _crt_gamma);\n"
"    _TMP25 = pow(_TMP17.y, _crt_gamma);\n"
"    _TMP26 = pow(_TMP17.z, _crt_gamma);\n"
"    _TMP23 = vec3(_TMP24, _TMP25, _TMP26);\n"
"    _TMP272 = vec4(_TMP23.x, _TMP23.y, _TMP23.z, _TMP17.w);\n"
"    _interpolated_line1 = 5.00000000E-01*(_TMP252.xyz + _TMP272.xyz);\n"
"    _modulus1 = TEX2.x + 1.00000000E+00;\n"
"    _a0295 = float(FrameCount)/_modulus1;\n"
"    _TMP18 = abs(_a0295);\n"
"    _TMP19 = fract(_TMP18);\n"
"    _TMP20 = abs(_modulus1);\n"
"    _c0293 = _TMP19*_TMP20;\n"
"    if (float(FrameCount) < 0.00000000E+00) { \n"
"        _TMP21 = -_c0293;\n"
"    } else {\n"
"        _TMP21 = _c0293;\n"
"    } \n"
"    _curr_line_texel1 = TEX0.y*TextureSize.y;\n"
"    _x0301 = _curr_line_texel1 - 4.99500006E-01;\n"
"    _line_num_last1 = floor(_x0301);\n"
"    _a0303 = _line_num_last1 + _TMP21;\n"
"    _a0305 = _a0303/_modulus1;\n"
"    _TMP18 = abs(_a0305);\n"
"    _TMP19 = fract(_TMP18);\n"
"    _TMP20 = abs(_modulus1);\n"
"    _c0303 = _TMP19*_TMP20;\n"
"    if (_a0303 < 0.00000000E+00) { \n"
"        _TMP21 = -_c0303;\n"
"    } else {\n"
"        _TMP21 = _c0303;\n"
"    } \n"
"    _color11 = _TMP232.xyz + _TMP21*(_interpolated_line1 - _TMP232.xyz);\n"
"    _color0313 = vec4(_color11.x, _color11.y, _color11.z, 1.00000000E+00);\n"
"    FragColor = _color0313;\n"
"    return;\n"
"} \n"
"#endif\n"
},
