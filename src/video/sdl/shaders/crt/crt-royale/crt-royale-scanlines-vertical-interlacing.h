{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _pixel_height_in_scanlines;\n"
"COMPAT_VARYING     vec2 _il_step_multiple;\n"
"COMPAT_VARYING     vec2 _uv_step;\n"
"COMPAT_VARYING     vec2 _tex_uv1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 _tex_coord;\n"
"struct orig {\n"
"    vec2 _tex_coord;\n"
"    vec2 _video_size2;\n"
"    vec2 _texture_size1;\n"
"    vec2 _output_dummy_size1;\n"
"float _placeholder32;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size1;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _position1;\n"
"    vec2 _tex_uv1;\n"
"    vec2 _uv_step;\n"
"    vec2 _il_step_multiple;\n"
"    float _pixel_height_in_scanlines;\n"
"};\n"
"out_vertex _ret_0;\n"
"bool _TMP13;\n"
"input_dummy _IN1;\n"
"vec4 _r0223;\n"
"bool _sd_interlace10225;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    out_vertex _OUT;\n"
"    float _y_step;\n"
"    float _ph;\n"
"    _r0223 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0223 = _r0223 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0223 = _r0223 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0223 = _r0223 + VertexCoord.w*MVPMatrix[3];\n"
"    _sd_interlace10225 = InputSize.y > 2.88500000E+02 && InputSize.y < 5.76500000E+02;\n"
"    _TMP13 = _sd_interlace10225 || false;\n"
"    _y_step = 1.00000000E+00 + float(_TMP13);\n"
"    _OUT._il_step_multiple = vec2(1.00000000E+00, _y_step);\n"
"    _OUT._uv_step = _OUT._il_step_multiple/TextureSize;\n"
"    _ph = (InputSize.y/OutputSize.y)/_OUT._il_step_multiple.y;\n"
"    _ret_0._position1 = _r0223;\n"
"    _ret_0._tex_uv1 = TexCoord.xy;\n"
"    _ret_0._uv_step = _OUT._uv_step;\n"
"    _ret_0._il_step_multiple = _OUT._il_step_multiple;\n"
"    _ret_0._pixel_height_in_scanlines = _ph;\n"
"    gl_Position = _r0223;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    TEX1.xy = _OUT._uv_step;\n"
"    TEX2.xy = _OUT._il_step_multiple;\n"
"    TEX3.x = _ph;\n"
"    return;\n"
"    TEX0.xy = _ret_0._tex_uv1;\n"
"    TEX1.xy = _ret_0._uv_step;\n"
"    TEX2.xy = _ret_0._il_step_multiple;\n"
"    TEX3.x = _ret_0._pixel_height_in_scanlines;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _pixel_height_in_scanlines;\n"
"COMPAT_VARYING     vec2 _il_step_multiple2;\n"
"COMPAT_VARYING     vec2 _uv_step1;\n"
"COMPAT_VARYING     vec2 _tex_uv1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 _tex_coord;\n"
"struct orig {\n"
"    vec2 _tex_coord;\n"
"    vec2 _video_size1;\n"
"    vec2 _texture_size3;\n"
"    vec2 _output_dummy_size1;\n"
"float _placeholder29;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size2;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count2;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec2 _tex_uv1;\n"
"    vec2 _uv_step1;\n"
"    vec2 _il_step_multiple2;\n"
"    float _pixel_height_in_scanlines;\n"
"};\n"
"vec3 _TMP35;\n"
"float _TMP42;\n"
"float _TMP41;\n"
"float _TMP40;\n"
"vec3 _TMP34;\n"
"vec3 _TMP33;\n"
"vec3 _TMP32;\n"
"vec3 _TMP31;\n"
"vec3 _TMP30;\n"
"vec3 _TMP29;\n"
"vec3 _TMP39;\n"
"vec3 _TMP38;\n"
"vec3 _TMP28;\n"
"float _TMP27;\n"
"vec3 _TMP37;\n"
"float _TMP36;\n"
"vec3 _TMP17;\n"
"float _TMP16;\n"
"float _TMP15;\n"
"vec4 _TMP22;\n"
"vec4 _TMP13;\n"
"vec4 _TMP12;\n"
"float _TMP26;\n"
"float _TMP25;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP20;\n"
"float _TMP19;\n"
"float _TMP3;\n"
"float _TMP2;\n"
"input_dummy _IN1;\n"
"uniform sampler2D Texture;\n"
"float _TMP137;\n"
"float _TMP143;\n"
"float _TMP149;\n"
"float _field_offset0248;\n"
"vec2 _curr_texel0248;\n"
"vec2 _prev_texel_num0248;\n"
"vec2 _scanline_texel_num0248;\n"
"vec2 _scanline_texel0248;\n"
"vec2 _scanline_uv0248;\n"
"float _dist0248;\n"
"float _x0250;\n"
"float _c0252;\n"
"float _a0254;\n"
"vec2 _x0260;\n"
"float _a0262;\n"
"float _c0262;\n"
"float _a0264;\n"
"vec2 _tex_coords0276;\n"
"float _TMP281;\n"
"float _x0284;\n"
"vec2 _a0286;\n"
"vec2 _b0286;\n"
"vec2 _tex_coords0288;\n"
"vec3 _TMP299;\n"
"vec3 _alpha0302;\n"
"vec3 _beta0302;\n"
"vec3 _alpha_inv0302;\n"
"vec3 _beta_inv0302;\n"
"vec3 _scale0302;\n"
"vec3 _sample_offset10302;\n"
"vec3 _dist210302;\n"
"vec3 _dist310302;\n"
"vec3 _sph0328;\n"
"vec3 _lanczos_sum0328;\n"
"vec3 _base0328;\n"
"vec3 _a0338;\n"
"vec3 _a0340;\n"
"vec3 _TMP349;\n"
"vec3 _x0350;\n"
"vec3 _a0360;\n"
"vec3 _TMP369;\n"
"vec3 _x0370;\n"
"vec3 _a0380;\n"
"vec3 _TMP389;\n"
"vec3 _x0390;\n"
"vec3 _a0400;\n"
"vec3 _TMP401;\n"
"vec3 _alpha0404;\n"
"vec3 _beta0404;\n"
"vec3 _alpha_inv0404;\n"
"vec3 _beta_inv0404;\n"
"vec3 _scale0404;\n"
"vec3 _sample_offset10404;\n"
"vec3 _dist210404;\n"
"vec3 _dist310404;\n"
"vec3 _sph0430;\n"
"vec3 _lanczos_sum0430;\n"
"vec3 _base0430;\n"
"vec3 _a0440;\n"
"vec3 _a0442;\n"
"vec3 _TMP451;\n"
"vec3 _x0452;\n"
"vec3 _a0462;\n"
"vec3 _TMP471;\n"
"vec3 _x0472;\n"
"vec3 _a0482;\n"
"vec3 _TMP491;\n"
"vec3 _x0492;\n"
"vec3 _a0502;\n"
"vec3 _b0502;\n"
"vec3 _TMP503;\n"
"vec3 _alpha0506;\n"
"vec3 _beta0506;\n"
"vec3 _alpha_inv0506;\n"
"vec3 _beta_inv0506;\n"
"vec3 _scale0506;\n"
"vec3 _sample_offset10506;\n"
"vec3 _dist210506;\n"
"vec3 _dist310506;\n"
"vec3 _sph0532;\n"
"vec3 _lanczos_sum0532;\n"
"vec3 _base0532;\n"
"vec3 _a0542;\n"
"vec3 _a0544;\n"
"vec3 _TMP553;\n"
"vec3 _x0554;\n"
"vec3 _a0564;\n"
"vec3 _TMP573;\n"
"vec3 _x0574;\n"
"vec3 _a0584;\n"
"vec3 _TMP593;\n"
"vec3 _x0594;\n"
"vec4 _color0604;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
"COMPAT_VARYING vec4 TEX2;\n"
"COMPAT_VARYING vec4 TEX3;\n"
"float _beam_min_sigma;\n"
"float _beam_max_sigma;\n"
"float _beam_spot_power;\n"
"float _beam_min_shape;\n"
"float _beam_max_shape;\n"
"float _beam_shape_power;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _texture_size_inv1;\n"
"    vec2 _v_step;\n"
"    vec2 _sample_1or4_uv_off1;\n"
"    vec3 _dist22;\n"
"    vec3 _convergence_offsets_vert_rgb1;\n"
"    float _sigma_range3;\n"
"    float _shape_range3;\n"
"    vec3 _scanline_intensity;\n"
"    vec3 _dist1or41;\n"
"    vec3 _TMP46;\n"
"    _TMP2 = abs(0.00000000E+00);\n"
"    _TMP3 = max(_TMP2, 1.52587891E-05);\n"
"    _beam_min_sigma = max(_TMP3, 1.99999996E-02);\n"
"    _beam_max_sigma = max(_beam_min_sigma, 3.00000012E-01);\n"
"    _beam_spot_power = max(3.33333343E-01, 0.00000000E+00);\n"
"    _beam_min_shape = max(2.00000000E+00, 2.00000000E+00);\n"
"    _beam_max_shape = max(_beam_min_shape, 4.00000000E+00);\n"
"    _beam_shape_power = max(0.00000000E+00, 2.50000000E-01);\n"
"    _TMP19 = min(4.00000000E+00, 2.00000003E-01);\n"
"    _TMP137 = max(-4.00000000E+00, _TMP19);\n"
"    _TMP19 = min(4.00000000E+00, 4.00000006E-01);\n"
"    _TMP143 = max(-4.00000000E+00, _TMP19);\n"
"    _TMP19 = min(4.00000000E+00, 6.00000024E-01);\n"
"    _TMP149 = max(-4.00000000E+00, _TMP19);\n"
"    _texture_size_inv1 = 1.00000000E+00/TextureSize;\n"
"    _x0250 = TEX2.y*7.50000000E-01;\n"
"    _TMP20 = floor(_x0250);\n"
"    _a0254 = float(FrameCount)/2.00000000E+00;\n"
"    _TMP23 = abs(_a0254);\n"
"    _TMP24 = fract(_TMP23);\n"
"    _TMP25 = abs(2.00000000E+00);\n"
"    _c0252 = _TMP24*_TMP25;\n"
"    if (float(FrameCount) < 0.00000000E+00) { \n"
"        _TMP26 = -_c0252;\n"
"    } else {\n"
"        _TMP26 = _c0252;\n"
"    } \n"
"    _field_offset0248 = _TMP20*_TMP26;\n"
"    _curr_texel0248 = TEX0.xy*TextureSize;\n"
"    _x0260 = _curr_texel0248 - vec2( 4.99500006E-01, 4.99500006E-01);\n"
"    _prev_texel_num0248 = floor(_x0260);\n"
"    _a0262 = _prev_texel_num0248.y + _field_offset0248;\n"
"    _a0264 = _a0262/TEX2.y;\n"
"    _TMP23 = abs(_a0264);\n"
"    _TMP24 = fract(_TMP23);\n"
"    _TMP25 = abs(TEX2.y);\n"
"    _c0262 = _TMP24*_TMP25;\n"
"    if (_a0262 < 0.00000000E+00) { \n"
"        _TMP26 = -_c0262;\n"
"    } else {\n"
"        _TMP26 = _c0262;\n"
"    } \n"
"    _scanline_texel_num0248 = _prev_texel_num0248 - vec2(0.00000000E+00, _TMP26);\n"
"    _scanline_texel0248 = _scanline_texel_num0248 + vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _scanline_uv0248 = _scanline_texel0248*_texture_size_inv1;\n"
"    _dist0248 = (_curr_texel0248.y - _scanline_texel0248.y)/TEX2.y;\n"
"    _v_step = vec2(0.00000000E+00, TEX1.y);\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _scanline_uv0248);\n"
"    _TMP12 = _TMP22;\n"
"    _tex_coords0276 = _scanline_uv0248 + _v_step;\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _tex_coords0276);\n"
"    _TMP13 = _TMP22;\n"
"    _x0284 = _dist0248 + 5.00000000E-01;\n"
"    _TMP281 = floor(_x0284);\n"
"    _a0286 = -_v_step;\n"
"    _b0286 = 2.00000000E+00*_v_step;\n"
"    _sample_1or4_uv_off1 = _a0286 + _TMP281*(_b0286 - _a0286);\n"
"    _tex_coords0288 = _scanline_uv0248 + _sample_1or4_uv_off1;\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _tex_coords0288);\n"
"    _convergence_offsets_vert_rgb1 = vec3(_TMP137, _TMP143, _TMP149);\n"
"    _dist22 = vec3(_dist0248, _dist0248, _dist0248) - _convergence_offsets_vert_rgb1;\n"
"    _TMP15 = max(_beam_max_sigma, _beam_min_sigma);\n"
"    _sigma_range3 = _TMP15 - _beam_min_sigma;\n"
"    _TMP16 = max(_beam_max_shape, _beam_min_shape);\n"
"    _shape_range3 = _TMP16 - _beam_min_shape;\n"
"    _TMP36 = inversesqrt(2.00000000E+00);\n"
"    _TMP27 = 1.00000000E+00/_TMP36;\n"
"    _TMP40 = pow(_TMP12.x, _beam_spot_power);\n"
"    _TMP41 = pow(_TMP12.y, _beam_spot_power);\n"
"    _TMP42 = pow(_TMP12.z, _beam_spot_power);\n"
"    _TMP37 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP28 = vec3(_beam_min_sigma, _beam_min_sigma, _beam_min_sigma) + _sigma_range3*_TMP37;\n"
"    _alpha0302 = _TMP27*_TMP28;\n"
"    _TMP40 = pow(_TMP12.x, _beam_shape_power);\n"
"    _TMP41 = pow(_TMP12.y, _beam_shape_power);\n"
"    _TMP42 = pow(_TMP12.z, _beam_shape_power);\n"
"    _TMP38 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _beta0302 = _beam_min_shape + _shape_range3*_TMP38;\n"
"    _alpha_inv0302 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_alpha0302;\n"
"    _beta_inv0302 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_beta0302;\n"
"    _sph0328 = _beta_inv0302 + vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);\n"
"    _lanczos_sum0328 = vec3( 8.10911953E-01, 8.10911953E-01, 8.10911953E-01) + vec3( 4.80835468E-01, 4.80835468E-01, 4.80835468E-01)/(_beta_inv0302 + vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _base0328 = (_sph0328 + vec3( 1.12906826E+00, 1.12906826E+00, 1.12906826E+00))/vec3( 2.71828175E+00, 2.71828175E+00, 2.71828175E+00);\n"
"    _TMP40 = pow(_base0328.x, _sph0328.x);\n"
"    _TMP41 = pow(_base0328.y, _sph0328.y);\n"
"    _TMP42 = pow(_base0328.z, _sph0328.z);\n"
"    _TMP39 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP29 = _TMP39*_lanczos_sum0328*_beta0302;\n"
"    _scale0302 = (((_TMP12.xyz*_beta0302)*5.00000000E-01)*_alpha_inv0302)/_TMP29;\n"
"    _sample_offset10302 = vec3(TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00);\n"
"    _dist210302 = _dist22 + _sample_offset10302;\n"
"    _a0338 = _dist22 - _sample_offset10302;\n"
"    _dist310302 = abs(_a0338);\n"
"    _a0340 = _dist22*_alpha_inv0302;\n"
"    _TMP30 = abs(_a0340);\n"
"    _TMP40 = pow(_TMP30.x, _beta0302.x);\n"
"    _TMP41 = pow(_TMP30.y, _beta0302.y);\n"
"    _TMP42 = pow(_TMP30.z, _beta0302.z);\n"
"    _TMP31 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0350 = -_TMP31;\n"
"    _TMP40 = pow(2.71828198E+00, _x0350.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0350.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0350.z);\n"
"    _TMP349 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0360 = _dist210302*_alpha_inv0302;\n"
"    _TMP32 = abs(_a0360);\n"
"    _TMP40 = pow(_TMP32.x, _beta0302.x);\n"
"    _TMP41 = pow(_TMP32.y, _beta0302.y);\n"
"    _TMP42 = pow(_TMP32.z, _beta0302.z);\n"
"    _TMP33 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0370 = -_TMP33;\n"
"    _TMP40 = pow(2.71828198E+00, _x0370.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0370.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0370.z);\n"
"    _TMP369 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0380 = _dist310302*_alpha_inv0302;\n"
"    _TMP34 = abs(_a0380);\n"
"    _TMP40 = pow(_TMP34.x, _beta0302.x);\n"
"    _TMP41 = pow(_TMP34.y, _beta0302.y);\n"
"    _TMP42 = pow(_TMP34.z, _beta0302.z);\n"
"    _TMP35 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0390 = -_TMP35;\n"
"    _TMP40 = pow(2.71828198E+00, _x0390.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0390.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0390.z);\n"
"    _TMP389 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP299 = (_scale0302/3.00000000E+00)*(_TMP349 + _TMP369 + _TMP389);\n"
"    _a0400 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00) - _dist22;\n"
"    _TMP17 = abs(_a0400);\n"
"    _TMP36 = inversesqrt(2.00000000E+00);\n"
"    _TMP27 = 1.00000000E+00/_TMP36;\n"
"    _TMP40 = pow(_TMP13.x, _beam_spot_power);\n"
"    _TMP41 = pow(_TMP13.y, _beam_spot_power);\n"
"    _TMP42 = pow(_TMP13.z, _beam_spot_power);\n"
"    _TMP37 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP28 = vec3(_beam_min_sigma, _beam_min_sigma, _beam_min_sigma) + _sigma_range3*_TMP37;\n"
"    _alpha0404 = _TMP27*_TMP28;\n"
"    _TMP40 = pow(_TMP13.x, _beam_shape_power);\n"
"    _TMP41 = pow(_TMP13.y, _beam_shape_power);\n"
"    _TMP42 = pow(_TMP13.z, _beam_shape_power);\n"
"    _TMP38 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _beta0404 = _beam_min_shape + _shape_range3*_TMP38;\n"
"    _alpha_inv0404 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_alpha0404;\n"
"    _beta_inv0404 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_beta0404;\n"
"    _sph0430 = _beta_inv0404 + vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);\n"
"    _lanczos_sum0430 = vec3( 8.10911953E-01, 8.10911953E-01, 8.10911953E-01) + vec3( 4.80835468E-01, 4.80835468E-01, 4.80835468E-01)/(_beta_inv0404 + vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _base0430 = (_sph0430 + vec3( 1.12906826E+00, 1.12906826E+00, 1.12906826E+00))/vec3( 2.71828175E+00, 2.71828175E+00, 2.71828175E+00);\n"
"    _TMP40 = pow(_base0430.x, _sph0430.x);\n"
"    _TMP41 = pow(_base0430.y, _sph0430.y);\n"
"    _TMP42 = pow(_base0430.z, _sph0430.z);\n"
"    _TMP39 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP29 = _TMP39*_lanczos_sum0430*_beta0404;\n"
"    _scale0404 = (((_TMP13.xyz*_beta0404)*5.00000000E-01)*_alpha_inv0404)/_TMP29;\n"
"    _sample_offset10404 = vec3(TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00);\n"
"    _dist210404 = _TMP17 + _sample_offset10404;\n"
"    _a0440 = _TMP17 - _sample_offset10404;\n"
"    _dist310404 = abs(_a0440);\n"
"    _a0442 = _TMP17*_alpha_inv0404;\n"
"    _TMP30 = abs(_a0442);\n"
"    _TMP40 = pow(_TMP30.x, _beta0404.x);\n"
"    _TMP41 = pow(_TMP30.y, _beta0404.y);\n"
"    _TMP42 = pow(_TMP30.z, _beta0404.z);\n"
"    _TMP31 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0452 = -_TMP31;\n"
"    _TMP40 = pow(2.71828198E+00, _x0452.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0452.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0452.z);\n"
"    _TMP451 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0462 = _dist210404*_alpha_inv0404;\n"
"    _TMP32 = abs(_a0462);\n"
"    _TMP40 = pow(_TMP32.x, _beta0404.x);\n"
"    _TMP41 = pow(_TMP32.y, _beta0404.y);\n"
"    _TMP42 = pow(_TMP32.z, _beta0404.z);\n"
"    _TMP33 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0472 = -_TMP33;\n"
"    _TMP40 = pow(2.71828198E+00, _x0472.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0472.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0472.z);\n"
"    _TMP471 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0482 = _dist310404*_alpha_inv0404;\n"
"    _TMP34 = abs(_a0482);\n"
"    _TMP40 = pow(_TMP34.x, _beta0404.x);\n"
"    _TMP41 = pow(_TMP34.y, _beta0404.y);\n"
"    _TMP42 = pow(_TMP34.z, _beta0404.z);\n"
"    _TMP35 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0492 = -_TMP35;\n"
"    _TMP40 = pow(2.71828198E+00, _x0492.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0492.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0492.z);\n"
"    _TMP491 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP401 = (_scale0404/3.00000000E+00)*(_TMP451 + _TMP471 + _TMP491);\n"
"    _scanline_intensity = _TMP299 + _TMP401;\n"
"    _a0502 = _dist22 + vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00);\n"
"    _b0502 = vec3( 2.00000000E+00, 2.00000000E+00, 2.00000000E+00) - _dist22;\n"
"    _dist1or41 = _a0502 + _TMP281*(_b0502 - _a0502);\n"
"    _TMP36 = inversesqrt(2.00000000E+00);\n"
"    _TMP27 = 1.00000000E+00/_TMP36;\n"
"    _TMP40 = pow(_TMP22.x, _beam_spot_power);\n"
"    _TMP41 = pow(_TMP22.y, _beam_spot_power);\n"
"    _TMP42 = pow(_TMP22.z, _beam_spot_power);\n"
"    _TMP37 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP28 = vec3(_beam_min_sigma, _beam_min_sigma, _beam_min_sigma) + _sigma_range3*_TMP37;\n"
"    _alpha0506 = _TMP27*_TMP28;\n"
"    _TMP40 = pow(_TMP22.x, _beam_shape_power);\n"
"    _TMP41 = pow(_TMP22.y, _beam_shape_power);\n"
"    _TMP42 = pow(_TMP22.z, _beam_shape_power);\n"
"    _TMP38 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _beta0506 = _beam_min_shape + _shape_range3*_TMP38;\n"
"    _alpha_inv0506 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_alpha0506;\n"
"    _beta_inv0506 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00)/_beta0506;\n"
"    _sph0532 = _beta_inv0506 + vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01);\n"
"    _lanczos_sum0532 = vec3( 8.10911953E-01, 8.10911953E-01, 8.10911953E-01) + vec3( 4.80835468E-01, 4.80835468E-01, 4.80835468E-01)/(_beta_inv0506 + vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _base0532 = (_sph0532 + vec3( 1.12906826E+00, 1.12906826E+00, 1.12906826E+00))/vec3( 2.71828175E+00, 2.71828175E+00, 2.71828175E+00);\n"
"    _TMP40 = pow(_base0532.x, _sph0532.x);\n"
"    _TMP41 = pow(_base0532.y, _sph0532.y);\n"
"    _TMP42 = pow(_base0532.z, _sph0532.z);\n"
"    _TMP39 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP29 = _TMP39*_lanczos_sum0532*_beta0506;\n"
"    _scale0506 = (((_TMP22.xyz*_beta0506)*5.00000000E-01)*_alpha_inv0506)/_TMP29;\n"
"    _sample_offset10506 = vec3(TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00, TEX3.x/3.00000000E+00);\n"
"    _dist210506 = _dist1or41 + _sample_offset10506;\n"
"    _a0542 = _dist1or41 - _sample_offset10506;\n"
"    _dist310506 = abs(_a0542);\n"
"    _a0544 = _dist1or41*_alpha_inv0506;\n"
"    _TMP30 = abs(_a0544);\n"
"    _TMP40 = pow(_TMP30.x, _beta0506.x);\n"
"    _TMP41 = pow(_TMP30.y, _beta0506.y);\n"
"    _TMP42 = pow(_TMP30.z, _beta0506.z);\n"
"    _TMP31 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0554 = -_TMP31;\n"
"    _TMP40 = pow(2.71828198E+00, _x0554.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0554.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0554.z);\n"
"    _TMP553 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0564 = _dist210506*_alpha_inv0506;\n"
"    _TMP32 = abs(_a0564);\n"
"    _TMP40 = pow(_TMP32.x, _beta0506.x);\n"
"    _TMP41 = pow(_TMP32.y, _beta0506.y);\n"
"    _TMP42 = pow(_TMP32.z, _beta0506.z);\n"
"    _TMP33 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0574 = -_TMP33;\n"
"    _TMP40 = pow(2.71828198E+00, _x0574.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0574.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0574.z);\n"
"    _TMP573 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _a0584 = _dist310506*_alpha_inv0506;\n"
"    _TMP34 = abs(_a0584);\n"
"    _TMP40 = pow(_TMP34.x, _beta0506.x);\n"
"    _TMP41 = pow(_TMP34.y, _beta0506.y);\n"
"    _TMP42 = pow(_TMP34.z, _beta0506.z);\n"
"    _TMP35 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _x0594 = -_TMP35;\n"
"    _TMP40 = pow(2.71828198E+00, _x0594.x);\n"
"    _TMP41 = pow(2.71828198E+00, _x0594.y);\n"
"    _TMP42 = pow(2.71828198E+00, _x0594.z);\n"
"    _TMP593 = vec3(_TMP40, _TMP41, _TMP42);\n"
"    _TMP503 = (_scale0506/3.00000000E+00)*(_TMP553 + _TMP573 + _TMP593);\n"
"    _scanline_intensity = _scanline_intensity + _TMP503;\n"
"    _TMP46 = _scanline_intensity*5.00000000E-01;\n"
"    _color0604 = vec4(_TMP46.x, _TMP46.y, _TMP46.z, 1.00000000E+00);\n"
"    FragColor = _color0604;\n"
"    return;\n"
"} \n"
"#endif\n"
},
