{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float VARone;\n"
"COMPAT_VARYING     vec2 VARpix_no;\n"
"struct data {\n"
"    vec2 VARpix_no;\n"
"    float VARone;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"};\n"
"vec4 _oPosition1;\n"
"data _oData1;\n"
"input_dummy _IN1;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0006;\n"
"    VARpix_no = TexCoord.xy*TextureSize - vec2( 0.00000000E+00, 5.00000000E-01);\n"
"    VARone = 1.00000000E+00/TextureSize.y;\n"
"    gl_Position = _r0006;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float VARone;\n"
"COMPAT_VARYING     vec2 VARpix_no;\n"
"struct data {\n"
"    vec2 VARpix_no;\n"
"    float VARone;\n"
"};\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP3;\n"
"vec3 _TMP7;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"float _TMP9;\n"
"vec3 _TMP6;\n"
"float _TMP14;\n"
"float _TMP13;\n"
"float _TMP12;\n"
"float _TMP5;\n"
"vec3 _TMP4;\n"
"vec3 _TMP2;\n"
"vec4 _TMP1;\n"
"vec4 _TMP0;\n"
"input_dummy _IN1;\n"
"data _vertex1;\n"
"uniform sampler2D Texture;\n"
"vec2 _c0024;\n"
"vec3 _wid0026;\n"
"vec3 _weights0026;\n"
"vec3 _x0038;\n"
"vec3 _a0046;\n"
"vec3 _TMP53;\n"
"vec3 _x0054;\n"
"vec3 _wid0064;\n"
"vec3 _weights0064;\n"
"vec3 _x0076;\n"
"vec3 _a0084;\n"
"vec3 _TMP91;\n"
"vec3 _x0092;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _texel;\n"
"    float _phase;\n"
"    vec2 _tex;\n"
"    float _dist1;\n"
"    vec3 _scanline;\n"
"    vec3 _TMP18;\n"
"    _texel = floor(VARpix_no);\n"
"    _phase = VARpix_no.y - _texel.y;\n"
"    _tex = (_texel + 5.00000000E-01)/TextureSize;\n"
"    _TMP0 = COMPAT_TEXTURE(Texture, _tex);\n"
"    _c0024 = _tex + vec2(0.00000000E+00, VARone);\n"
"    _TMP1 = COMPAT_TEXTURE(Texture, _c0024);\n"
"    _dist1 = 1.00000000E+00 - _phase;\n"
"    _TMP9 = pow(_TMP0.x, 4.00000000E+00);\n"
"    _TMP10 = pow(_TMP0.y, 4.00000000E+00);\n"
"    _TMP11 = pow(_TMP0.z, 4.00000000E+00);\n"
"    _TMP4 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _wid0026 = 2.00000000E+00 + 2.00000000E+00*_TMP4;\n"
"    _TMP5 = abs(_phase);\n"
"    _weights0026 = vec3(_TMP5/3.00000012E-01, _TMP5/3.00000012E-01, _TMP5/3.00000012E-01);\n"
"    _x0038 = 5.00000000E-01*_wid0026;\n"
"    _TMP12 = inversesqrt(_x0038.x);\n"
"    _TMP13 = inversesqrt(_x0038.y);\n"
"    _TMP14 = inversesqrt(_x0038.z);\n"
"    _TMP6 = vec3(_TMP12, _TMP13, _TMP14);\n"
"    _a0046 = _weights0026*_TMP6;\n"
"    _TMP9 = pow(_a0046.x, _wid0026.x);\n"
"    _TMP10 = pow(_a0046.y, _wid0026.y);\n"
"    _TMP11 = pow(_a0046.z, _wid0026.z);\n"
"    _TMP7 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _x0054 = -_TMP7;\n"
"    _TMP9 = pow(2.71828198E+00, _x0054.x);\n"
"    _TMP10 = pow(2.71828198E+00, _x0054.y);\n"
"    _TMP11 = pow(2.71828198E+00, _x0054.z);\n"
"    _TMP53 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _TMP2 = ((2.00000000E+00*_TMP0.xyz)*_TMP53)/(6.00000024E-01 + 2.00000003E-01*_wid0026);\n"
"    _TMP9 = pow(_TMP1.x, 4.00000000E+00);\n"
"    _TMP10 = pow(_TMP1.y, 4.00000000E+00);\n"
"    _TMP11 = pow(_TMP1.z, 4.00000000E+00);\n"
"    _TMP4 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _wid0064 = 2.00000000E+00 + 2.00000000E+00*_TMP4;\n"
"    _TMP5 = abs(_dist1);\n"
"    _weights0064 = vec3(_TMP5/3.00000012E-01, _TMP5/3.00000012E-01, _TMP5/3.00000012E-01);\n"
"    _x0076 = 5.00000000E-01*_wid0064;\n"
"    _TMP12 = inversesqrt(_x0076.x);\n"
"    _TMP13 = inversesqrt(_x0076.y);\n"
"    _TMP14 = inversesqrt(_x0076.z);\n"
"    _TMP6 = vec3(_TMP12, _TMP13, _TMP14);\n"
"    _a0084 = _weights0064*_TMP6;\n"
"    _TMP9 = pow(_a0084.x, _wid0064.x);\n"
"    _TMP10 = pow(_a0084.y, _wid0064.y);\n"
"    _TMP11 = pow(_a0084.z, _wid0064.z);\n"
"    _TMP7 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _x0092 = -_TMP7;\n"
"    _TMP9 = pow(2.71828198E+00, _x0092.x);\n"
"    _TMP10 = pow(2.71828198E+00, _x0092.y);\n"
"    _TMP11 = pow(2.71828198E+00, _x0092.z);\n"
"    _TMP91 = vec3(_TMP9, _TMP10, _TMP11);\n"
"    _TMP3 = ((2.00000000E+00*_TMP1.xyz)*_TMP91)/(6.00000024E-01 + 2.00000003E-01*_wid0064);\n"
"    _scanline = _TMP2 + _TMP3;\n"
"    _TMP18 = _scanline/1.14999998E+00;\n"
"    _ret_0 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
