{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0005;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _oTex;\n"
"    _r0005 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0005;\n"
"    _oTex = TexCoord.xy;\n"
"    gl_Position = _r0005;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP15;\n"
"float _TMP13;\n"
"float _TMP9;\n"
"float _TMP6;\n"
"float _TMP3;\n"
"float _TMP12;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"float _TMP8;\n"
"float _TMP7;\n"
"float _TMP5;\n"
"float _TMP4;\n"
"float _TMP2;\n"
"vec4 _TMP1;\n"
"float _TMP14;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"float _TMP19;\n"
"float _x0020;\n"
"float _v0024;\n"
"float _x0026;\n"
"vec2 _c0028;\n"
"float _a0032;\n"
"float _b0032;\n"
"float _a0036;\n"
"float _b0036;\n"
"float _a0038;\n"
"float _a0042;\n"
"float _b0042;\n"
"float _b0044;\n"
"float _a0048;\n"
"float _b0048;\n"
"float _b0050;\n"
"float _a0052;\n"
"vec3 _TMP53;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec3 _tempColor;\n"
"    float _X;\n"
"    float _range;\n"
"    float _i;\n"
"    _x0020 = TEX0.x*TextureSize.x - 5.00000000E-01;\n"
"    _TMP19 = fract(_x0020);\n"
"    _tempColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _v0024 = 5.00000000E-01 + InputSize.x/2.56000000E+02;\n"
"    _x0026 = -_v0024;\n"
"    _TMP14 = floor(_x0026);\n"
"    _range = -_TMP14;\n"
"    _i = -_range;\n"
"    for (; _i < _range + 2.00000000E+00; _i = _i + 1.00000000E+00) { \n"
"        _X = _TMP19 - _i;\n"
"        _c0028 = vec2(TEX0.x - _X/TextureSize.x, TEX0.y);\n"
"        _TMP1 = COMPAT_TEXTURE(Texture, _c0028);\n"
"        _TMP2 = abs(_X);\n"
"        _a0032 = _TMP2 + 5.00000000E-01;\n"
"        _b0032 = 1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP3 = min(_a0032, _b0032);\n"
"        _TMP4 = abs(_X);\n"
"        _a0036 = _TMP4 + 5.00000000E-01;\n"
"        _b0036 = 1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP5 = min(_a0036, _b0036);\n"
"        _a0038 = 3.14159274E+00*(2.56000000E+02/InputSize.x)*_TMP5;\n"
"        _TMP6 = sin(_a0038);\n"
"        _TMP7 = abs(_X);\n"
"        _a0042 = _TMP7 - 5.00000000E-01;\n"
"        _b0042 = -1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP8 = max(_a0042, _b0042);\n"
"        _b0044 = 1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP9 = min(_TMP8, _b0044);\n"
"        _TMP10 = abs(_X);\n"
"        _a0048 = _TMP10 - 5.00000000E-01;\n"
"        _b0048 = -1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP11 = max(_a0048, _b0048);\n"
"        _b0050 = 1.00000000E+00/(2.56000000E+02/InputSize.x);\n"
"        _TMP12 = min(_TMP11, _b0050);\n"
"        _a0052 = 3.14159274E+00*(2.56000000E+02/InputSize.x)*_TMP12;\n"
"        _TMP13 = sin(_a0052);\n"
"        _tempColor = _tempColor + _TMP1.xyz*((((3.14159274E+00*(2.56000000E+02/InputSize.x)*_TMP3 + _TMP6) - 3.14159274E+00*(2.56000000E+02/InputSize.x)*_TMP9) - _TMP13)/6.28318548E+00);\n"
"    } \n"
"    _TMP15 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _tempColor);\n"
"    _TMP53 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP15);\n"
"    _ret_0 = vec4(_TMP53.x, _TMP53.y, _TMP53.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
