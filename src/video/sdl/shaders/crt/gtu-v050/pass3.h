{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0005;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _oTex;\n"
"    _r0005 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0005;\n"
"    _oTex = TexCoord.xy;\n"
"    gl_Position = _r0005;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec4 _TMP1;\n"
"float _TMP10;\n"
"float _TMP9;\n"
"float _TMP15;\n"
"float _TMP14;\n"
"float _TMP11;\n"
"float _TMP12;\n"
"float _TMP8;\n"
"float _TMP7;\n"
"float _TMP6;\n"
"float _TMP5;\n"
"float _TMP4;\n"
"float _TMP3;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN2;\n"
"vec2 _TMP19;\n"
"vec2 _x0020;\n"
"float _v0024;\n"
"float _x0026;\n"
"vec2 _c0028;\n"
"float _temp0030;\n"
"float _rrr0030;\n"
"float _x10030;\n"
"float _x0030;\n"
"float _x20030;\n"
"vec3 _c0030;\n"
"float _t0036;\n"
"float _TMP39;\n"
"float _x0040;\n"
"float _val0048;\n"
"float _t0050;\n"
"float _TMP53;\n"
"float _x0054;\n"
"float _val0062;\n"
"float _t0064;\n"
"float _TMP67;\n"
"float _x0068;\n"
"float _val0076;\n"
"float _t0078;\n"
"float _TMP81;\n"
"float _x0082;\n"
"float _val0090;\n"
"float _t0092;\n"
"float _TMP95;\n"
"float _x0096;\n"
"float _val0104;\n"
"float _t0106;\n"
"float _TMP109;\n"
"float _x0110;\n"
"float _val0118;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec3 _tempColor;\n"
"    float _range;\n"
"    float _i;\n"
"    _x0020 = TEX0.xy*TextureSize.xy - 5.00000000E-01;\n"
"    _TMP19 = fract(_x0020);\n"
"    _tempColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _v0024 = 5.00000000E-01 + InputSize.y/2.50000000E+02;\n"
"    _x0026 = -_v0024;\n"
"    _TMP3 = floor(_x0026);\n"
"    _range = -_TMP3;\n"
"    _i = -_range;\n"
"    for (; _i < _range + 2.00000000E+00; _i = _i + 1.00000000E+00) { \n"
"        _c0028 = vec2(TEX0.x, TEX0.y - (_TMP19.y - _i)/TextureSize.y);\n"
"        _TMP1 = COMPAT_TEXTURE(Texture, _c0028);\n"
"        _x0030 = _TMP19.y - _i;\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP4 = 1.00000000E+00/_TMP11;\n"
"        _temp0030 = _TMP4*(2.50000000E+02/InputSize.y);\n"
"        _rrr0030 = 5.00000000E-01*(InputSize.y/OutputSize.y);\n"
"        _x10030 = (_x0030 + _rrr0030)*_temp0030;\n"
"        _x20030 = (_x0030 - _rrr0030)*_temp0030;\n"
"        _TMP12 = abs(_x10030);\n"
"        _t0036 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0040 = -_x10030*_x10030*5.00000000E-01;\n"
"        _TMP39 = pow(2.71828198E+00, _x0040);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0048 = float((_x10030 > 0.00000000E+00));\n"
"        _TMP15 = _val0048 - float((_x10030 < 0.00000000E+00));\n"
"        _TMP5 = (5.00000000E-01 - (_TMP39/_TMP14)*_t0036*(4.36183602E-01 + _t0036*(-1.20167598E-01 + 9.37298000E-01*_t0036)))*_TMP15;\n"
"        _TMP12 = abs(_x20030);\n"
"        _t0050 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0054 = -_x20030*_x20030*5.00000000E-01;\n"
"        _TMP53 = pow(2.71828198E+00, _x0054);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0062 = float((_x20030 > 0.00000000E+00));\n"
"        _TMP15 = _val0062 - float((_x20030 < 0.00000000E+00));\n"
"        _TMP6 = (5.00000000E-01 - (_TMP53/_TMP14)*_t0050*(4.36183602E-01 + _t0050*(-1.20167598E-01 + 9.37298000E-01*_t0050)))*_TMP15;\n"
"        _c0030.x = _TMP1.x*(_TMP5 - _TMP6);\n"
"        _TMP12 = abs(_x10030);\n"
"        _t0064 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0068 = -_x10030*_x10030*5.00000000E-01;\n"
"        _TMP67 = pow(2.71828198E+00, _x0068);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0076 = float((_x10030 > 0.00000000E+00));\n"
"        _TMP15 = _val0076 - float((_x10030 < 0.00000000E+00));\n"
"        _TMP7 = (5.00000000E-01 - (_TMP67/_TMP14)*_t0064*(4.36183602E-01 + _t0064*(-1.20167598E-01 + 9.37298000E-01*_t0064)))*_TMP15;\n"
"        _TMP12 = abs(_x20030);\n"
"        _t0078 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0082 = -_x20030*_x20030*5.00000000E-01;\n"
"        _TMP81 = pow(2.71828198E+00, _x0082);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0090 = float((_x20030 > 0.00000000E+00));\n"
"        _TMP15 = _val0090 - float((_x20030 < 0.00000000E+00));\n"
"        _TMP8 = (5.00000000E-01 - (_TMP81/_TMP14)*_t0078*(4.36183602E-01 + _t0078*(-1.20167598E-01 + 9.37298000E-01*_t0078)))*_TMP15;\n"
"        _c0030.y = _TMP1.y*(_TMP7 - _TMP8);\n"
"        _TMP12 = abs(_x10030);\n"
"        _t0092 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0096 = -_x10030*_x10030*5.00000000E-01;\n"
"        _TMP95 = pow(2.71828198E+00, _x0096);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0104 = float((_x10030 > 0.00000000E+00));\n"
"        _TMP15 = _val0104 - float((_x10030 < 0.00000000E+00));\n"
"        _TMP9 = (5.00000000E-01 - (_TMP95/_TMP14)*_t0092*(4.36183602E-01 + _t0092*(-1.20167598E-01 + 9.37298000E-01*_t0092)))*_TMP15;\n"
"        _TMP12 = abs(_x20030);\n"
"        _t0106 = 1.00000000E+00/(1.00000000E+00 + 3.32670003E-01*_TMP12);\n"
"        _x0110 = -_x20030*_x20030*5.00000000E-01;\n"
"        _TMP109 = pow(2.71828198E+00, _x0110);\n"
"        _TMP11 = inversesqrt(6.28318548E+00);\n"
"        _TMP14 = 1.00000000E+00/_TMP11;\n"
"        _val0118 = float((_x20030 > 0.00000000E+00));\n"
"        _TMP15 = _val0118 - float((_x20030 < 0.00000000E+00));\n"
"        _TMP10 = (5.00000000E-01 - (_TMP109/_TMP14)*_t0106*(4.36183602E-01 + _t0106*(-1.20167598E-01 + 9.37298000E-01*_t0106)))*_TMP15;\n"
"        _c0030.z = _TMP1.z*(_TMP9 - _TMP10);\n"
"        _c0030 = _c0030*(OutputSize.y/InputSize.y);\n"
"        _tempColor = _tempColor + _c0030;\n"
"    } \n"
"    _tempColor = _tempColor - vec3( 8.74999985E-02, 8.74999985E-02, 8.74999985E-02);\n"
"    _tempColor = _tempColor*vec3( 1.09589040E+00, 1.09589040E+00, 1.09589040E+00);\n"
"    _ret_0 = vec4(_tempColor.x, _tempColor.y, _tempColor.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
