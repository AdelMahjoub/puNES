{
"#pragma parameter GRID_STRENGTH \"LCD Grid Strength\" 0.05 0.00 1.00 0.01\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float GRID_STRENGTH;\n"
"#else\n"
"#define GRID_STRENGTH 0.05\n"
"#endif\n"
"\n"
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _col;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 _texCoord_size;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texCoord_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"    vec2 _texture_size;\n"
"float _placeholder24;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _col;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0005;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _otexCoord;\n"
"    _r0005 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0005;\n"
"    _otexCoord = TexCoord.xy;\n"
"    gl_Position = _r0005;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _col;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"COMPAT_VARYING     vec2 _texCoord_size;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texCoord_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"    vec2 _texture_size;\n"
"float _placeholder30;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _col;\n"
"};\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"float _TMP21;\n"
"vec2 _TMP25;\n"
"vec4 _TMP17;\n"
"vec4 _TMP16;\n"
"vec2 _TMP15;\n"
"vec4 _TMP14;\n"
"vec4 _TMP13;\n"
"vec2 _TMP12;\n"
"vec4 _TMP11;\n"
"vec4 _TMP10;\n"
"vec2 _TMP9;\n"
"vec4 _TMP8;\n"
"vec4 _TMP7;\n"
"vec2 _TMP6;\n"
"float _TMP5;\n"
"float _TMP4;\n"
"float _TMP3;\n"
"float _TMP20;\n"
"float _TMP19;\n"
"float _TMP26;\n"
"float _TMP2;\n"
"float _TMP1;\n"
"float _TMP0;\n"
"float _TMP18;\n"
"input_dummy _IN1;\n"
"float _x0030;\n"
"float _x0032;\n"
"float _x0034;\n"
"float _TMP35;\n"
"float _x0036;\n"
"float _TMP41;\n"
"float _x0042;\n"
"float _z20048;\n"
"float _z40048;\n"
"float _z80048;\n"
"float _z20050;\n"
"float _z40050;\n"
"float _z80050;\n"
"float _TMP53;\n"
"float _x0054;\n"
"float _TMP59;\n"
"float _x0060;\n"
"float _z20066;\n"
"float _z40066;\n"
"float _z80066;\n"
"float _z20068;\n"
"float _z40068;\n"
"float _z80068;\n"
"float _x0070;\n"
"float _TMP71;\n"
"float _x0072;\n"
"float _TMP77;\n"
"float _x0078;\n"
"float _z20084;\n"
"float _z40084;\n"
"float _z80084;\n"
"float _z20086;\n"
"float _z40086;\n"
"float _z80086;\n"
"float _x0088;\n"
"float _TMP89;\n"
"float _x0090;\n"
"float _TMP95;\n"
"float _x0096;\n"
"float _z20102;\n"
"float _z40102;\n"
"float _z80102;\n"
"float _z20104;\n"
"float _z40104;\n"
"float _z80104;\n"
"float _x0106;\n"
"float _TMP107;\n"
"float _x0108;\n"
"float _TMP113;\n"
"float _x0114;\n"
"float _z20120;\n"
"float _z40120;\n"
"float _z80120;\n"
"float _z20122;\n"
"float _z40122;\n"
"float _z80122;\n"
"float _x0124;\n"
"float _TMP125;\n"
"float _x0126;\n"
"float _TMP131;\n"
"float _x0132;\n"
"float _z20138;\n"
"float _z40138;\n"
"float _z80138;\n"
"float _z20140;\n"
"float _z40140;\n"
"float _z80140;\n"
"vec2 _x0142;\n"
"vec2 _c0144;\n"
"vec2 _x0156;\n"
"vec2 _c0158;\n"
"vec2 _x0170;\n"
"vec2 _c0172;\n"
"vec2 _x0184;\n"
"vec2 _c0186;\n"
"vec2 _x0198;\n"
"vec2 _TMP199;\n"
"vec2 _b0200;\n"
"vec2 _x0200;\n"
"vec2 _a0200;\n"
"vec2 _TMP205;\n"
"vec2 _b0206;\n"
"vec2 _x0206;\n"
"vec2 _a0206;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform sampler2D Texture;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _texelSize;\n"
"    vec2 _subtexelSize;\n"
"    vec2 _range;\n"
"    float _left;\n"
"    float _top;\n"
"    float _right;\n"
"    float _bottom;\n"
"    vec4 _lcol;\n"
"    vec4 _rcol;\n"
"    float _subpix;\n"
"    float _rsubpix;\n"
"    vec4 _topLeftColor;\n"
"    vec4 _bottomRightColor;\n"
"    vec4 _bottomLeftColor;\n"
"    vec4 _topRightColor;\n"
"    vec2 _border;\n"
"    float _totalArea;\n"
"    vec4 _averageColor;\n"
"    output_dummy _OUT;\n"
"    _texelSize = 1.00000000E+00/TextureSize;\n"
"    _subtexelSize = _texelSize/vec2( 3.00000000E+00, 1.00000000E+00);\n"
"    _range = InputSize/(OutputSize*TextureSize);\n"
"    _left = TEX0.x - _texelSize.x*5.00000000E-01;\n"
"    _top = TEX0.y + _range.y;\n"
"    _right = TEX0.x + _texelSize.x*5.00000000E-01;\n"
"    _bottom = TEX0.y - _range.y;\n"
"    _x0030 = TEX0.x/_subtexelSize.x + 1.50000000E+00;\n"
"    _x0032 = _x0030/3.00000000E+00;\n"
"    _TMP18 = floor(_x0032);\n"
"    _subpix = _x0030 - 3.00000000E+00*_TMP18;\n"
"    _rsubpix = _range.x/_subtexelSize.x;\n"
"    _x0034 = _subpix + 1.00000000E+00;\n"
"    _x0036 = (_x0034 - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0036);\n"
"    _TMP35 = max(-1.00000000E+00, _TMP26);\n"
"    _x0042 = (_x0034 + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0042);\n"
"    _TMP41 = max(-1.00000000E+00, _TMP26);\n"
"    _z20048 = _TMP41*_TMP41;\n"
"    _z40048 = _z20048*_z20048;\n"
"    _z80048 = _z40048*_z40048;\n"
"    _TMP19 = (((((_TMP41 - 6.66666687E-01*_TMP41*_z20048) - 2.00000003E-01*_TMP41*_z40048) + 5.71428597E-01*_TMP41*_z20048*_z40048) - 1.11111112E-01*_TMP41*_z80048) - 1.81818187E-01*_TMP41*_z20048*_z80048) + 7.69230798E-02*_TMP41*_z40048*_z80048;\n"
"    _z20050 = _TMP35*_TMP35;\n"
"    _z40050 = _z20050*_z20050;\n"
"    _z80050 = _z40050*_z40050;\n"
"    _TMP20 = (((((_TMP35 - 6.66666687E-01*_TMP35*_z20050) - 2.00000003E-01*_TMP35*_z40050) + 5.71428597E-01*_TMP35*_z20050*_z40050) - 1.11111112E-01*_TMP35*_z80050) - 1.81818187E-01*_TMP35*_z20050*_z80050) + 7.69230798E-02*_TMP35*_z40050*_z80050;\n"
"    _TMP0 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _x0054 = (_subpix - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0054);\n"
"    _TMP53 = max(-1.00000000E+00, _TMP26);\n"
"    _x0060 = (_subpix + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0060);\n"
"    _TMP59 = max(-1.00000000E+00, _TMP26);\n"
"    _z20066 = _TMP59*_TMP59;\n"
"    _z40066 = _z20066*_z20066;\n"
"    _z80066 = _z40066*_z40066;\n"
"    _TMP19 = (((((_TMP59 - 6.66666687E-01*_TMP59*_z20066) - 2.00000003E-01*_TMP59*_z40066) + 5.71428597E-01*_TMP59*_z20066*_z40066) - 1.11111112E-01*_TMP59*_z80066) - 1.81818187E-01*_TMP59*_z20066*_z80066) + 7.69230798E-02*_TMP59*_z40066*_z80066;\n"
"    _z20068 = _TMP53*_TMP53;\n"
"    _z40068 = _z20068*_z20068;\n"
"    _z80068 = _z40068*_z40068;\n"
"    _TMP20 = (((((_TMP53 - 6.66666687E-01*_TMP53*_z20068) - 2.00000003E-01*_TMP53*_z40068) + 5.71428597E-01*_TMP53*_z20068*_z40068) - 1.11111112E-01*_TMP53*_z80068) - 1.81818187E-01*_TMP53*_z20068*_z80068) + 7.69230798E-02*_TMP53*_z40068*_z80068;\n"
"    _TMP1 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _x0070 = _subpix - 1.00000000E+00;\n"
"    _x0072 = (_x0070 - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0072);\n"
"    _TMP71 = max(-1.00000000E+00, _TMP26);\n"
"    _x0078 = (_x0070 + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0078);\n"
"    _TMP77 = max(-1.00000000E+00, _TMP26);\n"
"    _z20084 = _TMP77*_TMP77;\n"
"    _z40084 = _z20084*_z20084;\n"
"    _z80084 = _z40084*_z40084;\n"
"    _TMP19 = (((((_TMP77 - 6.66666687E-01*_TMP77*_z20084) - 2.00000003E-01*_TMP77*_z40084) + 5.71428597E-01*_TMP77*_z20084*_z40084) - 1.11111112E-01*_TMP77*_z80084) - 1.81818187E-01*_TMP77*_z20084*_z80084) + 7.69230798E-02*_TMP77*_z40084*_z80084;\n"
"    _z20086 = _TMP71*_TMP71;\n"
"    _z40086 = _z20086*_z20086;\n"
"    _z80086 = _z40086*_z40086;\n"
"    _TMP20 = (((((_TMP71 - 6.66666687E-01*_TMP71*_z20086) - 2.00000003E-01*_TMP71*_z40086) + 5.71428597E-01*_TMP71*_z20086*_z40086) - 1.11111112E-01*_TMP71*_z80086) - 1.81818187E-01*_TMP71*_z20086*_z80086) + 7.69230798E-02*_TMP71*_z40086*_z80086;\n"
"    _TMP2 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _lcol = vec4(_TMP0, _TMP1, _TMP2, 0.00000000E+00);\n"
"    _x0088 = _subpix - 2.00000000E+00;\n"
"    _x0090 = (_x0088 - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0090);\n"
"    _TMP89 = max(-1.00000000E+00, _TMP26);\n"
"    _x0096 = (_x0088 + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0096);\n"
"    _TMP95 = max(-1.00000000E+00, _TMP26);\n"
"    _z20102 = _TMP95*_TMP95;\n"
"    _z40102 = _z20102*_z20102;\n"
"    _z80102 = _z40102*_z40102;\n"
"    _TMP19 = (((((_TMP95 - 6.66666687E-01*_TMP95*_z20102) - 2.00000003E-01*_TMP95*_z40102) + 5.71428597E-01*_TMP95*_z20102*_z40102) - 1.11111112E-01*_TMP95*_z80102) - 1.81818187E-01*_TMP95*_z20102*_z80102) + 7.69230798E-02*_TMP95*_z40102*_z80102;\n"
"    _z20104 = _TMP89*_TMP89;\n"
"    _z40104 = _z20104*_z20104;\n"
"    _z80104 = _z40104*_z40104;\n"
"    _TMP20 = (((((_TMP89 - 6.66666687E-01*_TMP89*_z20104) - 2.00000003E-01*_TMP89*_z40104) + 5.71428597E-01*_TMP89*_z20104*_z40104) - 1.11111112E-01*_TMP89*_z80104) - 1.81818187E-01*_TMP89*_z20104*_z80104) + 7.69230798E-02*_TMP89*_z40104*_z80104;\n"
"    _TMP3 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _x0106 = _subpix - 3.00000000E+00;\n"
"    _x0108 = (_x0106 - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0108);\n"
"    _TMP107 = max(-1.00000000E+00, _TMP26);\n"
"    _x0114 = (_x0106 + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0114);\n"
"    _TMP113 = max(-1.00000000E+00, _TMP26);\n"
"    _z20120 = _TMP113*_TMP113;\n"
"    _z40120 = _z20120*_z20120;\n"
"    _z80120 = _z40120*_z40120;\n"
"    _TMP19 = (((((_TMP113 - 6.66666687E-01*_TMP113*_z20120) - 2.00000003E-01*_TMP113*_z40120) + 5.71428597E-01*_TMP113*_z20120*_z40120) - 1.11111112E-01*_TMP113*_z80120) - 1.81818187E-01*_TMP113*_z20120*_z80120) + 7.69230798E-02*_TMP113*_z40120*_z80120;\n"
"    _z20122 = _TMP107*_TMP107;\n"
"    _z40122 = _z20122*_z20122;\n"
"    _z80122 = _z40122*_z40122;\n"
"    _TMP20 = (((((_TMP107 - 6.66666687E-01*_TMP107*_z20122) - 2.00000003E-01*_TMP107*_z40122) + 5.71428597E-01*_TMP107*_z20122*_z40122) - 1.11111112E-01*_TMP107*_z80122) - 1.81818187E-01*_TMP107*_z20122*_z80122) + 7.69230798E-02*_TMP107*_z40122*_z80122;\n"
"    _TMP4 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _x0124 = _subpix - 4.00000000E+00;\n"
"    _x0126 = (_x0124 - _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0126);\n"
"    _TMP125 = max(-1.00000000E+00, _TMP26);\n"
"    _x0132 = (_x0124 + _rsubpix)/1.50000000E+00;\n"
"    _TMP26 = min(1.00000000E+00, _x0132);\n"
"    _TMP131 = max(-1.00000000E+00, _TMP26);\n"
"    _z20138 = _TMP131*_TMP131;\n"
"    _z40138 = _z20138*_z20138;\n"
"    _z80138 = _z40138*_z40138;\n"
"    _TMP19 = (((((_TMP131 - 6.66666687E-01*_TMP131*_z20138) - 2.00000003E-01*_TMP131*_z40138) + 5.71428597E-01*_TMP131*_z20138*_z40138) - 1.11111112E-01*_TMP131*_z80138) - 1.81818187E-01*_TMP131*_z20138*_z80138) + 7.69230798E-02*_TMP131*_z40138*_z80138;\n"
"    _z20140 = _TMP125*_TMP125;\n"
"    _z40140 = _z20140*_z20140;\n"
"    _z80140 = _z40140*_z40140;\n"
"    _TMP20 = (((((_TMP125 - 6.66666687E-01*_TMP125*_z20140) - 2.00000003E-01*_TMP125*_z40140) + 5.71428597E-01*_TMP125*_z20140*_z40140) - 1.11111112E-01*_TMP125*_z80140) - 1.81818187E-01*_TMP125*_z20140*_z80140) + 7.69230798E-02*_TMP125*_z40140*_z80140;\n"
"    _TMP5 = (1.50000000E+00*(_TMP19 - _TMP20))/(2.00000000E+00*_rsubpix);\n"
"    _rcol = vec4(_TMP3, _TMP4, _TMP5, 0.00000000E+00);\n"
"    _x0142 = vec2(_left, _top)/_texelSize;\n"
"    _TMP6 = floor(_x0142);\n"
"    _c0144 = (_TMP6 + 5.00000000E-01)*_texelSize;\n"
"    _TMP7 = COMPAT_TEXTURE(Texture, _c0144);\n"
"    _TMP21 = pow(_TMP7.x, 2.20000005E+00);\n"
"    _TMP22 = pow(_TMP7.y, 2.20000005E+00);\n"
"    _TMP23 = pow(_TMP7.z, 2.20000005E+00);\n"
"    _TMP24 = pow(_TMP7.w, 2.20000005E+00);\n"
"    _TMP8 = vec4(_TMP21, _TMP22, _TMP23, _TMP24);\n"
"    _topLeftColor = _TMP8*_lcol;\n"
"    _x0156 = vec2(_right, _bottom)/_texelSize;\n"
"    _TMP9 = floor(_x0156);\n"
"    _c0158 = (_TMP9 + 5.00000000E-01)*_texelSize;\n"
"    _TMP10 = COMPAT_TEXTURE(Texture, _c0158);\n"
"    _TMP21 = pow(_TMP10.x, 2.20000005E+00);\n"
"    _TMP22 = pow(_TMP10.y, 2.20000005E+00);\n"
"    _TMP23 = pow(_TMP10.z, 2.20000005E+00);\n"
"    _TMP24 = pow(_TMP10.w, 2.20000005E+00);\n"
"    _TMP11 = vec4(_TMP21, _TMP22, _TMP23, _TMP24);\n"
"    _bottomRightColor = _TMP11*_rcol;\n"
"    _x0170 = vec2(_left, _bottom)/_texelSize;\n"
"    _TMP12 = floor(_x0170);\n"
"    _c0172 = (_TMP12 + 5.00000000E-01)*_texelSize;\n"
"    _TMP13 = COMPAT_TEXTURE(Texture, _c0172);\n"
"    _TMP21 = pow(_TMP13.x, 2.20000005E+00);\n"
"    _TMP22 = pow(_TMP13.y, 2.20000005E+00);\n"
"    _TMP23 = pow(_TMP13.z, 2.20000005E+00);\n"
"    _TMP24 = pow(_TMP13.w, 2.20000005E+00);\n"
"    _TMP14 = vec4(_TMP21, _TMP22, _TMP23, _TMP24);\n"
"    _bottomLeftColor = _TMP14*_lcol;\n"
"    _x0184 = vec2(_right, _top)/_texelSize;\n"
"    _TMP15 = floor(_x0184);\n"
"    _c0186 = (_TMP15 + 5.00000000E-01)*_texelSize;\n"
"    _TMP16 = COMPAT_TEXTURE(Texture, _c0186);\n"
"    _TMP21 = pow(_TMP16.x, 2.20000005E+00);\n"
"    _TMP22 = pow(_TMP16.y, 2.20000005E+00);\n"
"    _TMP23 = pow(_TMP16.z, 2.20000005E+00);\n"
"    _TMP24 = pow(_TMP16.w, 2.20000005E+00);\n"
"    _TMP17 = vec4(_TMP21, _TMP22, _TMP23, _TMP24);\n"
"    _topRightColor = _TMP17*_rcol;\n"
"    _x0198 = TEX0.xy/_subtexelSize + 5.00000000E-01;\n"
"    _border = floor(_x0198);\n"
"    _x0200 = (_border + vec2( 0.00000000E+00, GRID_STRENGTH))*_subtexelSize;\n"
"    _a0200 = vec2(_left, _bottom);\n"
"    _b0200 = vec2(_right, _top);\n"
"    _TMP25 = min(_b0200, _x0200);\n"
"    _TMP199 = max(_a0200, _TMP25);\n"
"    _x0206 = (_border + vec2( 0.00000000E+00, -GRID_STRENGTH))*_subtexelSize;\n"
"    _a0206 = vec2(_left, _bottom);\n"
"    _b0206 = vec2(_right, _top);\n"
"    _TMP25 = min(_b0206, _x0206);\n"
"    _TMP205 = max(_a0206, _TMP25);\n"
"    _totalArea = 2.00000000E+00*_range.y;\n"
"    _averageColor = ((_top - _TMP199.y)/_totalArea)*_topLeftColor;\n"
"    _averageColor = _averageColor + ((_TMP205.y - _bottom)/_totalArea)*_bottomRightColor;\n"
"    _averageColor = _averageColor + ((_TMP205.y - _bottom)/_totalArea)*_bottomLeftColor;\n"
"    _averageColor = _averageColor + ((_top - _TMP199.y)/_totalArea)*_topRightColor;\n"
"    _TMP21 = pow(_averageColor.x, 4.54545438E-01);\n"
"    _TMP22 = pow(_averageColor.y, 4.54545438E-01);\n"
"    _TMP23 = pow(_averageColor.z, 4.54545438E-01);\n"
"    _TMP24 = pow(_averageColor.w, 4.54545438E-01);\n"
"    _OUT._col = vec4(_TMP21, _TMP22, _TMP23, _TMP24);\n"
"    FragColor = _OUT._col;\n"
"    return;\n"
"} \n"
"#endif\n"
},
