{
"#pragma parameter display_gamma \"Display Gamma\" 2.2 0.0 10.0 0.1\n"
"#pragma parameter target_gamma \"Target Gamma\" 2.2 0.0 10.0 0.1\n"
"#pragma parameter sat \"Saturation\" 1.0 0.0 3.0 0.01\n"
"#pragma parameter lum \"Luminance\" 1.0 0.0 5.0 0.01\n"
"#pragma parameter cntrst \"Contrast\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter r \"Red\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter g \"Green\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter b \"Blue\" 1.0 0.0 2.0 0.01\n"
"#pragma parameter rg \"Red-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter rb \"Red-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter gr \"Green-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter gb \"Green-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter br \"Blue-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter bg \"Blue-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blr \"Black-Red Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blg \"Black-Green Tint\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter blb \"Black-Blue Tint\" 0.0 0.0 1.0 0.005\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float display_gamma;\n"
"uniform float target_gamma;\n"
"uniform float sat;\n"
"uniform float lum;\n"
"uniform float cntrst;\n"
"uniform float blr;\n"
"uniform float blg;\n"
"uniform float blb;\n"
"uniform float r;\n"
"uniform float g;\n"
"uniform float b;\n"
"uniform float rg;\n"
"uniform float rb;\n"
"uniform float gr;\n"
"uniform float gb;\n"
"uniform float br;\n"
"uniform float bg;\n"
"#else\n"
"#define display_gamma 2.2\n"
"#define target_gamma 2.2\n"
"#define sat 1.0\n"
"#define lum 1.0\n"
"#define cntrst 1.0\n"
"#define blr 0.0\n"
"#define blg 0.0\n"
"#define blb 0.0\n"
"#define r 1.0\n"
"#define g 1.0\n"
"#define b 1.0\n"
"#define rg 0.0\n"
"#define rb 0.0\n"
"#define gr 0.0\n"
"#define gb 0.0\n"
"#define br 0.0\n"
"#define bg 0.0\n"
"#endif\n"
"\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"\n"
"vec4 _oPosition1; \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _otexCoord;\n"
"    gl_Position = VertexCoord.x * MVPMatrix[0] + VertexCoord.y * MVPMatrix[1] + VertexCoord.z * MVPMatrix[2] + VertexCoord.w * MVPMatrix[3];\n"
"    _oPosition1 = gl_Position;\n"
"    _oColor = COLOR;\n"
"    _otexCoord = TexCoord.xy;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = TexCoord.xy;\n"
"}\n"
"\n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"uniform sampler2D Texture;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"//standard texture sample looks like this: COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"\n"
"void main()\n"
"{\n"
"    output_dummy _OUT;\n"
"\n"
"vec4 screen = pow(COMPAT_TEXTURE(Texture, TEX0.xy), vec4(target_gamma)).rgba; //sample image in linear colorspace\n"
"vec4 avglum = vec4(0.5);\n"
"screen = mix(screen, avglum, (1.0 - cntrst));\n"
"\n"
"mat4 color = mat4(\n"
"r,  gr,  br, blr,\n"
"rg,   g,  bg, blg,\n"
"rb,  gb,   b, blb,\n"
"0.0, 0.0, 0.0, 1.0);\n"
"			  \n"
"mat4 adjust = mat4(\n"
"(1.0 - sat) * 0.3086 + sat, (1.0 - sat) * 0.6094, (1.0 - sat) * 0.0820, 0.0,\n"
"(1.0 - sat) * 0.3086, (1.0 - sat) * 0.6094 + sat, (1.0 - sat) * 0.0820, 0.0,\n"
"(1.0 - sat) * 0.3086, (1.0 - sat) * 0.6094, (1.0 - sat) * 0.0820 + sat, 0.0,\n"
"1.0, 1.0, 1.0, 1.0);\n"
"\n"
"color *= adjust;\n"
"screen = clamp(screen * lum, 0.0, 1.0);\n"
"screen = screen * color;\n"
"screen = pow(screen, vec4(1.0 / display_gamma));\n"
"\n"
"    _OUT._color = screen;\n"
"    FragColor = _OUT._color;\n"
"    return;\n"
"} \n"
"#endif\n"
},
