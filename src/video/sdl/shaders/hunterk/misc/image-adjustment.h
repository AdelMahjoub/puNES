{
"#pragma parameter target_gamma \"Target Gamma\" 2.4 0.1 5.0 0.1\n"
"#pragma parameter monitor_gamma \"Monitor Gamma\" 2.2 0.1 5.0 0.1\n"
"#pragma parameter overscan_percent_x \"Horizontal Overscan %\" 0.0 -25.0 25.0 1.0\n"
"#pragma parameter overscan_percent_y \"Vertical Overscan %\" 0.0 -25.0 25.0 1.0\n"
"#pragma parameter saturation \"Saturation\" 1.0 0.0 5.0 0.1\n"
"#pragma parameter contrast \"Contrast\" 1.0 0.0 7.5 0.1\n"
"#pragma parameter luminance \"Luminance\" 1.0 0.0 2.0 0.1\n"
"#pragma parameter bright_boost \"Brightness Boost\" 0.0 -1.0 1.0 0.1\n"
"#pragma parameter R \"Red Channel\" 1.0 0.0 2.0 0.05\n"
"#pragma parameter G \"Green Channel\" 1.0 0.0 2.0 0.05\n"
"#pragma parameter B \"Blue Channel\" 1.0 0.0 2.0 0.05\n"
"#pragma parameter ZOOM \"Zoom Factor\" 1.0 0.0 4.0 0.01\n"
"#pragma parameter XPOS \"X Modifier\" 0.0 -2.0 2.0 0.005\n"
"#pragma parameter YPOS \"Y Modifier\" 0.0 -2.0 2.0 0.005\n"
"#pragma parameter V_OSMASK \"Overscan Mask Y\" 0.0 0.0 1.0 0.005\n"
"#pragma parameter H_OSMASK \"Overscan Mask X\" 0.0 0.0 1.0 0.005\n"
"#ifdef PARAMETER_UNIFORM\n"
"uniform float target_gamma;\n"
"uniform float monitor_gamma;\n"
"uniform float overscan_percent_x;\n"
"uniform float overscan_percent_y;\n"
"uniform float saturation;\n"
"uniform float contrast;\n"
"uniform float luminance;\n"
"uniform float bright_boost;\n"
"uniform float R;\n"
"uniform float G;\n"
"uniform float B;\n"
"uniform float ZOOM;\n"
"uniform float XPOS;\n"
"uniform float YPOS;\n"
"uniform float V_OSMASK;\n"
"uniform float H_OSMASK;\n"
"#else\n"
"#define overscan_percent_x 0.0         // crop width of image by X%; default is 0.0\n"
"#define overscan_percent_y 0.0         // crop height of image by X%; default is 0.0\n"
"#define saturation 1.0                 // color saturation; default 1.0\n"
"#define monitor_gamma 2.2              // gamma setting of your current display; LCD monitors typically have a gamma of 2.2\n"
"#define target_gamma 2.4               // the gamma you want the image to have; CRT TVs typically have a gamma of 2.4\n"
"#define contrast 1.0                   // image contrast; default 1.0\n"
"#define luminance 1.0                  // image luminance; default 1.0\n"
"#define bright_boost 0.0               // adds to the total brightness. Negative values decrease it; Use values between 1.0 (totally white) and -1.0 (totally black); default is 0.0\n"
"#define R 1.0\n"
"#define G 1.0\n"
"#define B 1.0\n"
"#define ZOOM 1.0\n"
"#define XPOS 0.0\n"
"#define YPOS 0.0\n"
"#define V_OSMASK 0.0\n"
"#define H_OSMASK 0.0\n"
"#endif\n"
"\n"
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color1;\n"
"};\n"
"vec4 _oPosition1;\n"
"input_dummy _IN1;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _otexCoord;\n"
"    vec2 _shift;\n"
"    vec2 _overscan_coord;\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0006;\n"
"    _oColor = COLOR;\n"
"    _shift = (5.00000000E-01*InputSize)/TextureSize;\n"
"    _overscan_coord = ((TexCoord.xy - _shift) / ZOOM) * (1.0 - vec2(overscan_percent_x / 100.0, overscan_percent_y / 100.0)) + _shift;\n"
"    _otexCoord = _overscan_coord;\n"
"    gl_Position = _r0006;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _overscan_coord + vec2(XPOS, YPOS);\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec4 _color;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct output_dummy {\n"
"    vec4 _color;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP5;\n"
"float _TMP4;\n"
"float _TMP3;\n"
"float _TMP2;\n"
"float _TMP1;\n"
"vec4 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec3 _TMP29;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"\n"
"vec3 grayscale(vec3 col)\n"
"{\n"
"   // ATSC grayscale standard\n"
"   return vec3(dot(col, vec3(0.2126, 0.7152, 0.0722)));\n"
"}\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 fragcoord;\n"
"    vec3 res;\n"
"	vec3 gamma;\n"
"	vec3 AvgLumin;\n"
"	vec3 intensity;\n"
"	vec3 satColor;\n"
"	vec3 conColor;\n"
"\n"
"    fragcoord = TEX0.xy*(TextureSize.xy/InputSize.xy);\n"
"    res = COMPAT_TEXTURE(Texture, TEX0.xy).rgb;\n"
"	gamma = vec3(monitor_gamma / target_gamma); // setup ratio of display's gamma vs desired gamma\n"
"	AvgLumin = vec3(0.5);\n"
"	intensity = grayscale(res); // find luminance\n"
"	satColor = mix(intensity, res, saturation); // apply saturation\n"
"	conColor = mix(AvgLumin, satColor, contrast);	// apply contrast\n"
"	conColor = pow(conColor, 1.0 / vec3(gamma)); // Apply gamma correction\n"
"	conColor = clamp(conColor * luminance, 0.0, 1.0); // apply luminance\n"
"	conColor += vec3(bright_boost); // apply brightboost\n"
"	conColor *= vec3(R, G, B); // apply color channel adjustment\n"
"\n"
"    if (fragcoord.y > V_OSMASK && fragcoord.y < (1.00000000E+00 - V_OSMASK)) { \n"
"    } else {\n"
"        conColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    } \n"
"    if (fragcoord.x > H_OSMASK && fragcoord.x < (1.00000000E+00 - H_OSMASK)) { \n"
"    } else {\n"
"        conColor = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    } \n"
"    _ret_0 = vec4(conColor.x, conColor.y, conColor.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
