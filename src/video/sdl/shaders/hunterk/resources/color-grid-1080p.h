{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"input_dummy _IN1;\n"
"vec4 _r0006;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_ATTRIBUTE vec4 LUTTexCoord;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _oTex;\n"
"    vec2 _otex_border;\n"
"    vec2 _scale;\n"
"    vec2 _middle;\n"
"    vec2 _diff;\n"
"    vec2 _dist;\n"
"    _r0006 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0006;\n"
"    _oColor = COLOR;\n"
"    _scale = (OutputSize/vec2( 3.20000000E+02, 2.40000000E+02))/4.00000000E+00;\n"
"    _middle = (5.00000000E-01*InputSize)/TextureSize;\n"
"    _diff = TexCoord.xy - _middle;\n"
"    _oTex = _middle + _diff*_scale;\n"
"    _dist = LUTTexCoord.xy - vec2( 4.99989986E-01, 4.99989986E-01);\n"
"    _otex_border = vec2( 4.99989986E-01, 4.99989986E-01) + (_dist*OutputSize)/vec2( 1.92000000E+03, 1.08000000E+03);\n"
"    gl_Position = _r0006;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _oTex;\n"
"    TEX1.xy = _otex_border;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count1;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec4 _TMP6;\n"
"vec2 _TMP5;\n"
"vec2 _TMP12;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"vec3 _TMP4;\n"
"float _TMP9;\n"
"float _TMP8;\n"
"float _TMP7;\n"
"float _TMP3;\n"
"float _TMP2;\n"
"float _TMP1;\n"
"vec2 _TMP0;\n"
"uniform sampler2D Texture;\n"
"uniform sampler2D bg;\n"
"input_dummy _IN1;\n"
"vec2 _x0019;\n"
"float _a0025;\n"
"vec3 _x0027;\n"
"vec2 _x0035;\n"
"vec2 _x0041;\n"
"vec2 _x0043;\n"
"vec2 _TMP44;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _px;\n"
"    float _id;\n"
"    vec3 _co;\n"
"    vec2 _pa;\n"
"    vec4 _colorgrid;\n"
"    vec4 _frame;\n"
"    vec4 _background;\n"
"    vec3 _TMP17;\n"
"    _px = (1.00000000E+03*(-TextureSize.xy + 8.00000000E+00*(TEX0.xy*(TextureSize.xy/InputSize.xy)).xy))/TextureSize.y;\n"
"    _x0019 = _px + 5.00000000E-01;\n"
"    _TMP0 = floor(_x0019);\n"
"    _TMP1 = dot(_TMP0, vec2( 1.13099998E+02, 1.78099995E+01));\n"
"    _TMP2 = sin(_TMP1);\n"
"    _a0025 = float(FrameCount)*9.99999978E-03*4.00000000E+00 + _TMP2*4.37585469E+04;\n"
"    _TMP3 = cos(_a0025);\n"
"    _id = 5.00000000E-01 + 5.00000000E-01*_TMP3;\n"
"    _x0027 = (float(FrameCount)*9.99999978E-03 + 3.50000000E+00*_id) + vec3( 0.00000000E+00, 1.57000005E+00, 3.14000010E+00);\n"
"    _TMP7 = cos(_x0027.x);\n"
"    _TMP8 = cos(_x0027.y);\n"
"    _TMP9 = cos(_x0027.z);\n"
"    _TMP4 = vec3(_TMP7, _TMP8, _TMP9);\n"
"    _co = 5.00000000E-01 + 5.00000000E-01*_TMP4;\n"
"    _x0035 = 6.28310013E+00*_px;\n"
"    _TMP10 = cos(_x0035.x);\n"
"    _TMP11 = cos(_x0035.y);\n"
"    _TMP5 = vec2(_TMP10, _TMP11);\n"
"    _x0041 = _id*(5.00000000E-01 + 5.00000000E-01*_TMP5);\n"
"    _x0043 = _x0041/vec2( 2.00000003E-01, 2.00000003E-01);\n"
"    _TMP12 = min(vec2( 1.00000000E+00, 1.00000000E+00), _x0043);\n"
"    _TMP44 = max(vec2( 0.00000000E+00, 0.00000000E+00), _TMP12);\n"
"    _pa = _TMP44*_TMP44*(vec2( 3.00000000E+00, 3.00000000E+00) - 2.00000000E+00*_TMP44);\n"
"    _TMP17 = _co*_pa.x*_pa.y;\n"
"    _colorgrid = vec4(_TMP17.x, _TMP17.y, _TMP17.z, 1.00000000E+00);\n"
"    _frame = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _TMP6 = COMPAT_TEXTURE(bg, TEX1.xy);\n"
"    _background = vec4(_TMP6.x, _TMP6.y, _TMP6.z, _TMP6.w);\n"
"    _ret_0 = _frame + _background.w*(_colorgrid - _frame);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
