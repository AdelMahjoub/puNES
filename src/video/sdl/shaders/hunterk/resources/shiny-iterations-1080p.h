{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"input_dummy _IN1;\n"
"vec4 _r0008;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_ATTRIBUTE vec4 LUTTexCoord;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _oTex;\n"
"    vec2 _otex_border;\n"
"    vec2 _scale;\n"
"    vec2 _middle;\n"
"    vec2 _diff;\n"
"    vec2 _dist;\n"
"    _r0008 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0008;\n"
"    _oColor = COLOR;\n"
"    _scale = (OutputSize/vec2( 3.20000000E+02, 2.40000000E+02))/4.00000000E+00;\n"
"    _middle = (5.00000000E-01*InputSize)/TextureSize;\n"
"    _diff = TexCoord.xy - _middle;\n"
"    _oTex = _middle + _diff*_scale;\n"
"    _dist = LUTTexCoord.xy - vec2( 4.99989986E-01, 4.99989986E-01);\n"
"    _otex_border = vec2( 4.99989986E-01, 4.99989986E-01) + (_dist*OutputSize)/vec2( 1.92000000E+03, 1.08000000E+03);\n"
"    gl_Position = _r0008;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _oTex;\n"
"    TEX1.xy = _otex_border;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec4 _TMP25;\n"
"float _TMP24;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"float _TMP30;\n"
"float _TMP29;\n"
"float _TMP28;\n"
"float _TMP21;\n"
"float _TMP20;\n"
"float _TMP19;\n"
"float _TMP18;\n"
"float _TMP35;\n"
"float _TMP34;\n"
"float _TMP31;\n"
"float _TMP33;\n"
"float _TMP32;\n"
"vec2 _TMP16;\n"
"vec2 _TMP15;\n"
"float _TMP27;\n"
"float _TMP26;\n"
"vec2 _TMP14;\n"
"float _TMP13;\n"
"vec2 _TMP11;\n"
"vec2 _TMP10;\n"
"vec2 _TMP9;\n"
"float _TMP8;\n"
"vec2 _TMP6;\n"
"vec2 _TMP5;\n"
"vec2 _TMP4;\n"
"float _TMP3;\n"
"uniform sampler2D Texture;\n"
"uniform sampler2D bg;\n"
"input_dummy _IN1;\n"
"vec2 _x0046;\n"
"vec2 _x0052;\n"
"vec2 _x0058;\n"
"vec2 _a0064;\n"
"vec2 _b0064;\n"
"float _y0066;\n"
"float _x0066;\n"
"float _t30068;\n"
"float _t10068;\n"
"float _t00068;\n"
"float _t40068;\n"
"vec2 _x0084;\n"
"vec2 _x0090;\n"
"vec2 _x0096;\n"
"vec2 _a0102;\n"
"vec2 _b0102;\n"
"float _y0104;\n"
"float _x0104;\n"
"float _t30106;\n"
"float _t10106;\n"
"float _t00106;\n"
"float _t40106;\n"
"vec2 _x0122;\n"
"vec2 _x0128;\n"
"vec2 _x0134;\n"
"vec2 _a0140;\n"
"vec2 _b0140;\n"
"float _y0142;\n"
"float _x0142;\n"
"float _t30144;\n"
"float _t10144;\n"
"float _t00144;\n"
"float _t40144;\n"
"vec3 _TMP159;\n"
"float _a0164;\n"
"float _x0168;\n"
"float _TMP169;\n"
"vec3 _TMP175;\n"
"vec3 _v0182;\n"
"float _TMP189;\n"
"float _x0190;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _pc;\n"
"    vec2 _pa;\n"
"    vec2 _pb;\n"
"    vec2 _zc;\n"
"    vec3 _fc;\n"
"    int _i1;\n"
"    float _d1;\n"
"    vec2 _za;\n"
"    vec3 _fa;\n"
"    int _i2;\n"
"    float _d2;\n"
"    vec2 _zb;\n"
"    vec3 _fb;\n"
"    int _i3;\n"
"    float _d3;\n"
"    vec3 _col;\n"
"    vec3 _nor;\n"
"    vec4 _effect;\n"
"    vec4 _frame;\n"
"    vec4 _background;\n"
"    _TMP3 = min(TextureSize.y, TextureSize.x);\n"
"    _pc = (2.00000000E+03*(TEX0.xy*(TextureSize.xy/InputSize.xy)).xy - TextureSize.xy)/_TMP3;\n"
"    _pa = _pc + vec2( 3.99999991E-02, 0.00000000E+00);\n"
"    _pb = _pc + vec2( 0.00000000E+00, 3.99999991E-02);\n"
"    _zc = _pc;\n"
"    _fc = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _i1 = 0;\n"
"    for (; _i1 < 8; _i1 = _i1 + 1) { \n"
"        _x0046 = _zc.yx + float(FrameCount)*9.99999978E-03*5.00000000E+00;\n"
"        _TMP26 = cos(_x0046.x);\n"
"        _TMP27 = cos(_x0046.y);\n"
"        _TMP4 = vec2(_TMP26, _TMP27);\n"
"        _x0052 = _zc.yx + _TMP4;\n"
"        _TMP26 = cos(_x0052.x);\n"
"        _TMP27 = cos(_x0052.y);\n"
"        _TMP5 = vec2(_TMP26, _TMP27);\n"
"        _x0058 = _zc.yx + _TMP5;\n"
"        _TMP26 = cos(_x0058.x);\n"
"        _TMP27 = cos(_x0058.y);\n"
"        _TMP6 = vec2(_TMP26, _TMP27);\n"
"        _zc = _zc + _TMP6;\n"
"        _a0064 = _zc - _pc;\n"
"        _b0064 = _zc - _pc;\n"
"        _d1 = dot(_a0064, _b0064);\n"
"        _fc.x = _fc.x + 1.00000000E+00/(1.00000000E+00 + _d1);\n"
"        _fc.y = _fc.y + _d1;\n"
"        _y0066 = _zc.y - _pc.y;\n"
"        _x0066 = _zc.x - _pc.x;\n"
"        _t30068 = abs(_x0066);\n"
"        _t10068 = abs(_y0066);\n"
"        _t00068 = max(_t30068, _t10068);\n"
"        _t10068 = min(_t30068, _t10068);\n"
"        _t30068 = 1.00000000E+00/_t00068;\n"
"        _t30068 = _t10068*_t30068;\n"
"        _t40068 = _t30068*_t30068;\n"
"        _t00068 = -1.34804696E-02*_t40068 + 5.74773103E-02;\n"
"        _t00068 = _t00068*_t40068 - 1.21239103E-01;\n"
"        _t00068 = _t00068*_t40068 + 1.95635900E-01;\n"
"        _t00068 = _t00068*_t40068 - 3.32994610E-01;\n"
"        _t00068 = _t00068*_t40068 + 9.99995589E-01;\n"
"        _t30068 = _t00068*_t30068;\n"
"        _TMP32 = abs(_y0066);\n"
"        _TMP33 = abs(_x0066);\n"
"        if (_TMP32 > _TMP33) { \n"
"            _TMP31 = 1.57079601E+00 - _t30068;\n"
"        } else {\n"
"            _TMP31 = _t30068;\n"
"        } \n"
"        if (_x0066 < 0.00000000E+00) { \n"
"            _TMP34 = 3.14159298E+00 - _TMP31;\n"
"        } else {\n"
"            _TMP34 = _TMP31;\n"
"        } \n"
"        if (_y0066 < 0.00000000E+00) { \n"
"            _TMP35 = -_TMP34;\n"
"        } else {\n"
"            _TMP35 = _TMP34;\n"
"        } \n"
"        _TMP8 = sin(_TMP35);\n"
"        _fc.z = _fc.z + _TMP8;\n"
"    } \n"
"    _fc = _fc/8.00000000E+00;\n"
"    _za = _pa;\n"
"    _fa = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _i2 = 0;\n"
"    for (; _i2 < 8; _i2 = _i2 + 1) { \n"
"        _x0084 = _za.yx + float(FrameCount)*9.99999978E-03*5.00000000E+00;\n"
"        _TMP26 = cos(_x0084.x);\n"
"        _TMP27 = cos(_x0084.y);\n"
"        _TMP9 = vec2(_TMP26, _TMP27);\n"
"        _x0090 = _za.yx + _TMP9;\n"
"        _TMP26 = cos(_x0090.x);\n"
"        _TMP27 = cos(_x0090.y);\n"
"        _TMP10 = vec2(_TMP26, _TMP27);\n"
"        _x0096 = _za.yx + _TMP10;\n"
"        _TMP26 = cos(_x0096.x);\n"
"        _TMP27 = cos(_x0096.y);\n"
"        _TMP11 = vec2(_TMP26, _TMP27);\n"
"        _za = _za + _TMP11;\n"
"        _a0102 = _za - _pa;\n"
"        _b0102 = _za - _pa;\n"
"        _d2 = dot(_a0102, _b0102);\n"
"        _fa.x = _fa.x + 1.00000000E+00/(1.00000000E+00 + _d2);\n"
"        _fa.y = _fa.y + _d2;\n"
"        _y0104 = _za.y - _pa.y;\n"
"        _x0104 = _za.x - _pa.x;\n"
"        _t30106 = abs(_x0104);\n"
"        _t10106 = abs(_y0104);\n"
"        _t00106 = max(_t30106, _t10106);\n"
"        _t10106 = min(_t30106, _t10106);\n"
"        _t30106 = 1.00000000E+00/_t00106;\n"
"        _t30106 = _t10106*_t30106;\n"
"        _t40106 = _t30106*_t30106;\n"
"        _t00106 = -1.34804696E-02*_t40106 + 5.74773103E-02;\n"
"        _t00106 = _t00106*_t40106 - 1.21239103E-01;\n"
"        _t00106 = _t00106*_t40106 + 1.95635900E-01;\n"
"        _t00106 = _t00106*_t40106 - 3.32994610E-01;\n"
"        _t00106 = _t00106*_t40106 + 9.99995589E-01;\n"
"        _t30106 = _t00106*_t30106;\n"
"        _TMP32 = abs(_y0104);\n"
"        _TMP33 = abs(_x0104);\n"
"        if (_TMP32 > _TMP33) { \n"
"            _TMP31 = 1.57079601E+00 - _t30106;\n"
"        } else {\n"
"            _TMP31 = _t30106;\n"
"        } \n"
"        if (_x0104 < 0.00000000E+00) { \n"
"            _TMP34 = 3.14159298E+00 - _TMP31;\n"
"        } else {\n"
"            _TMP34 = _TMP31;\n"
"        } \n"
"        if (_y0104 < 0.00000000E+00) { \n"
"            _TMP35 = -_TMP34;\n"
"        } else {\n"
"            _TMP35 = _TMP34;\n"
"        } \n"
"        _TMP13 = sin(_TMP35);\n"
"        _fa.z = _fa.z + _TMP13;\n"
"    } \n"
"    _fa = _fa/8.00000000E+00;\n"
"    _zb = _pb;\n"
"    _fb = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _i3 = 0;\n"
"    for (; _i3 < 8; _i3 = _i3 + 1) { \n"
"        _x0122 = _zb.yx + float(FrameCount)*9.99999978E-03*5.00000000E+00;\n"
"        _TMP26 = cos(_x0122.x);\n"
"        _TMP27 = cos(_x0122.y);\n"
"        _TMP14 = vec2(_TMP26, _TMP27);\n"
"        _x0128 = _zb.yx + _TMP14;\n"
"        _TMP26 = cos(_x0128.x);\n"
"        _TMP27 = cos(_x0128.y);\n"
"        _TMP15 = vec2(_TMP26, _TMP27);\n"
"        _x0134 = _zb.yx + _TMP15;\n"
"        _TMP26 = cos(_x0134.x);\n"
"        _TMP27 = cos(_x0134.y);\n"
"        _TMP16 = vec2(_TMP26, _TMP27);\n"
"        _zb = _zb + _TMP16;\n"
"        _a0140 = _zb - _pb;\n"
"        _b0140 = _zb - _pb;\n"
"        _d3 = dot(_a0140, _b0140);\n"
"        _fb.x = _fb.x + 1.00000000E+00/(1.00000000E+00 + _d3);\n"
"        _fb.y = _fb.y + _d3;\n"
"        _y0142 = _zb.y - _pb.y;\n"
"        _x0142 = _zb.x - _pb.x;\n"
"        _t30144 = abs(_x0142);\n"
"        _t10144 = abs(_y0142);\n"
"        _t00144 = max(_t30144, _t10144);\n"
"        _t10144 = min(_t30144, _t10144);\n"
"        _t30144 = 1.00000000E+00/_t00144;\n"
"        _t30144 = _t10144*_t30144;\n"
"        _t40144 = _t30144*_t30144;\n"
"        _t00144 = -1.34804696E-02*_t40144 + 5.74773103E-02;\n"
"        _t00144 = _t00144*_t40144 - 1.21239103E-01;\n"
"        _t00144 = _t00144*_t40144 + 1.95635900E-01;\n"
"        _t00144 = _t00144*_t40144 - 3.32994610E-01;\n"
"        _t00144 = _t00144*_t40144 + 9.99995589E-01;\n"
"        _t30144 = _t00144*_t30144;\n"
"        _TMP32 = abs(_y0142);\n"
"        _TMP33 = abs(_x0142);\n"
"        if (_TMP32 > _TMP33) { \n"
"            _TMP31 = 1.57079601E+00 - _t30144;\n"
"        } else {\n"
"            _TMP31 = _t30144;\n"
"        } \n"
"        if (_x0142 < 0.00000000E+00) { \n"
"            _TMP34 = 3.14159298E+00 - _TMP31;\n"
"        } else {\n"
"            _TMP34 = _TMP31;\n"
"        } \n"
"        if (_y0142 < 0.00000000E+00) { \n"
"            _TMP35 = -_TMP34;\n"
"        } else {\n"
"            _TMP35 = _TMP34;\n"
"        } \n"
"        _TMP18 = sin(_TMP35);\n"
"        _fb.z = _fb.z + _TMP18;\n"
"    } \n"
"    _fb = _fb/8.00000000E+00;\n"
"    _TMP159 = vec3( 7.99999982E-02, 1.99999996E-02, 1.50000006E-01) + _fc.x*vec3( 5.20000041E-01, 1.08000004E+00, 1.45000005E+00);\n"
"    _a0164 = 9.99999978E-03*float(FrameCount)*5.00000000E+00;\n"
"    _TMP19 = cos(_a0164);\n"
"    _x0168 = _TMP19 - -5.00000000E-01;\n"
"    _TMP30 = min(1.00000000E+00, _x0168);\n"
"    _TMP169 = max(0.00000000E+00, _TMP30);\n"
"    _TMP20 = _TMP169*_TMP169*(3.00000000E+00 - 2.00000000E+00*_TMP169);\n"
"    _TMP175 = _TMP159 + _TMP20*(_TMP159.zxy - _TMP159);\n"
"    _col = _TMP175*(1.50000006E-01*_fc.y);\n"
"    _TMP21 = abs(_fc.z);\n"
"    _col = _col + (4.00000006E-01*_TMP21 - 1.00000001E-01);\n"
"    _v0182 = vec3(_fa.x - _fc.x, 9.99999978E-03, _fb.x - _fc.x);\n"
"    _TMP28 = dot(_v0182, _v0182);\n"
"    _TMP29 = inversesqrt(_TMP28);\n"
"    _nor = _TMP29*_v0182;\n"
"    _TMP22 = dot(_nor, vec3( 5.77300012E-01, 5.77300012E-01, 5.77300012E-01));\n"
"    _x0190 = 5.00000000E-01 + 5.00000000E-01*_TMP22;\n"
"    _TMP30 = min(1.00000000E+00, _x0190);\n"
"    _TMP189 = max(0.00000000E+00, _TMP30);\n"
"    _col = _col*(1.00000000E+00 + (6.99999988E-01*_TMP189)*_col);\n"
"    _TMP23 = pow(_nor.y, 1.28000000E+02);\n"
"    _col = _col + 3.00000012E-01*_TMP23;\n"
"    _TMP24 = length(_pc);\n"
"    _col = _col*(1.00000000E+00 - 1.00000001E-01*_TMP24);\n"
"    _effect = vec4(_col.x, _col.y, _col.z, 1.00000000E+00);\n"
"    _frame = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _TMP25 = COMPAT_TEXTURE(bg, TEX1.xy);\n"
"    _background = vec4(_TMP25.x, _TMP25.y, _TMP25.z, _TMP25.w);\n"
"    _ret_0 = _frame + _background.w*(_effect - _frame);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
