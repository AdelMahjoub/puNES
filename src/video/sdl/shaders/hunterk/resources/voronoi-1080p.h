{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying \n"
"#define COMPAT_ATTRIBUTE attribute \n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"input_dummy _IN1;\n"
"vec4 _r0008;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_ATTRIBUTE vec4 LUTTexCoord;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _oTex;\n"
"    vec2 _otex_border;\n"
"    vec2 _scale;\n"
"    vec2 _middle;\n"
"    vec2 _diff;\n"
"    vec2 _dist;\n"
"    _r0008 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0008;\n"
"    _oColor = COLOR;\n"
"    _scale = (OutputSize/vec2( 3.20000000E+02, 2.40000000E+02))/4.00000000E+00;\n"
"    _middle = (5.00000000E-01*InputSize)/TextureSize;\n"
"    _diff = TexCoord.xy - _middle;\n"
"    _oTex = _middle + _diff*_scale;\n"
"    _dist = LUTTexCoord.xy - vec2( 4.99989986E-01, 4.99989986E-01);\n"
"    _otex_border = vec2( 4.99989986E-01, 4.99989986E-01) + (_dist*OutputSize)/vec2( 1.92000000E+03, 1.08000000E+03);\n"
"    gl_Position = _r0008;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = _oTex;\n"
"    TEX1.xy = _otex_border;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"vec4 _TMP12;\n"
"float _TMP11;\n"
"float _TMP10;\n"
"float _TMP28;\n"
"float _TMP9;\n"
"float _TMP8;\n"
"float _TMP6;\n"
"float _TMP5;\n"
"vec3 _TMP16;\n"
"float _TMP27;\n"
"float _TMP26;\n"
"float _TMP25;\n"
"float _TMP14;\n"
"float _TMP24;\n"
"vec2 _TMP13;\n"
"float _TMP23;\n"
"float _TMP22;\n"
"vec2 _TMP21;\n"
"float _TMP20;\n"
"float _TMP19;\n"
"float _TMP4;\n"
"uniform sampler2D Texture;\n"
"uniform sampler2D bg;\n"
"input_dummy _IN1;\n"
"float _a0041;\n"
"vec2 _n0043;\n"
"vec2 _x0043;\n"
"vec2 _f0043;\n"
"vec4 _m0043;\n"
"int _j10043;\n"
"int _i10043;\n"
"vec2 _g10043;\n"
"vec2 _o10043;\n"
"float _d10043;\n"
"vec3 _col10043;\n"
"float _h10043;\n"
"vec2 _TMP48;\n"
"vec2 _p0049;\n"
"vec2 _x0061;\n"
"vec2 _x0063;\n"
"vec2 _a0069;\n"
"vec2 _a0071;\n"
"float _TMP72;\n"
"float _x0077;\n"
"vec3 _x0079;\n"
"float _x0087;\n"
"float _TMP90;\n"
"float _TMP96;\n"
"vec3 _TMP100;\n"
"float _TMP108;\n"
"float _a0113;\n"
"float _x0117;\n"
"float _TMP118;\n"
"float _a0125;\n"
"float _x0129;\n"
"float _TMP130;\n"
"COMPAT_VARYING vec4 TEX0;\n"
"COMPAT_VARYING vec4 TEX1;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec2 _p1;\n"
"    float _k;\n"
"    vec3 _col;\n"
"    vec4 _hexscape;\n"
"    vec4 _frame;\n"
"    vec4 _background;\n"
"    _p1 = (5.00000000E+02*(TEX0.xy*(TextureSize.xy/InputSize.xy)))/TextureSize.yy;\n"
"    _a0041 = 4.71232496E-02*float(FrameCount);\n"
"    _TMP4 = cos(_a0041);\n"
"    _k = 5.00000000E-01 - 5.00000000E-01*_TMP4;\n"
"    _x0043 = 6.00000000E+00*_p1;\n"
"    _n0043 = floor(_x0043);\n"
"    _f0043 = fract(_x0043);\n"
"    _m0043 = vec4( 8.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);\n"
"    _j10043 = -1;\n"
"    for (; _j10043 <= 1; _j10043 = _j10043 + 1) { \n"
"        _i10043 = -1;\n"
"        for (; _i10043 <= 1; _i10043 = _i10043 + 1) { \n"
"            _g10043 = vec2(float(_i10043), float(_j10043));\n"
"            _p0049 = _n0043 + _g10043;\n"
"            _TMP19 = dot(_p0049, vec2( 1.27099998E+02, 3.11700012E+02));\n"
"            _TMP20 = dot(_p0049, vec2( 2.69500000E+02, 1.83300003E+02));\n"
"            _p0049 = vec2(_TMP19, _TMP20);\n"
"            _TMP22 = sin(_p0049.x);\n"
"            _TMP23 = sin(_p0049.y);\n"
"            _TMP21 = vec2(_TMP22, _TMP23);\n"
"            _x0061 = _TMP21*4.37585469E+04;\n"
"            _TMP48 = fract(_x0061);\n"
"            _x0063 = 9.99999978E-03*float(FrameCount) + 6.28310013E+00*_TMP48;\n"
"            _TMP22 = sin(_x0063.x);\n"
"            _TMP23 = sin(_x0063.y);\n"
"            _TMP13 = vec2(_TMP22, _TMP23);\n"
"            _o10043 = 5.00000000E-01 + 5.00000000E-01*_TMP13;\n"
"            _a0069 = (_g10043 - _f0043) + _o10043;\n"
"            _d10043 = length(_a0069);\n"
"            _a0071 = _n0043 + _g10043;\n"
"            _TMP14 = dot(_a0071, vec2( 7.00000000E+00, 1.13000000E+02));\n"
"            _TMP24 = sin(_TMP14);\n"
"            _x0077 = _TMP24*4.37585469E+04;\n"
"            _TMP72 = fract(_x0077);\n"
"            _x0079 = (_TMP72*2.50000000E+00 + 3.50000000E+00) + vec3( 2.00000000E+00, 3.00000000E+00, 0.00000000E+00);\n"
"            _TMP25 = sin(_x0079.x);\n"
"            _TMP26 = sin(_x0079.y);\n"
"            _TMP27 = sin(_x0079.z);\n"
"            _TMP16 = vec3(_TMP25, _TMP26, _TMP27);\n"
"            _col10043 = 5.00000000E-01 + 5.00000000E-01*_TMP16;\n"
"            _x0087 = 5.00000000E-01 + (5.00000000E-01*(_m0043.x - _d10043))/_k;\n"
"            _TMP28 = min(1.00000000E+00, _x0087);\n"
"            _TMP90 = max(0.00000000E+00, _TMP28);\n"
"            _h10043 = _TMP90*_TMP90*(3.00000000E+00 - 2.00000000E+00*_TMP90);\n"
"            _TMP96 = _m0043.x + _h10043*(_d10043 - _m0043.x);\n"
"            _m0043.x = _TMP96 - (_h10043*(1.00000000E+00 - _h10043)*_k)/(1.00000000E+00 + 3.00000000E+00*_k);\n"
"            _TMP100 = _m0043.yzw + _h10043*(_col10043 - _m0043.yzw);\n"
"            _m0043.yzw = _TMP100 - (_h10043*(1.00000000E+00 - _h10043)*_k)/(1.00000000E+00 + 3.00000000E+00*_k);\n"
"        } \n"
"    } \n"
"    _TMP5 = float((3.30000013E-01 >= _p1.y));\n"
"    _col = _m0043.yzw*(1.00000000E+00 - 8.00000012E-01*_m0043.x*_TMP5);\n"
"    _TMP6 = float((6.60000026E-01 >= _p1.y));\n"
"    _TMP108 = _m0043.x + _TMP6*(1.00000000E+00 - _m0043.x);\n"
"    _col = _col*_TMP108;\n"
"    _a0113 = _p1.y - 3.30000013E-01;\n"
"    _TMP8 = abs(_a0113);\n"
"    _x0117 = (_TMP8 - 4.99999989E-03)/2.00000033E-03;\n"
"    _TMP28 = min(1.00000000E+00, _x0117);\n"
"    _TMP118 = max(0.00000000E+00, _TMP28);\n"
"    _TMP9 = _TMP118*_TMP118*(3.00000000E+00 - 2.00000000E+00*_TMP118);\n"
"    _col = _col*_TMP9;\n"
"    _a0125 = _p1.y - 6.60000026E-01;\n"
"    _TMP10 = abs(_a0125);\n"
"    _x0129 = (_TMP10 - 4.99999989E-03)/2.00000033E-03;\n"
"    _TMP28 = min(1.00000000E+00, _x0129);\n"
"    _TMP130 = max(0.00000000E+00, _TMP28);\n"
"    _TMP11 = _TMP130*_TMP130*(3.00000000E+00 - 2.00000000E+00*_TMP130);\n"
"    _col = _col*_TMP11;\n"
"    _hexscape = vec4(_col.x, _col.y, _col.z, 1.00000000E+00);\n"
"    _frame = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _TMP12 = COMPAT_TEXTURE(bg, TEX1.xy);\n"
"    _background = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP12.w);\n"
"    _ret_0 = _frame + _background.w*(_hexscape - _frame);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
