{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _oPosition1;\n"
"vec4 _r0013;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _oColor;\n"
"    vec2 _oTex;\n"
"    _r0013 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0013 = _r0013 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0013 = _r0013 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0013 = _r0013 + VertexCoord.w*MVPMatrix[3];\n"
"    _oPosition1 = _r0013;\n"
"    _oColor = COLOR;\n"
"    _oTex = TexCoord.xy;\n"
"    gl_Position = _r0013;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = TexCoord.xy;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"vec4 _ret_0;\n"
"float _TMP7;\n"
"float _TMP6;\n"
"float _TMP8;\n"
"input_dummy _IN1;\n"
"uniform sampler2D Texture;\n"
"float _TMP20;\n"
"vec2 _diff0021;\n"
"float _dist0021;\n"
"float _TMP30;\n"
"vec2 _diff0031;\n"
"float _dist0031;\n"
"float _TMP40;\n"
"vec2 _diff0041;\n"
"float _dist0041;\n"
"float _TMP50;\n"
"vec2 _diff0051;\n"
"float _dist0051;\n"
"float _TMP60;\n"
"vec2 _diff0061;\n"
"float _dist0061;\n"
"float _TMP70;\n"
"vec2 _diff0071;\n"
"float _dist0071;\n"
"float _TMP80;\n"
"vec2 _diff0081;\n"
"float _dist0081;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec4 _output_dummy;\n"
"    vec2 _scale;\n"
"    float _res;\n"
"    _output_dummy = COMPAT_TEXTURE(Texture, TEX0.xy);\n"
"    _scale = (TEX0.xy*TextureSize)/InputSize;\n"
"    _diff0021 = _scale - vec2( 6.00000024E-01, 6.99999988E-01);\n"
"    _TMP6 = dot(_diff0021, _diff0021);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0021 = 3.00000000E+02*_TMP7;\n"
"    _dist0021 = _dist0021 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP20 = sin(_dist0021);\n"
"    _diff0031 = _scale - vec2( 8.99999976E-01, 8.99999976E-01);\n"
"    _TMP6 = dot(_diff0031, _diff0031);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0031 = 3.00000000E+02*_TMP7;\n"
"    _dist0031 = _dist0031 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP30 = sin(_dist0031);\n"
"    _res = _TMP20 + _TMP30;\n"
"    _diff0041 = _scale - vec2( -6.00000024E-01, 3.00000012E-01);\n"
"    _TMP6 = dot(_diff0041, _diff0041);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0041 = 3.00000000E+02*_TMP7;\n"
"    _dist0041 = _dist0041 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP40 = sin(_dist0041);\n"
"    _res = _res + _TMP40;\n"
"    _diff0051 = _scale - vec2( 1.00000001E-01, 4.00000006E-01);\n"
"    _TMP6 = dot(_diff0051, _diff0051);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0051 = 3.00000000E+02*_TMP7;\n"
"    _dist0051 = _dist0051 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP50 = sin(_dist0051);\n"
"    _res = _res + _TMP50;\n"
"    _diff0061 = _scale - vec2( 1.00000001E-01, 4.00000006E-01);\n"
"    _TMP6 = dot(_diff0061, _diff0061);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0061 = 3.00000000E+02*_TMP7;\n"
"    _dist0061 = _dist0061 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP60 = sin(_dist0061);\n"
"    _res = _res + _TMP60;\n"
"    _diff0071 = _scale - vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _TMP6 = dot(_diff0071, _diff0071);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0071 = 3.00000000E+02*_TMP7;\n"
"    _dist0071 = _dist0071 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP70 = sin(_dist0071);\n"
"    _res = _res + _TMP70;\n"
"    _diff0081 = _scale - vec2( -1.00000000E+00, 1.00000000E+00);\n"
"    _TMP6 = dot(_diff0081, _diff0081);\n"
"    _TMP8 = inversesqrt(_TMP6);\n"
"    _TMP7 = 1.00000000E+00/_TMP8;\n"
"    _dist0081 = 3.00000000E+02*_TMP7;\n"
"    _dist0081 = _dist0081 - 1.50000006E-01*float(FrameCount);\n"
"    _TMP80 = sin(_dist0081);\n"
"    _res = _res + _TMP80;\n"
"    _ret_0 = _output_dummy*(8.99999976E-01 + 1.20000001E-02*_res);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
