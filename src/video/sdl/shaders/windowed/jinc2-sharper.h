{
"// GLSL shader autogenerated by cg2glsl.py.\n"
"#if defined(VERTEX)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING out\n"
"#define COMPAT_ATTRIBUTE in\n"
"#define COMPAT_TEXTURE texture\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define COMPAT_ATTRIBUTE attribute\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     vec4 _position1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _position1;\n"
"    vec4 _color1;\n"
"    vec2 _texCoord;\n"
"};\n"
"out_vertex _ret_0;\n"
"vec4 _r0008;\n"
"COMPAT_ATTRIBUTE vec4 VertexCoord;\n"
"COMPAT_ATTRIBUTE vec4 COLOR;\n"
"COMPAT_ATTRIBUTE vec4 TexCoord;\n"
"COMPAT_VARYING vec4 COL0;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform mat4 MVPMatrix;\n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    _r0008 = VertexCoord.x*MVPMatrix[0];\n"
"    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];\n"
"    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];\n"
"    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];\n"
"    _ret_0._position1 = _r0008;\n"
"    _ret_0._color1 = COLOR;\n"
"    _ret_0._texCoord = TexCoord.xy;\n"
"    gl_Position = _r0008;\n"
"    COL0 = COLOR;\n"
"    TEX0.xy = TexCoord.xy;\n"
"    return;\n"
"    COL0 = _ret_0._color1;\n"
"    TEX0.xy = _ret_0._texCoord;\n"
"} \n"
"#elif defined(FRAGMENT)\n"
"\n"
"#if __VERSION__ >= 130\n"
"#define COMPAT_VARYING in\n"
"#define COMPAT_TEXTURE texture\n"
"out vec4 FragColor;\n"
"#else\n"
"#define COMPAT_VARYING varying\n"
"#define FragColor gl_FragColor\n"
"#define COMPAT_TEXTURE texture2D\n"
"#endif\n"
"\n"
"#ifdef GL_ES\n"
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
"precision highp float;\n"
"#else\n"
"precision mediump float;\n"
"#endif\n"
"#define COMPAT_PRECISION mediump\n"
"#else\n"
"#define COMPAT_PRECISION\n"
"#endif\n"
"COMPAT_VARYING     vec2 _texCoord;\n"
"COMPAT_VARYING     vec4 _color1;\n"
"COMPAT_VARYING     float _frame_rotation;\n"
"struct input_dummy {\n"
"    vec2 _video_size;\n"
"    vec2 _texture_size;\n"
"    vec2 _output_dummy_size;\n"
"    float _frame_count;\n"
"    float _frame_direction;\n"
"    float _frame_rotation;\n"
"};\n"
"struct out_vertex {\n"
"    vec4 _color1;\n"
"    vec2 _texCoord;\n"
"};\n"
"vec4 _ret_0;\n"
"vec3 _TMP45;\n"
"float _TMP37;\n"
"vec3 _TMP44;\n"
"vec3 _TMP43;\n"
"vec3 _TMP42;\n"
"vec3 _TMP41;\n"
"vec4 _TMP32;\n"
"vec4 _TMP31;\n"
"vec4 _TMP30;\n"
"vec4 _TMP29;\n"
"vec4 _TMP28;\n"
"vec4 _TMP27;\n"
"vec4 _TMP26;\n"
"vec4 _TMP25;\n"
"vec4 _TMP24;\n"
"vec4 _TMP23;\n"
"vec4 _TMP22;\n"
"vec4 _TMP21;\n"
"vec4 _TMP20;\n"
"vec4 _TMP19;\n"
"vec4 _TMP18;\n"
"vec4 _TMP17;\n"
"vec4 _TMP40;\n"
"vec4 _TMP39;\n"
"float _TMP50;\n"
"float _TMP49;\n"
"float _TMP48;\n"
"float _TMP47;\n"
"float _TMP38;\n"
"float _TMP46;\n"
"vec2 _TMP0;\n"
"uniform sampler2D Texture;\n"
"input_dummy _IN1;\n"
"vec2 _x0060;\n"
"float _TMP61;\n"
"vec2 _v0062;\n"
"vec2 _pt20062;\n"
"float _TMP69;\n"
"vec2 _v0070;\n"
"vec2 _pt20070;\n"
"float _TMP77;\n"
"vec2 _v0078;\n"
"vec2 _pt20078;\n"
"float _TMP85;\n"
"vec2 _v0086;\n"
"vec2 _pt20086;\n"
"vec4 _x0094;\n"
"vec4 _res0094;\n"
"vec4 _x0096;\n"
"vec4 _x0106;\n"
"float _TMP115;\n"
"vec2 _v0116;\n"
"vec2 _pt20116;\n"
"float _TMP123;\n"
"vec2 _v0124;\n"
"float _TMP131;\n"
"vec2 _v0132;\n"
"vec2 _pt20132;\n"
"float _TMP139;\n"
"vec2 _v0140;\n"
"vec2 _pt20140;\n"
"vec4 _x0148;\n"
"vec4 _res0148;\n"
"vec4 _x0150;\n"
"vec4 _x0160;\n"
"float _TMP169;\n"
"vec2 _v0170;\n"
"vec2 _pt20170;\n"
"float _TMP177;\n"
"vec2 _v0178;\n"
"vec2 _pt20178;\n"
"float _TMP185;\n"
"vec2 _v0186;\n"
"vec2 _pt20186;\n"
"float _TMP193;\n"
"vec2 _v0194;\n"
"vec2 _pt20194;\n"
"vec4 _x0202;\n"
"vec4 _res0202;\n"
"vec4 _x0204;\n"
"vec4 _x0214;\n"
"float _TMP223;\n"
"vec2 _v0224;\n"
"vec2 _pt20224;\n"
"float _TMP231;\n"
"vec2 _v0232;\n"
"vec2 _pt20232;\n"
"float _TMP239;\n"
"vec2 _v0240;\n"
"vec2 _pt20240;\n"
"float _TMP247;\n"
"vec2 _v0248;\n"
"vec2 _pt20248;\n"
"vec4 _x0256;\n"
"vec4 _res0256;\n"
"vec4 _x0258;\n"
"vec4 _x0268;\n"
"vec2 _c0278;\n"
"vec2 _c0280;\n"
"vec2 _c0282;\n"
"vec2 _c0284;\n"
"vec2 _c0286;\n"
"vec2 _c0290;\n"
"vec2 _c0292;\n"
"vec2 _c0294;\n"
"vec2 _c0296;\n"
"vec2 _c0298;\n"
"vec2 _c0300;\n"
"vec2 _c0302;\n"
"vec2 _c0304;\n"
"vec2 _c0306;\n"
"vec2 _c0308;\n"
"vec3 _TMP309;\n"
"vec3 _TMP317;\n"
"vec3 _r0326;\n"
"vec3 _r0328;\n"
"vec3 _r0330;\n"
"vec3 _r0332;\n"
"vec4 _r0334;\n"
"vec3 _TMP345;\n"
"COMPAT_VARYING vec4 TEX0;\n"
" \n"
"uniform int FrameDirection;\n"
"uniform int FrameCount;\n"
"uniform COMPAT_PRECISION vec2 OutputSize;\n"
"uniform COMPAT_PRECISION vec2 TextureSize;\n"
"uniform COMPAT_PRECISION vec2 InputSize;\n"
"void main()\n"
"{\n"
"    vec3 _color;\n"
"    vec2 _dx;\n"
"    vec2 _dy;\n"
"    vec2 _pc;\n"
"    vec2 _tc;\n"
"    _pc = TEX0.xy*TextureSize;\n"
"    _x0060 = _pc - vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _TMP0 = floor(_x0060);\n"
"    _tc = _TMP0 + vec2( 5.00000000E-01, 5.00000000E-01);\n"
"    _pt20062 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0062 = _pt20062 - _pc;\n"
"    _TMP38 = dot(_v0062, _v0062);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP61 = 1.00000000E+00/_TMP46;\n"
"    _pt20070 = _tc - vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0070 = _pt20070 - _pc;\n"
"    _TMP38 = dot(_v0070, _v0070);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP69 = 1.00000000E+00/_TMP46;\n"
"    _pt20078 = (_tc + vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0078 = _pt20078 - _pc;\n"
"    _TMP38 = dot(_v0078, _v0078);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP77 = 1.00000000E+00/_TMP46;\n"
"    _pt20086 = (_tc + vec2( 2.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0086 = _pt20086 - _pc;\n"
"    _TMP38 = dot(_v0086, _v0086);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP85 = 1.00000000E+00/_TMP46;\n"
"    _x0094 = vec4(_TMP61, _TMP69, _TMP77, _TMP85);\n"
"    _x0096 = _x0094*1.31946886E+00;\n"
"    _TMP47 = sin(_x0096.x);\n"
"    _TMP48 = sin(_x0096.y);\n"
"    _TMP49 = sin(_x0096.z);\n"
"    _TMP50 = sin(_x0096.w);\n"
"    _TMP39 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _x0106 = _x0094*2.89026546E+00;\n"
"    _TMP47 = sin(_x0106.x);\n"
"    _TMP48 = sin(_x0106.y);\n"
"    _TMP49 = sin(_x0106.z);\n"
"    _TMP50 = sin(_x0106.w);\n"
"    _TMP40 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _res0094 = vec4(_x0094.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0094*_x0094)).x, _x0094.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0094*_x0094)).y, _x0094.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0094*_x0094)).z, _x0094.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0094*_x0094)).w);\n"
"    _pt20116 = _tc - vec2( 1.00000000E+00, 0.00000000E+00);\n"
"    _v0116 = _pt20116 - _pc;\n"
"    _TMP38 = dot(_v0116, _v0116);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP115 = 1.00000000E+00/_TMP46;\n"
"    _v0124 = _tc - _pc;\n"
"    _TMP38 = dot(_v0124, _v0124);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP123 = 1.00000000E+00/_TMP46;\n"
"    _pt20132 = _tc + vec2( 1.00000000E+00, 0.00000000E+00);\n"
"    _v0132 = _pt20132 - _pc;\n"
"    _TMP38 = dot(_v0132, _v0132);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP131 = 1.00000000E+00/_TMP46;\n"
"    _pt20140 = _tc + vec2( 2.00000000E+00, 0.00000000E+00);\n"
"    _v0140 = _pt20140 - _pc;\n"
"    _TMP38 = dot(_v0140, _v0140);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP139 = 1.00000000E+00/_TMP46;\n"
"    _x0148 = vec4(_TMP115, _TMP123, _TMP131, _TMP139);\n"
"    _x0150 = _x0148*1.31946886E+00;\n"
"    _TMP47 = sin(_x0150.x);\n"
"    _TMP48 = sin(_x0150.y);\n"
"    _TMP49 = sin(_x0150.z);\n"
"    _TMP50 = sin(_x0150.w);\n"
"    _TMP39 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _x0160 = _x0148*2.89026546E+00;\n"
"    _TMP47 = sin(_x0160.x);\n"
"    _TMP48 = sin(_x0160.y);\n"
"    _TMP49 = sin(_x0160.z);\n"
"    _TMP50 = sin(_x0160.w);\n"
"    _TMP40 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _res0148 = vec4(_x0148.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0148*_x0148)).x, _x0148.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0148*_x0148)).y, _x0148.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0148*_x0148)).z, _x0148.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0148*_x0148)).w);\n"
"    _pt20170 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0170 = _pt20170 - _pc;\n"
"    _TMP38 = dot(_v0170, _v0170);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP169 = 1.00000000E+00/_TMP46;\n"
"    _pt20178 = _tc + vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0178 = _pt20178 - _pc;\n"
"    _TMP38 = dot(_v0178, _v0178);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP177 = 1.00000000E+00/_TMP46;\n"
"    _pt20186 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0186 = _pt20186 - _pc;\n"
"    _TMP38 = dot(_v0186, _v0186);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP185 = 1.00000000E+00/_TMP46;\n"
"    _pt20194 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);\n"
"    _v0194 = _pt20194 - _pc;\n"
"    _TMP38 = dot(_v0194, _v0194);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP193 = 1.00000000E+00/_TMP46;\n"
"    _x0202 = vec4(_TMP169, _TMP177, _TMP185, _TMP193);\n"
"    _x0204 = _x0202*1.31946886E+00;\n"
"    _TMP47 = sin(_x0204.x);\n"
"    _TMP48 = sin(_x0204.y);\n"
"    _TMP49 = sin(_x0204.z);\n"
"    _TMP50 = sin(_x0204.w);\n"
"    _TMP39 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _x0214 = _x0202*2.89026546E+00;\n"
"    _TMP47 = sin(_x0214.x);\n"
"    _TMP48 = sin(_x0214.y);\n"
"    _TMP49 = sin(_x0214.z);\n"
"    _TMP50 = sin(_x0214.w);\n"
"    _TMP40 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _res0202 = vec4(_x0202.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0202*_x0202)).x, _x0202.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0202*_x0202)).y, _x0202.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0202*_x0202)).z, _x0202.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0202*_x0202)).w);\n"
"    _pt20224 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 2.00000000E+00);\n"
"    _v0224 = _pt20224 - _pc;\n"
"    _TMP38 = dot(_v0224, _v0224);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP223 = 1.00000000E+00/_TMP46;\n"
"    _pt20232 = _tc + vec2( 0.00000000E+00, 2.00000000E+00);\n"
"    _v0232 = _pt20232 - _pc;\n"
"    _TMP38 = dot(_v0232, _v0232);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP231 = 1.00000000E+00/_TMP46;\n"
"    _pt20240 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);\n"
"    _v0240 = _pt20240 - _pc;\n"
"    _TMP38 = dot(_v0240, _v0240);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP239 = 1.00000000E+00/_TMP46;\n"
"    _pt20248 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);\n"
"    _v0248 = _pt20248 - _pc;\n"
"    _TMP38 = dot(_v0248, _v0248);\n"
"    _TMP46 = inversesqrt(_TMP38);\n"
"    _TMP247 = 1.00000000E+00/_TMP46;\n"
"    _x0256 = vec4(_TMP223, _TMP231, _TMP239, _TMP247);\n"
"    _x0258 = _x0256*1.31946886E+00;\n"
"    _TMP47 = sin(_x0258.x);\n"
"    _TMP48 = sin(_x0258.y);\n"
"    _TMP49 = sin(_x0258.z);\n"
"    _TMP50 = sin(_x0258.w);\n"
"    _TMP39 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _x0268 = _x0256*2.89026546E+00;\n"
"    _TMP47 = sin(_x0268.x);\n"
"    _TMP48 = sin(_x0268.y);\n"
"    _TMP49 = sin(_x0268.z);\n"
"    _TMP50 = sin(_x0268.w);\n"
"    _TMP40 = vec4(_TMP47, _TMP48, _TMP49, _TMP50);\n"
"    _res0256 = vec4(_x0256.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0256*_x0256)).x, _x0256.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0256*_x0256)).y, _x0256.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0256*_x0256)).z, _x0256.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP39*_TMP40)/(_x0256*_x0256)).w);\n"
"    _dx = vec2( 1.00000000E+00, 0.00000000E+00)/TextureSize;\n"
"    _dy = vec2( 0.00000000E+00, 1.00000000E+00)/TextureSize;\n"
"    _tc = _tc/TextureSize;\n"
"    _c0278 = (_tc - _dx) - _dy;\n"
"    _TMP17 = COMPAT_TEXTURE(Texture, _c0278);\n"
"    _c0280 = _tc - _dy;\n"
"    _TMP18 = COMPAT_TEXTURE(Texture, _c0280);\n"
"    _c0282 = (_tc + _dx) - _dy;\n"
"    _TMP19 = COMPAT_TEXTURE(Texture, _c0282);\n"
"    _c0284 = (_tc + 2.00000000E+00*_dx) - _dy;\n"
"    _TMP20 = COMPAT_TEXTURE(Texture, _c0284);\n"
"    _c0286 = _tc - _dx;\n"
"    _TMP21 = COMPAT_TEXTURE(Texture, _c0286);\n"
"    _TMP22 = COMPAT_TEXTURE(Texture, _tc);\n"
"    _c0290 = _tc + _dx;\n"
"    _TMP23 = COMPAT_TEXTURE(Texture, _c0290);\n"
"    _c0292 = _tc + 2.00000000E+00*_dx;\n"
"    _TMP24 = COMPAT_TEXTURE(Texture, _c0292);\n"
"    _c0294 = (_tc - _dx) + _dy;\n"
"    _TMP25 = COMPAT_TEXTURE(Texture, _c0294);\n"
"    _c0296 = _tc + _dy;\n"
"    _TMP26 = COMPAT_TEXTURE(Texture, _c0296);\n"
"    _c0298 = _tc + _dx + _dy;\n"
"    _TMP27 = COMPAT_TEXTURE(Texture, _c0298);\n"
"    _c0300 = _tc + 2.00000000E+00*_dx + _dy;\n"
"    _TMP28 = COMPAT_TEXTURE(Texture, _c0300);\n"
"    _c0302 = (_tc - _dx) + 2.00000000E+00*_dy;\n"
"    _TMP29 = COMPAT_TEXTURE(Texture, _c0302);\n"
"    _c0304 = _tc + 2.00000000E+00*_dy;\n"
"    _TMP30 = COMPAT_TEXTURE(Texture, _c0304);\n"
"    _c0306 = _tc + _dx + 2.00000000E+00*_dy;\n"
"    _TMP31 = COMPAT_TEXTURE(Texture, _c0306);\n"
"    _c0308 = _tc + 2.00000000E+00*_dx + 2.00000000E+00*_dy;\n"
"    _TMP32 = COMPAT_TEXTURE(Texture, _c0308);\n"
"    _TMP41 = min(_TMP26.xyz, _TMP27.xyz);\n"
"    _TMP42 = min(_TMP23.xyz, _TMP41);\n"
"    _TMP309 = min(_TMP22.xyz, _TMP42);\n"
"    _TMP43 = max(_TMP26.xyz, _TMP27.xyz);\n"
"    _TMP44 = max(_TMP23.xyz, _TMP43);\n"
"    _TMP317 = max(_TMP22.xyz, _TMP44);\n"
"    _r0326 = _res0094.x*_TMP17.xyz;\n"
"    _r0326 = _r0326 + _res0094.y*_TMP18.xyz;\n"
"    _r0326 = _r0326 + _res0094.z*_TMP19.xyz;\n"
"    _r0326 = _r0326 + _res0094.w*_TMP20.xyz;\n"
"    _r0328 = _res0148.x*_TMP21.xyz;\n"
"    _r0328 = _r0328 + _res0148.y*_TMP22.xyz;\n"
"    _r0328 = _r0328 + _res0148.z*_TMP23.xyz;\n"
"    _r0328 = _r0328 + _res0148.w*_TMP24.xyz;\n"
"    _color = _r0326 + _r0328;\n"
"    _r0330 = _res0202.x*_TMP25.xyz;\n"
"    _r0330 = _r0330 + _res0202.y*_TMP26.xyz;\n"
"    _r0330 = _r0330 + _res0202.z*_TMP27.xyz;\n"
"    _r0330 = _r0330 + _res0202.w*_TMP28.xyz;\n"
"    _color = _color + _r0330;\n"
"    _r0332 = _res0256.x*_TMP29.xyz;\n"
"    _r0332 = _r0332 + _res0256.y*_TMP30.xyz;\n"
"    _r0332 = _r0332 + _res0256.z*_TMP31.xyz;\n"
"    _r0332 = _r0332 + _res0256.w*_TMP32.xyz;\n"
"    _color = _color + _r0332;\n"
"    _r0334.x = dot(_res0094, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _r0334.y = dot(_res0148, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _r0334.z = dot(_res0202, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _r0334.w = dot(_res0256, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _TMP37 = dot(_r0334, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));\n"
"    _color = _color/_TMP37;\n"
"    _TMP45 = min(_TMP317, _color);\n"
"    _TMP345 = max(_TMP309, _TMP45);\n"
"    _color = _color + 8.00000012E-01*(_TMP345 - _color);\n"
"    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);\n"
"    FragColor = _ret_0;\n"
"    return;\n"
"} \n"
"#endif\n"
},
